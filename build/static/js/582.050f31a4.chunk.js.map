{"version":3,"file":"static/js/582.050f31a4.chunk.js","mappings":"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","sources":["utils/bigheads.js","components/Avatars/index.js","components/Avatars/Avatars.jsx","components/EditContact/EditContact.styled.jsx","components/EditContact/index.js","components/EditContact/EditContact.jsx","components/ContactEl/ContactEl.styled.jsx","components/ContactEl/index.js","components/ContactEl/ContactEl.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/index.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/index.js","components/Filter/Filter.jsx","pages/Contacts/Contacts.styled.jsx","pages/Contacts/index.js","pages/Contacts/Contacts.jsx","redux/contacts/selectors.js"],"sourcesContent":["import {\n  theme,\n  eyesMap,\n  eyebrowsMap,\n  mouthsMap,\n  hairMap,\n  facialHairMap,\n  clothingMap,\n  accessoryMap,\n  graphicsMap,\n  hatMap,\n  bodyMap\n} from \"@bigheads/core\";\n\nfunction selectRandomKey(object) {\n  return Object.keys(object)[\n    Math.floor(Math.random() * Object.keys(object).length)\n  ];\n}\n\nexport function getRandomOptions() {\n  const skinTone = selectRandomKey(theme.colors.skin);\n  const eyes = selectRandomKey(eyesMap);\n  const eyebrows = selectRandomKey(eyebrowsMap);\n  const mouth = selectRandomKey(mouthsMap);\n  const hair = selectRandomKey(hairMap);\n  const facialHair = selectRandomKey(facialHairMap);\n  const clothing = selectRandomKey(clothingMap);\n  const accessory = selectRandomKey(accessoryMap);\n  const graphic = selectRandomKey(graphicsMap);\n  const hat = selectRandomKey(hatMap);\n  const body = selectRandomKey(bodyMap);\n\n  const hairColor = selectRandomKey(theme.colors.hair);\n  const clothingColor = selectRandomKey(theme.colors.clothing);\n  const circleColor = selectRandomKey(theme.colors.bgColors);\n  const lipColor = selectRandomKey(theme.colors.lipColors);\n  const hatColor = selectRandomKey(theme.colors.clothing);\n  const faceMaskColor = selectRandomKey(theme.colors.clothing);\n\n  const mask = true;\n  const faceMask = false;\n  const lashes = Math.random() > 0.5;\n\n  return {\n    skinTone,\n    eyes,\n    eyebrows,\n    mouth,\n    hair,\n    facialHair,\n    clothing,\n    accessory,\n    graphic,\n    hat,\n    body,\n    hairColor,\n    clothingColor,\n    circleColor,\n    lipColor,\n    hatColor,\n    faceMaskColor,\n    mask,\n    faceMask,\n    lashes\n  };\n}\n","import Avatars from \"./Avatars\";\n\nexport default Avatars;","import { BigHead } from '@bigheads/core';\nimport { getRandomOptions } from 'utils/bigheads';\n\nconst Avatars = () => {\n  return (\n    <div style={{ width: '50px' }}>\n      <BigHead {...getRandomOptions()} />\n    </div>\n  );\n};\nexport default Avatars;\n","import styled from 'styled-components';\n\nexport const Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.8);\n  z-index: 1200;\n`;\n\nexport const Backdrop = styled.div`\n  max-width: calc(70vw - 48px);\n  max-height: calc(1000vh - 24px);\n`;\n\nexport const Form = styled.form`\n  padding: 50px;\n  background: white;\n  display: block;\n`;\n\nexport const Input = styled.input``;\n\nexport const Button = styled.button`\n  color: red;\n`;\n","import EditContact from './EditContact';\n\nexport default EditContact;","import { Overlay, Backdrop, Form } from './EditContact.styled';\nimport { useEffect } from 'react';\nimport { Input, Button } from '@chakra-ui/react';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\n\nconst EditContact = ({ onClick, contact }) => {\n  // const [name, setName] = useState('');\n  // const [number, setNumber] = useState('');\n\n  useEffect(() => {\n    const handleKeyDown = e => {\n      if (e.code === 'Escape') {\n        onClick();\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [onClick]);\n\n  const handleBackdrop = e => {\n    e.preventDefault();\n\n    if (e.target === 'modal') {\n      onClick();\n    }\n  };\n  // console.log('name', name);\n  // console.log('number', number);\n  \n\n  const dispatch = useDispatch();\n  \n  const handleSubmit = e => {\n\n    e.preventDefault();\n    dispatch(addContact({\n      name: e.currentTarget.elements.name.value,\n      number: e.currentTarget.elements.number.value\n    }))\n  }\n\n  return (\n    <>\n      <Overlay>\n        <Backdrop>\n          <Form onClick={() => handleBackdrop} onSubmit={handleSubmit}>\n            <Input\n              type=\"text\"\n              name=\"name\"\n              defaultValue={contact.name}\n              // onChange={e => setName(e.target.value)}\n            />\n            <Input\n              type=\"tel\"\n              name=\"number\"\n              defaultValue={contact.number}\n              // onChange={e => setNumber(e.target.value)}\n            />\n            <Button type=\"submit\">Submit</Button>\n            <Button id=\"modal\" type=\"submit\">\n              Close\n            </Button>\n          </Form>\n        </Backdrop>\n      </Overlay>\n    </>\n  );\n};\n\nexport default EditContact;\n","import styled from \"styled-components\";\n\n\nexport const Button = styled.button`\n  border-radius: 4px;\n  border-color: transparent;\n\n  margin-left: 16px;\n\n  &:hover, :focus {\n    background: #1e90ff;\n  }\n`;\n\nexport const ListEl = styled.li`\ndisplay: flex;\njustify-content: space-between;\n  margin: 4px 0;\n`;\n\nexport const UserInfo = styled.div`\n  display: flex;\n  justify-content: start;\n  align-items: center;\n`;\n\nexport const UserName = styled.div`\n  font-weight: 600;\n  text-transform: uppercase;\n  margin-left: 8px;\n`;","import ContactEl from \"./ContactEl\";\n\nexport default ContactEl;","import { Button } from '@chakra-ui/react';\nimport Avatars from 'components/Avatars';\nimport EditContact from 'components/EditContact';\nimport { PropTypes } from 'prop-types';\nimport { useState } from 'react';\nimport { ListEl, UserInfo, UserName } from './ContactEl.styled';\n\nconst ContactEl = ({ contact, onDelete }) => {\n  const [ isOpenModal, setIsOpenModal ] = useState(false);\n\n  const handleEditContact = e => {\n   setIsOpenModal(true) \n  };\n\n   const handleEditContactClose = e => {\n     setIsOpenModal(false);\n   };\n\n  return (\n    <ListEl onClick={handleEditContact}>\n      <UserInfo>\n        <Avatars />\n        <UserName>\n          {contact.name} : {contact.number}\n        </UserName>\n      </UserInfo>\n      <Button\n        size=\"sm\"\n        border=\"1px solid\"\n        borderRadius=\"100%\"\n        type=\"button\"\n        onClick={() => {\n          onDelete(contact.id);\n        }}\n      >\n        Delete\n      </Button>\n      {isOpenModal && (\n        <EditContact onClick={handleEditContactClose} contact={contact} />\n      )}\n    </ListEl>\n  );\n};\n\nContactEl.propTypes = {\n  contact: PropTypes.objectOf(PropTypes.string).isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n\nexport default ContactEl;\n","import styled from \"styled-components\";\n\nexport const Items = styled.ul`\n  overflow: auto;\n  height: 220px;\n`;","import ContactList from \"./ContactList\";\n\nexport default ContactList\n","import { PropTypes } from 'prop-types';\nimport ContactEl from 'components/ContactEl';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { selectContacts, selectFilter } from 'redux/contacts/selectors';\nimport { Items } from './ContactList.styled';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const dispatch = useDispatch();\n\n  const filtringContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter)\n  );\n\n  return (\n    <Items>\n      {filtringContacts.map(contact => (\n        <ContactEl\n          contact={contact}\n          key={contact.id}\n          onDelete={() => dispatch(deleteContact(contact.id))}\n        />\n      ))}\n    </Items>\n  );\n};\n\nContactList.propTypes = {\n  filtringContacts: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string)),\n};\n\nexport default ContactList;\n","import styled from \"styled-components\";\n\nexport const LabelFilter = styled.label`\n  display: grid;\n`;\n","import Filter from \"./Filter\";\n\nexport default Filter","import { LabelFilter} from \"./Filter.styled\";\n// \nimport { useDispatch } from 'react-redux';\nimport { filtringContactsUser } from 'redux/contacts/filterSlice';\nimport { Input } from \"@chakra-ui/react\";\n\nconst Filter = () => {\n\n  const dispatch = useDispatch();\n  \n  const handleFilter = e => {\n    dispatch(filtringContactsUser(e.target.value.toLowerCase().trim()));\n  }\n  return (\n    <LabelFilter>\n       Find contacts by name\n      <Input type=\"text\" name=\"name\" onChange={handleFilter}/>\n    </LabelFilter>\n  );\n};\n\nexport default Filter;","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n`;\n\nexport const Counter = styled.div`\n  position: absolute;\n  top:0;\n  right:34%;\n  text-decoration: underline;\n  font-weight: 600;\n  \n`;\n\nexport const ContactNumber = styled.span`\ncolor: red;\n`;\n","import Contacts from \"./Contacts\";\n\nexport default Contacts","import ContactList from \"components/ContactList\"\nimport Filter from \"components/Filter\"\nimport { Container, Counter, ContactNumber } from './Contacts.styled';\nimport { selectContacts, selectError, selectIsLoading } from \"redux/contacts/selectors\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { useEffect } from \"react\"\nimport { fetchContacts } from \"redux/contacts/operations\"\n\nconst Contacts = () => {\n  const dispatch = useDispatch()\n\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts())\n  }, [dispatch])\n\n\n  return (\n    <Container>\n      <div>\n        <Counter>\n          You have <ContactNumber>{contacts.length}</ContactNumber> contacts\n        </Counter>\n        <Filter />\n      </div>\n      {isLoading && !error && <b>Request in progress...</b>}\n      {contacts.length > 0 && <ContactList />}\n    </Container>\n  );\n}\n\n\nexport default Contacts","export const selectContacts = state => state.contacts.items;\n\nexport const selectFilter = state => state.filter.filtred;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n"],"names":["selectRandomKey","object","Object","keys","Math","floor","random","length","style","width","skinTone","theme","eyes","eyesMap","eyebrows","eyebrowsMap","mouth","mouthsMap","hair","hairMap","facialHair","facialHairMap","clothing","clothingMap","accessory","accessoryMap","graphic","graphicsMap","hat","hatMap","body","bodyMap","hairColor","clothingColor","circleColor","lipColor","hatColor","faceMaskColor","mask","faceMask","lashes","Overlay","styled","Backdrop","Form","onClick","contact","useEffect","handleKeyDown","e","code","window","addEventListener","removeEventListener","handleBackdrop","preventDefault","target","dispatch","useDispatch","onSubmit","addContact","name","currentTarget","elements","value","number","type","defaultValue","id","ListEl","UserInfo","UserName","onDelete","useState","isOpenModal","setIsOpenModal","size","border","borderRadius","Items","contacts","useSelector","selectContacts","filter","selectFilter","filtringContacts","toLowerCase","includes","map","deleteContact","LabelFilter","onChange","filtringContactsUser","trim","Container","Counter","ContactNumber","isLoading","selectIsLoading","error","selectError","fetchContacts","state","items","filtred"],"sourceRoot":""}