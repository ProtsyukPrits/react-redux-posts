{"version":3,"file":"static/js/670.d4059b8b.chunk.js","mappings":"6NAIaA,GAAWC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,6DAMRE,EAAQF,EAAAA,GAAAA,MAAH,iE,GAMIA,EAAAA,GAAAA,OAAH,uJ,uFCPbG,EAAgB,CACpBC,KAAM,GACNC,OAAQ,IAOJC,EAASC,EAAAA,KAAaC,MAAM,CAChCJ,KAAMG,EAAAA,KAEHE,QAPa,yHASZ,0IAEDC,WACHL,OAAQE,EAAAA,KAELE,QAZH,+EAcI,gGAEDC,aC9BL,EDiCoB,WAClB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IAa7B,OACI,SAAC,KAAD,CACEZ,cAAeA,EACfa,SAde,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UACtBd,EAASa,EAATb,KAER,GAAIS,EAASM,MAAK,SAAAC,GAAO,OAAIA,EAAQhB,OAASA,CAArB,IACvB,OAAOiB,IAAAA,OAAAA,KAAA,UAAwBjB,EAAxB,6BAGTc,IACAP,GAASW,EAAAA,EAAAA,IAAWL,GACrB,EAMKM,iBAAkBjB,EAHpB,UAKE,UAACP,EAAD,CAAUyB,aAAa,MAAvB,WACE,UAACtB,EAAD,CAAOuB,QAAQ,OAAf,mBAEE,SAAC,KAAD,CAAOC,KAAK,OAAOtB,KAAK,OAAOuB,GAAIC,EAAAA,MACnC,SAAC,KAAD,CAAcxB,KAAK,OAAOyB,UAAU,YAGtC,UAAC3B,EAAD,CAAOuB,QAAQ,SAAf,qBAEE,SAAC,KAAD,CAAOC,KAAK,MAAMtB,KAAK,SAASuB,GAAIC,EAAAA,MACpC,SAAC,KAAD,CAAcxB,KAAK,SAASyB,UAAU,YAGxC,SAAC,KAAD,CAAQH,KAAK,SAAb,8BAIT,EEvEYI,EAAiB9B,EAAAA,GAAAA,IAAH,0BCA3B,ECEkB,WAChB,OACE,SAAC8B,EAAD,WACE,SAAC,EAAD,KAGL,C,gICVM,IAAMf,EAAiB,SAAAgB,GAAK,OAAIA,EAAMlB,SAASmB,KAAnB,EAEtBC,EAAe,SAAAF,GAAK,OAAIA,EAAMG,OAAOC,OAAjB,EAEpBC,EAAkB,SAAAL,GAAK,OAAIA,EAAMlB,SAASwB,SAAnB,EAEvBC,EAAc,SAAAP,GAAK,OAAIA,EAAMlB,SAAS0B,KAAnB,C","sources":["components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/ContactForm/index.js","pages/Phonebook/Phonebook.styled.jsx","pages/Phonebook/index.js","pages/Phonebook/Phonebook.jsx","redux/contacts/selectors.js"],"sourcesContent":["import styled from 'styled-components';\nimport {Form} from 'formik'\n \n\nexport const FormList = styled(Form)`\n  display: grid;\n\n  padding: 8px;\n`;\n\nexport const Label = styled.label`\n  display: grid;\n  margin-bottom:10px;\n`;\n\n\nexport const Button = styled.button`\n  width: 100px;\n  border-color: transparent;\n  border-radius: 4px;\n\n  &:hover,\n  :focus {\n    background: #1e90ff;\n  }\n`;\n","import { FormList, Label} from './ContactForm.styled';\nimport { Formik, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport Notiflix from 'notiflix';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { Button, Input } from '@chakra-ui/react';\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nconst nameRegex = /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/;\nconst numberRegex =\n  /^\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/;\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(\n      nameRegex,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required(),\n  number: yup\n    .string()\n    .matches(\n      numberRegex,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required(),\n});\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = (values, { resetForm }) => {\n    const { name } = values;\n\n    if (contacts.some(contact => contact.name === name)) {\n      return Notiflix.Notify.info(`${name} is already in contacts!`);\n    }\n\n    resetForm();\n    dispatch(addContact(values));\n  };\n\n  return (\n      <Formik\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n        validationSchema={schema}\n      >\n        <FormList autoComplete=\"off\">\n          <Label htmlFor=\"name\">\n            Name:\n            <Field type=\"text\" name=\"name\" as={Input} />\n            <ErrorMessage name=\"name\" component=\"div\" />\n          </Label>\n\n          <Label htmlFor=\"number\">\n            Number:\n            <Field type=\"tel\" name=\"number\" as={Input} />\n            <ErrorMessage name=\"number\" component=\"div\" />\n          </Label>\n\n          <Button type=\"submit\">Add contacts</Button>\n        </FormList>\n      </Formik>\n  );\n};\n\nexport default ContactForm;\n","import ContactForm from \"./ContactForm\";\n\nexport default ContactForm","import styled from \"styled-components\";\n\nexport const PhoneContainer = styled.div`\n\n`;","import Phonebook from \"./Phonebook\";\n\nexport default Phonebook","import ContactForm from \"components/ContactForm\";\nimport { PhoneContainer } from \"./Phonebook.styled\";\n\n\nconst Phonebook = () => {\n  return (\n    <PhoneContainer>\n      <ContactForm />\n    </PhoneContainer>\n  );\n}\n\n\nexport default Phonebook;","export const selectContacts = state => state.contacts.items;\n\nexport const selectFilter = state => state.filter.filtred;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n"],"names":["FormList","styled","Form","Label","initialValues","name","number","schema","yup","shape","matches","required","dispatch","useDispatch","contacts","useSelector","selectContacts","onSubmit","values","resetForm","some","contact","Notiflix","addContact","validationSchema","autoComplete","htmlFor","type","as","Input","component","PhoneContainer","state","items","selectFilter","filter","filtred","selectIsLoading","isLoading","selectError","error"],"sourceRoot":""}