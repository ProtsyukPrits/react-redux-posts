{"ast":null,"code":"export function buildMatchPatternFn(args) {\n  return function (string) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const matchResult = string.match(args.matchPattern);\n    if (!matchResult) return null;\n    const matchedString = matchResult[0];\n    const parseResult = string.match(args.parsePattern);\n    if (!parseResult) return null;\n    let value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0]; // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\n\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    const rest = string.slice(matchedString.length);\n    return {\n      value,\n      rest\n    };\n  };\n}","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/node_modules/date-fns/locale/_lib/buildMatchPatternFn.mjs"],"names":["buildMatchPatternFn","args","string","options","matchResult","match","matchPattern","matchedString","parseResult","parsePattern","value","valueCallback","rest","slice","length"],"mappings":"AAAA,OAAO,SAASA,mBAAT,CAA6BC,IAA7B,EAAmC;AACxC,SAAO,UAACC,MAAD,EAA0B;AAAA,QAAjBC,OAAiB,uEAAP,EAAO;AAC/B,UAAMC,WAAW,GAAGF,MAAM,CAACG,KAAP,CAAaJ,IAAI,CAACK,YAAlB,CAApB;AACA,QAAI,CAACF,WAAL,EAAkB,OAAO,IAAP;AAClB,UAAMG,aAAa,GAAGH,WAAW,CAAC,CAAD,CAAjC;AAEA,UAAMI,WAAW,GAAGN,MAAM,CAACG,KAAP,CAAaJ,IAAI,CAACQ,YAAlB,CAApB;AACA,QAAI,CAACD,WAAL,EAAkB,OAAO,IAAP;AAClB,QAAIE,KAAK,GAAGT,IAAI,CAACU,aAAL,GACRV,IAAI,CAACU,aAAL,CAAmBH,WAAW,CAAC,CAAD,CAA9B,CADQ,GAERA,WAAW,CAAC,CAAD,CAFf,CAP+B,CAW/B;;AACAE,IAAAA,KAAK,GAAGP,OAAO,CAACQ,aAAR,GAAwBR,OAAO,CAACQ,aAAR,CAAsBD,KAAtB,CAAxB,GAAuDA,KAA/D;AAEA,UAAME,IAAI,GAAGV,MAAM,CAACW,KAAP,CAAaN,aAAa,CAACO,MAA3B,CAAb;AAEA,WAAO;AAAEJ,MAAAA,KAAF;AAASE,MAAAA;AAAT,KAAP;AACD,GAjBD;AAkBD","sourcesContent":["export function buildMatchPatternFn(args) {\n  return (string, options = {}) => {\n    const matchResult = string.match(args.matchPattern);\n    if (!matchResult) return null;\n    const matchedString = matchResult[0];\n\n    const parseResult = string.match(args.parsePattern);\n    if (!parseResult) return null;\n    let value = args.valueCallback\n      ? args.valueCallback(parseResult[0])\n      : parseResult[0];\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\n    value = options.valueCallback ? options.valueCallback(value) : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n"]},"metadata":{},"sourceType":"module"}