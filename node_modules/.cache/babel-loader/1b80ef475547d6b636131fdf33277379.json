{"ast":null,"code":"\"use strict\";\n\nexports.closestTo = closestTo;\n\nvar _index = require(\"./constructFrom.js\");\n\nvar _index2 = require(\"./toDate.js\");\n/**\n * @name closestTo\n * @category Common Helpers\n * @summary Return a date from the array closest to the given date.\n *\n * @description\n * Return a date from the array closest to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateToCompare - The date to compare with\n * @param dates - The array to search\n *\n * @returns The date from the array closest to the given date or undefined if no valid value is given\n *\n * @example\n * // Which date is closer to 6 September 2015: 1 January 2000 or 1 January 2030?\n * const dateToCompare = new Date(2015, 8, 6)\n * const result = closestTo(dateToCompare, [\n *   new Date(2000, 0, 1),\n *   new Date(2030, 0, 1)\n * ])\n * //=> Tue Jan 01 2030 00:00:00\n */\n\n\nfunction closestTo(dateToCompare, dates) {\n  const date = (0, _index2.toDate)(dateToCompare);\n  if (isNaN(Number(date))) return (0, _index.constructFrom)(dateToCompare, NaN);\n  const timeToCompare = date.getTime();\n  let result;\n  let minDistance;\n  dates.forEach(dirtyDate => {\n    const currentDate = (0, _index2.toDate)(dirtyDate);\n\n    if (isNaN(Number(currentDate))) {\n      result = (0, _index.constructFrom)(dateToCompare, NaN);\n      minDistance = NaN;\n      return;\n    }\n\n    const distance = Math.abs(timeToCompare - currentDate.getTime());\n\n    if (result == null || distance < minDistance) {\n      result = currentDate;\n      minDistance = distance;\n    }\n  });\n  return result;\n}","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/node_modules/date-fns/closestTo.js"],"names":["exports","closestTo","_index","require","_index2","dateToCompare","dates","date","toDate","isNaN","Number","constructFrom","NaN","timeToCompare","getTime","result","minDistance","forEach","dirtyDate","currentDate","distance","Math","abs"],"mappings":"AAAA;;AACAA,OAAO,CAACC,SAAR,GAAoBA,SAApB;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,oBAAD,CAApB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,aAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,SAAT,CAAmBI,aAAnB,EAAkCC,KAAlC,EAAyC;AACvC,QAAMC,IAAI,GAAG,CAAC,GAAGH,OAAO,CAACI,MAAZ,EAAoBH,aAApB,CAAb;AAEA,MAAII,KAAK,CAACC,MAAM,CAACH,IAAD,CAAP,CAAT,EAAyB,OAAO,CAAC,GAAGL,MAAM,CAACS,aAAX,EAA0BN,aAA1B,EAAyCO,GAAzC,CAAP;AAEzB,QAAMC,aAAa,GAAGN,IAAI,CAACO,OAAL,EAAtB;AAEA,MAAIC,MAAJ;AACA,MAAIC,WAAJ;AACAV,EAAAA,KAAK,CAACW,OAAN,CAAeC,SAAD,IAAe;AAC3B,UAAMC,WAAW,GAAG,CAAC,GAAGf,OAAO,CAACI,MAAZ,EAAoBU,SAApB,CAApB;;AAEA,QAAIT,KAAK,CAACC,MAAM,CAACS,WAAD,CAAP,CAAT,EAAgC;AAC9BJ,MAAAA,MAAM,GAAG,CAAC,GAAGb,MAAM,CAACS,aAAX,EAA0BN,aAA1B,EAAyCO,GAAzC,CAAT;AACAI,MAAAA,WAAW,GAAGJ,GAAd;AACA;AACD;;AAED,UAAMQ,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAAST,aAAa,GAAGM,WAAW,CAACL,OAAZ,EAAzB,CAAjB;;AACA,QAAIC,MAAM,IAAI,IAAV,IAAkBK,QAAQ,GAAGJ,WAAjC,EAA8C;AAC5CD,MAAAA,MAAM,GAAGI,WAAT;AACAH,MAAAA,WAAW,GAAGI,QAAd;AACD;AACF,GAdD;AAgBA,SAAOL,MAAP;AACD","sourcesContent":["\"use strict\";\nexports.closestTo = closestTo;\nvar _index = require(\"./constructFrom.js\");\nvar _index2 = require(\"./toDate.js\");\n\n/**\n * @name closestTo\n * @category Common Helpers\n * @summary Return a date from the array closest to the given date.\n *\n * @description\n * Return a date from the array closest to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateToCompare - The date to compare with\n * @param dates - The array to search\n *\n * @returns The date from the array closest to the given date or undefined if no valid value is given\n *\n * @example\n * // Which date is closer to 6 September 2015: 1 January 2000 or 1 January 2030?\n * const dateToCompare = new Date(2015, 8, 6)\n * const result = closestTo(dateToCompare, [\n *   new Date(2000, 0, 1),\n *   new Date(2030, 0, 1)\n * ])\n * //=> Tue Jan 01 2030 00:00:00\n */\nfunction closestTo(dateToCompare, dates) {\n  const date = (0, _index2.toDate)(dateToCompare);\n\n  if (isNaN(Number(date))) return (0, _index.constructFrom)(dateToCompare, NaN);\n\n  const timeToCompare = date.getTime();\n\n  let result;\n  let minDistance;\n  dates.forEach((dirtyDate) => {\n    const currentDate = (0, _index2.toDate)(dirtyDate);\n\n    if (isNaN(Number(currentDate))) {\n      result = (0, _index.constructFrom)(dateToCompare, NaN);\n      minDistance = NaN;\n      return;\n    }\n\n    const distance = Math.abs(timeToCompare - currentDate.getTime());\n    if (result == null || distance < minDistance) {\n      result = currentDate;\n      minDistance = distance;\n    }\n  });\n\n  return result;\n}\n"]},"metadata":{},"sourceType":"script"}