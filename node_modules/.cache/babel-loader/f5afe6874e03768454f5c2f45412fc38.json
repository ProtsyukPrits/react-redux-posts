{"ast":null,"code":"import { setDay } from \"../../../setDay.mjs\";\nimport { Parser } from \"../Parser.mjs\"; // Day of week\n\nexport class DayParser extends Parser {\n  priority = 90;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // Tue\n      case \"E\":\n      case \"EE\":\n      case \"EEE\":\n        return match.day(dateString, {\n          width: \"abbreviated\",\n          context: \"formatting\"\n        }) || match.day(dateString, {\n          width: \"short\",\n          context: \"formatting\"\n        }) || match.day(dateString, {\n          width: \"narrow\",\n          context: \"formatting\"\n        });\n      // T\n\n      case \"EEEEE\":\n        return match.day(dateString, {\n          width: \"narrow\",\n          context: \"formatting\"\n        });\n      // Tu\n\n      case \"EEEEEE\":\n        return match.day(dateString, {\n          width: \"short\",\n          context: \"formatting\"\n        }) || match.day(dateString, {\n          width: \"narrow\",\n          context: \"formatting\"\n        });\n      // Tuesday\n\n      case \"EEEE\":\n      default:\n        return match.day(dateString, {\n          width: \"wide\",\n          context: \"formatting\"\n        }) || match.day(dateString, {\n          width: \"abbreviated\",\n          context: \"formatting\"\n        }) || match.day(dateString, {\n          width: \"short\",\n          context: \"formatting\"\n        }) || match.day(dateString, {\n          width: \"narrow\",\n          context: \"formatting\"\n        });\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 6;\n  }\n\n  set(date, _flags, value, options) {\n    date = setDay(date, value, options);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"D\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n}","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/node_modules/date-fns/parse/_lib/parsers/DayParser.mjs"],"names":["setDay","Parser","DayParser","priority","parse","dateString","token","match","day","width","context","validate","_date","value","set","date","_flags","options","setHours","incompatibleTokens"],"mappings":"AAAA,SAASA,MAAT,QAAuB,qBAAvB;AACA,SAASC,MAAT,QAAuB,eAAvB,C,CAEA;;AACA,OAAO,MAAMC,SAAN,SAAwBD,MAAxB,CAA+B;AACpCE,EAAAA,QAAQ,GAAG,EAAH;;AAERC,EAAAA,KAAK,CAACC,UAAD,EAAaC,KAAb,EAAoBC,KAApB,EAA2B;AAC9B,YAAQD,KAAR;AACE;AACA,WAAK,GAAL;AACA,WAAK,IAAL;AACA,WAAK,KAAL;AACE,eACEC,KAAK,CAACC,GAAN,CAAUH,UAAV,EAAsB;AACpBI,UAAAA,KAAK,EAAE,aADa;AAEpBC,UAAAA,OAAO,EAAE;AAFW,SAAtB,KAIAH,KAAK,CAACC,GAAN,CAAUH,UAAV,EAAsB;AAAEI,UAAAA,KAAK,EAAE,OAAT;AAAkBC,UAAAA,OAAO,EAAE;AAA3B,SAAtB,CAJA,IAKAH,KAAK,CAACC,GAAN,CAAUH,UAAV,EAAsB;AAAEI,UAAAA,KAAK,EAAE,QAAT;AAAmBC,UAAAA,OAAO,EAAE;AAA5B,SAAtB,CANF;AASF;;AACA,WAAK,OAAL;AACE,eAAOH,KAAK,CAACC,GAAN,CAAUH,UAAV,EAAsB;AAC3BI,UAAAA,KAAK,EAAE,QADoB;AAE3BC,UAAAA,OAAO,EAAE;AAFkB,SAAtB,CAAP;AAIF;;AACA,WAAK,QAAL;AACE,eACEH,KAAK,CAACC,GAAN,CAAUH,UAAV,EAAsB;AAAEI,UAAAA,KAAK,EAAE,OAAT;AAAkBC,UAAAA,OAAO,EAAE;AAA3B,SAAtB,KACAH,KAAK,CAACC,GAAN,CAAUH,UAAV,EAAsB;AAAEI,UAAAA,KAAK,EAAE,QAAT;AAAmBC,UAAAA,OAAO,EAAE;AAA5B,SAAtB,CAFF;AAKF;;AACA,WAAK,MAAL;AACA;AACE,eACEH,KAAK,CAACC,GAAN,CAAUH,UAAV,EAAsB;AAAEI,UAAAA,KAAK,EAAE,MAAT;AAAiBC,UAAAA,OAAO,EAAE;AAA1B,SAAtB,KACAH,KAAK,CAACC,GAAN,CAAUH,UAAV,EAAsB;AACpBI,UAAAA,KAAK,EAAE,aADa;AAEpBC,UAAAA,OAAO,EAAE;AAFW,SAAtB,CADA,IAKAH,KAAK,CAACC,GAAN,CAAUH,UAAV,EAAsB;AAAEI,UAAAA,KAAK,EAAE,OAAT;AAAkBC,UAAAA,OAAO,EAAE;AAA3B,SAAtB,CALA,IAMAH,KAAK,CAACC,GAAN,CAAUH,UAAV,EAAsB;AAAEI,UAAAA,KAAK,EAAE,QAAT;AAAmBC,UAAAA,OAAO,EAAE;AAA5B,SAAtB,CAPF;AA9BJ;AAwCD;;AAEDC,EAAAA,QAAQ,CAACC,KAAD,EAAQC,KAAR,EAAe;AACrB,WAAOA,KAAK,IAAI,CAAT,IAAcA,KAAK,IAAI,CAA9B;AACD;;AAEDC,EAAAA,GAAG,CAACC,IAAD,EAAOC,MAAP,EAAeH,KAAf,EAAsBI,OAAtB,EAA+B;AAChCF,IAAAA,IAAI,GAAGf,MAAM,CAACe,IAAD,EAAOF,KAAP,EAAcI,OAAd,CAAb;AACAF,IAAAA,IAAI,CAACG,QAAL,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB;AACA,WAAOH,IAAP;AACD;;AAEDI,EAAAA,kBAAkB,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,CAAH;AAxDkB","sourcesContent":["import { setDay } from \"../../../setDay.mjs\";\nimport { Parser } from \"../Parser.mjs\";\n\n// Day of week\nexport class DayParser extends Parser {\n  priority = 90;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // Tue\n      case \"E\":\n      case \"EE\":\n      case \"EEE\":\n        return (\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // T\n      case \"EEEEE\":\n        return match.day(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"EEEEEE\":\n        return (\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // Tuesday\n      case \"EEEE\":\n      default:\n        return (\n          match.day(dateString, { width: \"wide\", context: \"formatting\" }) ||\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 6;\n  }\n\n  set(date, _flags, value, options) {\n    date = setDay(date, value, options);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"D\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n}\n"]},"metadata":{},"sourceType":"module"}