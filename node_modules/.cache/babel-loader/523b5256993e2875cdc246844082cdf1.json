{"ast":null,"code":"\"use strict\";\n\nexports.YearParser = void 0;\n\nvar _Parser = require(\"../Parser.js\");\n\nvar _utils = require(\"../utils.js\"); // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns\n// | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n// |----------|-------|----|-------|-------|-------|\n// | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n// | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n// | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n// | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n// | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n\n\nclass YearParser extends _Parser.Parser {\n  priority = 130;\n  incompatibleTokens = [\"Y\", \"R\", \"u\", \"w\", \"I\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n\n  parse(dateString, token, match) {\n    const valueCallback = year => ({\n      year,\n      isTwoDigitYear: token === \"yy\"\n    });\n\n    switch (token) {\n      case \"y\":\n        return (0, _utils.mapValue)((0, _utils.parseNDigits)(4, dateString), valueCallback);\n\n      case \"yo\":\n        return (0, _utils.mapValue)(match.ordinalNumber(dateString, {\n          unit: \"year\"\n        }), valueCallback);\n\n      default:\n        return (0, _utils.mapValue)((0, _utils.parseNDigits)(token.length, dateString), valueCallback);\n    }\n  }\n\n  validate(_date, value) {\n    return value.isTwoDigitYear || value.year > 0;\n  }\n\n  set(date, flags, value) {\n    const currentYear = date.getFullYear();\n\n    if (value.isTwoDigitYear) {\n      const normalizedTwoDigitYear = (0, _utils.normalizeTwoDigitYear)(value.year, currentYear);\n      date.setFullYear(normalizedTwoDigitYear, 0, 1);\n      date.setHours(0, 0, 0, 0);\n      return date;\n    }\n\n    const year = !(\"era\" in flags) || flags.era === 1 ? value.year : 1 - value.year;\n    date.setFullYear(year, 0, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n}\n\nexports.YearParser = YearParser;","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/node_modules/date-fns/parse/_lib/parsers/YearParser.js"],"names":["exports","YearParser","_Parser","require","_utils","Parser","priority","incompatibleTokens","parse","dateString","token","match","valueCallback","year","isTwoDigitYear","mapValue","parseNDigits","ordinalNumber","unit","length","validate","_date","value","set","date","flags","currentYear","getFullYear","normalizedTwoDigitYear","normalizeTwoDigitYear","setFullYear","setHours","era"],"mappings":"AAAA;;AACAA,OAAO,CAACC,UAAR,GAAqB,KAAK,CAA1B;;AACA,IAAIC,OAAO,GAAGC,OAAO,CAAC,cAAD,CAArB;;AAEA,IAAIC,MAAM,GAAGD,OAAO,CAAC,aAAD,CAApB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMF,UAAN,SAAyBC,OAAO,CAACG,MAAjC,CAAwC;AACtCC,EAAAA,QAAQ,GAAG,GAAH;AACRC,EAAAA,kBAAkB,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,EAAyC,GAAzC,EAA8C,GAA9C,CAAH;;AAElBC,EAAAA,KAAK,CAACC,UAAD,EAAaC,KAAb,EAAoBC,KAApB,EAA2B;AAC9B,UAAMC,aAAa,GAAIC,IAAD,KAAW;AAC/BA,MAAAA,IAD+B;AAE/BC,MAAAA,cAAc,EAAEJ,KAAK,KAAK;AAFK,KAAX,CAAtB;;AAKA,YAAQA,KAAR;AACE,WAAK,GAAL;AACE,eAAO,CAAC,GAAGN,MAAM,CAACW,QAAX,EACL,CAAC,GAAGX,MAAM,CAACY,YAAX,EAAyB,CAAzB,EAA4BP,UAA5B,CADK,EAELG,aAFK,CAAP;;AAIF,WAAK,IAAL;AACE,eAAO,CAAC,GAAGR,MAAM,CAACW,QAAX,EACLJ,KAAK,CAACM,aAAN,CAAoBR,UAApB,EAAgC;AAC9BS,UAAAA,IAAI,EAAE;AADwB,SAAhC,CADK,EAILN,aAJK,CAAP;;AAMF;AACE,eAAO,CAAC,GAAGR,MAAM,CAACW,QAAX,EACL,CAAC,GAAGX,MAAM,CAACY,YAAX,EAAyBN,KAAK,CAACS,MAA/B,EAAuCV,UAAvC,CADK,EAELG,aAFK,CAAP;AAdJ;AAmBD;;AAEDQ,EAAAA,QAAQ,CAACC,KAAD,EAAQC,KAAR,EAAe;AACrB,WAAOA,KAAK,CAACR,cAAN,IAAwBQ,KAAK,CAACT,IAAN,GAAa,CAA5C;AACD;;AAEDU,EAAAA,GAAG,CAACC,IAAD,EAAOC,KAAP,EAAcH,KAAd,EAAqB;AACtB,UAAMI,WAAW,GAAGF,IAAI,CAACG,WAAL,EAApB;;AAEA,QAAIL,KAAK,CAACR,cAAV,EAA0B;AACxB,YAAMc,sBAAsB,GAAG,CAAC,GAAGxB,MAAM,CAACyB,qBAAX,EAC7BP,KAAK,CAACT,IADuB,EAE7Ba,WAF6B,CAA/B;AAIAF,MAAAA,IAAI,CAACM,WAAL,CAAiBF,sBAAjB,EAAyC,CAAzC,EAA4C,CAA5C;AACAJ,MAAAA,IAAI,CAACO,QAAL,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB;AACA,aAAOP,IAAP;AACD;;AAED,UAAMX,IAAI,GACR,EAAE,SAASY,KAAX,KAAqBA,KAAK,CAACO,GAAN,KAAc,CAAnC,GAAuCV,KAAK,CAACT,IAA7C,GAAoD,IAAIS,KAAK,CAACT,IADhE;AAEAW,IAAAA,IAAI,CAACM,WAAL,CAAiBjB,IAAjB,EAAuB,CAAvB,EAA0B,CAA1B;AACAW,IAAAA,IAAI,CAACO,QAAL,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB;AACA,WAAOP,IAAP;AACD;;AArDqC;;AAuDxCxB,OAAO,CAACC,UAAR,GAAqBA,UAArB","sourcesContent":["\"use strict\";\nexports.YearParser = void 0;\nvar _Parser = require(\"../Parser.js\");\n\nvar _utils = require(\"../utils.js\");\n\n// From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns\n// | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n// |----------|-------|----|-------|-------|-------|\n// | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n// | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n// | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n// | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n// | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\nclass YearParser extends _Parser.Parser {\n  priority = 130;\n  incompatibleTokens = [\"Y\", \"R\", \"u\", \"w\", \"I\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n\n  parse(dateString, token, match) {\n    const valueCallback = (year) => ({\n      year,\n      isTwoDigitYear: token === \"yy\",\n    });\n\n    switch (token) {\n      case \"y\":\n        return (0, _utils.mapValue)(\n          (0, _utils.parseNDigits)(4, dateString),\n          valueCallback,\n        );\n      case \"yo\":\n        return (0, _utils.mapValue)(\n          match.ordinalNumber(dateString, {\n            unit: \"year\",\n          }),\n          valueCallback,\n        );\n      default:\n        return (0, _utils.mapValue)(\n          (0, _utils.parseNDigits)(token.length, dateString),\n          valueCallback,\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value.isTwoDigitYear || value.year > 0;\n  }\n\n  set(date, flags, value) {\n    const currentYear = date.getFullYear();\n\n    if (value.isTwoDigitYear) {\n      const normalizedTwoDigitYear = (0, _utils.normalizeTwoDigitYear)(\n        value.year,\n        currentYear,\n      );\n      date.setFullYear(normalizedTwoDigitYear, 0, 1);\n      date.setHours(0, 0, 0, 0);\n      return date;\n    }\n\n    const year =\n      !(\"era\" in flags) || flags.era === 1 ? value.year : 1 - value.year;\n    date.setFullYear(year, 0, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n}\nexports.YearParser = YearParser;\n"]},"metadata":{},"sourceType":"script"}