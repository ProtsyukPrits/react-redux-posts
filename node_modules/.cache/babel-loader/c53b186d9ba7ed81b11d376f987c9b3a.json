{"ast":null,"code":"import { numericPatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { mapValue, parseNDigits, parseNumericPattern } from \"../utils.mjs\";\nexport class MonthParser extends Parser {\n  incompatibleTokens = [\"Y\", \"R\", \"q\", \"Q\", \"L\", \"w\", \"I\", \"D\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n  priority = 110;\n\n  parse(dateString, token, match) {\n    const valueCallback = value => value - 1;\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"M\":\n        return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback);\n      // 01, 02, ..., 12\n\n      case \"MM\":\n        return mapValue(parseNDigits(2, dateString), valueCallback);\n      // 1st, 2nd, ..., 12th\n\n      case \"Mo\":\n        return mapValue(match.ordinalNumber(dateString, {\n          unit: \"month\"\n        }), valueCallback);\n      // Jan, Feb, ..., Dec\n\n      case \"MMM\":\n        return match.month(dateString, {\n          width: \"abbreviated\",\n          context: \"formatting\"\n        }) || match.month(dateString, {\n          width: \"narrow\",\n          context: \"formatting\"\n        });\n      // J, F, ..., D\n\n      case \"MMMMM\":\n        return match.month(dateString, {\n          width: \"narrow\",\n          context: \"formatting\"\n        });\n      // January, February, ..., December\n\n      case \"MMMM\":\n      default:\n        return match.month(dateString, {\n          width: \"wide\",\n          context: \"formatting\"\n        }) || match.month(dateString, {\n          width: \"abbreviated\",\n          context: \"formatting\"\n        }) || match.month(dateString, {\n          width: \"narrow\",\n          context: \"formatting\"\n        });\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 11;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth(value, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n}","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/node_modules/date-fns/parse/_lib/parsers/MonthParser.mjs"],"names":["numericPatterns","Parser","mapValue","parseNDigits","parseNumericPattern","MonthParser","incompatibleTokens","priority","parse","dateString","token","match","valueCallback","value","month","ordinalNumber","unit","width","context","validate","_date","set","date","_flags","setMonth","setHours"],"mappings":"AAAA,SAASA,eAAT,QAAgC,kBAAhC;AACA,SAASC,MAAT,QAAuB,eAAvB;AACA,SAASC,QAAT,EAAmBC,YAAnB,EAAiCC,mBAAjC,QAA4D,cAA5D;AAEA,OAAO,MAAMC,WAAN,SAA0BJ,MAA1B,CAAiC;AACtCK,EAAAA,kBAAkB,GAAG,CACnB,GADmB,EAEnB,GAFmB,EAGnB,GAHmB,EAInB,GAJmB,EAKnB,GALmB,EAMnB,GANmB,EAOnB,GAPmB,EAQnB,GARmB,EASnB,GATmB,EAUnB,GAVmB,EAWnB,GAXmB,EAYnB,GAZmB,EAanB,GAbmB,CAAH;AAgBlBC,EAAAA,QAAQ,GAAG,GAAH;;AAERC,EAAAA,KAAK,CAACC,UAAD,EAAaC,KAAb,EAAoBC,KAApB,EAA2B;AAC9B,UAAMC,aAAa,GAAIC,KAAD,IAAWA,KAAK,GAAG,CAAzC;;AAEA,YAAQH,KAAR;AACE;AACA,WAAK,GAAL;AACE,eAAOR,QAAQ,CACbE,mBAAmB,CAACJ,eAAe,CAACc,KAAjB,EAAwBL,UAAxB,CADN,EAEbG,aAFa,CAAf;AAIF;;AACA,WAAK,IAAL;AACE,eAAOV,QAAQ,CAACC,YAAY,CAAC,CAAD,EAAIM,UAAJ,CAAb,EAA8BG,aAA9B,CAAf;AACF;;AACA,WAAK,IAAL;AACE,eAAOV,QAAQ,CACbS,KAAK,CAACI,aAAN,CAAoBN,UAApB,EAAgC;AAC9BO,UAAAA,IAAI,EAAE;AADwB,SAAhC,CADa,EAIbJ,aAJa,CAAf;AAMF;;AACA,WAAK,KAAL;AACE,eACED,KAAK,CAACG,KAAN,CAAYL,UAAZ,EAAwB;AACtBQ,UAAAA,KAAK,EAAE,aADe;AAEtBC,UAAAA,OAAO,EAAE;AAFa,SAAxB,KAIAP,KAAK,CAACG,KAAN,CAAYL,UAAZ,EAAwB;AAAEQ,UAAAA,KAAK,EAAE,QAAT;AAAmBC,UAAAA,OAAO,EAAE;AAA5B,SAAxB,CALF;AAQF;;AACA,WAAK,OAAL;AACE,eAAOP,KAAK,CAACG,KAAN,CAAYL,UAAZ,EAAwB;AAC7BQ,UAAAA,KAAK,EAAE,QADsB;AAE7BC,UAAAA,OAAO,EAAE;AAFoB,SAAxB,CAAP;AAIF;;AACA,WAAK,MAAL;AACA;AACE,eACEP,KAAK,CAACG,KAAN,CAAYL,UAAZ,EAAwB;AAAEQ,UAAAA,KAAK,EAAE,MAAT;AAAiBC,UAAAA,OAAO,EAAE;AAA1B,SAAxB,KACAP,KAAK,CAACG,KAAN,CAAYL,UAAZ,EAAwB;AACtBQ,UAAAA,KAAK,EAAE,aADe;AAEtBC,UAAAA,OAAO,EAAE;AAFa,SAAxB,CADA,IAKAP,KAAK,CAACG,KAAN,CAAYL,UAAZ,EAAwB;AAAEQ,UAAAA,KAAK,EAAE,QAAT;AAAmBC,UAAAA,OAAO,EAAE;AAA5B,SAAxB,CANF;AArCJ;AA8CD;;AAEDC,EAAAA,QAAQ,CAACC,KAAD,EAAQP,KAAR,EAAe;AACrB,WAAOA,KAAK,IAAI,CAAT,IAAcA,KAAK,IAAI,EAA9B;AACD;;AAEDQ,EAAAA,GAAG,CAACC,IAAD,EAAOC,MAAP,EAAeV,KAAf,EAAsB;AACvBS,IAAAA,IAAI,CAACE,QAAL,CAAcX,KAAd,EAAqB,CAArB;AACAS,IAAAA,IAAI,CAACG,QAAL,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB;AACA,WAAOH,IAAP;AACD;;AA9EqC","sourcesContent":["import { numericPatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { mapValue, parseNDigits, parseNumericPattern } from \"../utils.mjs\";\n\nexport class MonthParser extends Parser {\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"Q\",\n    \"L\",\n    \"w\",\n    \"I\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n\n  priority = 110;\n\n  parse(dateString, token, match) {\n    const valueCallback = (value) => value - 1;\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"M\":\n        return mapValue(\n          parseNumericPattern(numericPatterns.month, dateString),\n          valueCallback,\n        );\n      // 01, 02, ..., 12\n      case \"MM\":\n        return mapValue(parseNDigits(2, dateString), valueCallback);\n      // 1st, 2nd, ..., 12th\n      case \"Mo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"month\",\n          }),\n          valueCallback,\n        );\n      // Jan, Feb, ..., Dec\n      case \"MMM\":\n        return (\n          match.month(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.month(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // J, F, ..., D\n      case \"MMMMM\":\n        return match.month(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // January, February, ..., December\n      case \"MMMM\":\n      default:\n        return (\n          match.month(dateString, { width: \"wide\", context: \"formatting\" }) ||\n          match.month(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.month(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 11;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth(value, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}