{"ast":null,"code":"\"use strict\";\n\nexports.getOverlappingDaysInIntervals = getOverlappingDaysInIntervals;\n\nvar _index = require(\"./_lib/getTimezoneOffsetInMilliseconds.js\");\n\nvar _index2 = require(\"./constants.js\");\n\nvar _index3 = require(\"./toDate.js\");\n/**\n * @name getOverlappingDaysInIntervals\n * @category Interval Helpers\n * @summary Get the number of days that overlap in two time intervals\n *\n * @description\n * Get the number of days that overlap in two time intervals. It uses the time\n * between dates to calculate the number of days, rounding it up to include\n * partial days.\n *\n * Two equal 0-length intervals will result in 0. Two equal 1ms intervals will\n * result in 1.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param intervalLeft - The first interval to compare.\n * @param intervalRight - The second interval to compare.\n *\n * @returns The number of days that overlap in two time intervals\n *\n * @example\n * // For overlapping time intervals adds 1 for each started overlapping day:\n * getOverlappingDaysInIntervals(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\n * )\n * //=> 3\n *\n * @example\n * // For non-overlapping time intervals returns 0:\n * getOverlappingDaysInIntervals(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\n * )\n * //=> 0\n */\n\n\nfunction getOverlappingDaysInIntervals(intervalLeft, intervalRight) {\n  const [leftStart, leftEnd] = [+(0, _index3.toDate)(intervalLeft.start), +(0, _index3.toDate)(intervalLeft.end)].sort((a, b) => a - b);\n  const [rightStart, rightEnd] = [+(0, _index3.toDate)(intervalRight.start), +(0, _index3.toDate)(intervalRight.end)].sort((a, b) => a - b); // Prevent NaN result if intervals don't overlap at all.\n\n  const isOverlapping = leftStart < rightEnd && rightStart < leftEnd;\n  if (!isOverlapping) return 0; // Remove the timezone offset to negate the DST effect on calculations.\n\n  const overlapLeft = rightStart < leftStart ? leftStart : rightStart;\n  const left = overlapLeft - (0, _index.getTimezoneOffsetInMilliseconds)(overlapLeft);\n  const overlapRight = rightEnd > leftEnd ? leftEnd : rightEnd;\n  const right = overlapRight - (0, _index.getTimezoneOffsetInMilliseconds)(overlapRight); // Ceil the number to include partial days too.\n\n  return Math.ceil((right - left) / _index2.millisecondsInDay);\n}","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/node_modules/date-fns/getOverlappingDaysInIntervals.js"],"names":["exports","getOverlappingDaysInIntervals","_index","require","_index2","_index3","intervalLeft","intervalRight","leftStart","leftEnd","toDate","start","end","sort","a","b","rightStart","rightEnd","isOverlapping","overlapLeft","left","getTimezoneOffsetInMilliseconds","overlapRight","right","Math","ceil","millisecondsInDay"],"mappings":"AAAA;;AACAA,OAAO,CAACC,6BAAR,GAAwCA,6BAAxC;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,2CAAD,CAApB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,gBAAD,CAArB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,aAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASF,6BAAT,CAAuCK,YAAvC,EAAqDC,aAArD,EAAoE;AAClE,QAAM,CAACC,SAAD,EAAYC,OAAZ,IAAuB,CAC3B,CAAC,CAAC,GAAGJ,OAAO,CAACK,MAAZ,EAAoBJ,YAAY,CAACK,KAAjC,CAD0B,EAE3B,CAAC,CAAC,GAAGN,OAAO,CAACK,MAAZ,EAAoBJ,YAAY,CAACM,GAAjC,CAF0B,EAG3BC,IAH2B,CAGtB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAHQ,CAA7B;AAIA,QAAM,CAACC,UAAD,EAAaC,QAAb,IAAyB,CAC7B,CAAC,CAAC,GAAGZ,OAAO,CAACK,MAAZ,EAAoBH,aAAa,CAACI,KAAlC,CAD4B,EAE7B,CAAC,CAAC,GAAGN,OAAO,CAACK,MAAZ,EAAoBH,aAAa,CAACK,GAAlC,CAF4B,EAG7BC,IAH6B,CAGxB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAHU,CAA/B,CALkE,CAUlE;;AACA,QAAMG,aAAa,GAAGV,SAAS,GAAGS,QAAZ,IAAwBD,UAAU,GAAGP,OAA3D;AACA,MAAI,CAACS,aAAL,EAAoB,OAAO,CAAP,CAZ8C,CAclE;;AACA,QAAMC,WAAW,GAAGH,UAAU,GAAGR,SAAb,GAAyBA,SAAzB,GAAqCQ,UAAzD;AACA,QAAMI,IAAI,GACRD,WAAW,GAAG,CAAC,GAAGjB,MAAM,CAACmB,+BAAX,EAA4CF,WAA5C,CADhB;AAEA,QAAMG,YAAY,GAAGL,QAAQ,GAAGR,OAAX,GAAqBA,OAArB,GAA+BQ,QAApD;AACA,QAAMM,KAAK,GACTD,YAAY,GAAG,CAAC,GAAGpB,MAAM,CAACmB,+BAAX,EAA4CC,YAA5C,CADjB,CAnBkE,CAsBlE;;AACA,SAAOE,IAAI,CAACC,IAAL,CAAU,CAACF,KAAK,GAAGH,IAAT,IAAiBhB,OAAO,CAACsB,iBAAnC,CAAP;AACD","sourcesContent":["\"use strict\";\nexports.getOverlappingDaysInIntervals = getOverlappingDaysInIntervals;\nvar _index = require(\"./_lib/getTimezoneOffsetInMilliseconds.js\");\nvar _index2 = require(\"./constants.js\");\nvar _index3 = require(\"./toDate.js\");\n\n/**\n * @name getOverlappingDaysInIntervals\n * @category Interval Helpers\n * @summary Get the number of days that overlap in two time intervals\n *\n * @description\n * Get the number of days that overlap in two time intervals. It uses the time\n * between dates to calculate the number of days, rounding it up to include\n * partial days.\n *\n * Two equal 0-length intervals will result in 0. Two equal 1ms intervals will\n * result in 1.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param intervalLeft - The first interval to compare.\n * @param intervalRight - The second interval to compare.\n *\n * @returns The number of days that overlap in two time intervals\n *\n * @example\n * // For overlapping time intervals adds 1 for each started overlapping day:\n * getOverlappingDaysInIntervals(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\n * )\n * //=> 3\n *\n * @example\n * // For non-overlapping time intervals returns 0:\n * getOverlappingDaysInIntervals(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\n * )\n * //=> 0\n */\n\nfunction getOverlappingDaysInIntervals(intervalLeft, intervalRight) {\n  const [leftStart, leftEnd] = [\n    +(0, _index3.toDate)(intervalLeft.start),\n    +(0, _index3.toDate)(intervalLeft.end),\n  ].sort((a, b) => a - b);\n  const [rightStart, rightEnd] = [\n    +(0, _index3.toDate)(intervalRight.start),\n    +(0, _index3.toDate)(intervalRight.end),\n  ].sort((a, b) => a - b);\n\n  // Prevent NaN result if intervals don't overlap at all.\n  const isOverlapping = leftStart < rightEnd && rightStart < leftEnd;\n  if (!isOverlapping) return 0;\n\n  // Remove the timezone offset to negate the DST effect on calculations.\n  const overlapLeft = rightStart < leftStart ? leftStart : rightStart;\n  const left =\n    overlapLeft - (0, _index.getTimezoneOffsetInMilliseconds)(overlapLeft);\n  const overlapRight = rightEnd > leftEnd ? leftEnd : rightEnd;\n  const right =\n    overlapRight - (0, _index.getTimezoneOffsetInMilliseconds)(overlapRight);\n\n  // Ceil the number to include partial days too.\n  return Math.ceil((right - left) / _index2.millisecondsInDay);\n}\n"]},"metadata":{},"sourceType":"script"}