{"ast":null,"code":"import { Parser } from \"../Parser.mjs\";\nimport { mapValue, normalizeTwoDigitYear, parseNDigits } from \"../utils.mjs\"; // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns\n// | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n// |----------|-------|----|-------|-------|-------|\n// | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n// | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n// | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n// | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n// | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n\nexport class YearParser extends Parser {\n  priority = 130;\n  incompatibleTokens = [\"Y\", \"R\", \"u\", \"w\", \"I\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n\n  parse(dateString, token, match) {\n    const valueCallback = year => ({\n      year,\n      isTwoDigitYear: token === \"yy\"\n    });\n\n    switch (token) {\n      case \"y\":\n        return mapValue(parseNDigits(4, dateString), valueCallback);\n\n      case \"yo\":\n        return mapValue(match.ordinalNumber(dateString, {\n          unit: \"year\"\n        }), valueCallback);\n\n      default:\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n    }\n  }\n\n  validate(_date, value) {\n    return value.isTwoDigitYear || value.year > 0;\n  }\n\n  set(date, flags, value) {\n    const currentYear = date.getFullYear();\n\n    if (value.isTwoDigitYear) {\n      const normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);\n      date.setFullYear(normalizedTwoDigitYear, 0, 1);\n      date.setHours(0, 0, 0, 0);\n      return date;\n    }\n\n    const year = !(\"era\" in flags) || flags.era === 1 ? value.year : 1 - value.year;\n    date.setFullYear(year, 0, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n}","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/node_modules/date-fns/parse/_lib/parsers/YearParser.mjs"],"names":["Parser","mapValue","normalizeTwoDigitYear","parseNDigits","YearParser","priority","incompatibleTokens","parse","dateString","token","match","valueCallback","year","isTwoDigitYear","ordinalNumber","unit","length","validate","_date","value","set","date","flags","currentYear","getFullYear","normalizedTwoDigitYear","setFullYear","setHours","era"],"mappings":"AAAA,SAASA,MAAT,QAAuB,eAAvB;AACA,SAASC,QAAT,EAAmBC,qBAAnB,EAA0CC,YAA1C,QAA8D,cAA9D,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,UAAN,SAAyBJ,MAAzB,CAAgC;AACrCK,EAAAA,QAAQ,GAAG,GAAH;AACRC,EAAAA,kBAAkB,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,EAAyC,GAAzC,EAA8C,GAA9C,CAAH;;AAElBC,EAAAA,KAAK,CAACC,UAAD,EAAaC,KAAb,EAAoBC,KAApB,EAA2B;AAC9B,UAAMC,aAAa,GAAIC,IAAD,KAAW;AAC/BA,MAAAA,IAD+B;AAE/BC,MAAAA,cAAc,EAAEJ,KAAK,KAAK;AAFK,KAAX,CAAtB;;AAKA,YAAQA,KAAR;AACE,WAAK,GAAL;AACE,eAAOR,QAAQ,CAACE,YAAY,CAAC,CAAD,EAAIK,UAAJ,CAAb,EAA8BG,aAA9B,CAAf;;AACF,WAAK,IAAL;AACE,eAAOV,QAAQ,CACbS,KAAK,CAACI,aAAN,CAAoBN,UAApB,EAAgC;AAC9BO,UAAAA,IAAI,EAAE;AADwB,SAAhC,CADa,EAIbJ,aAJa,CAAf;;AAMF;AACE,eAAOV,QAAQ,CAACE,YAAY,CAACM,KAAK,CAACO,MAAP,EAAeR,UAAf,CAAb,EAAyCG,aAAzC,CAAf;AAXJ;AAaD;;AAEDM,EAAAA,QAAQ,CAACC,KAAD,EAAQC,KAAR,EAAe;AACrB,WAAOA,KAAK,CAACN,cAAN,IAAwBM,KAAK,CAACP,IAAN,GAAa,CAA5C;AACD;;AAEDQ,EAAAA,GAAG,CAACC,IAAD,EAAOC,KAAP,EAAcH,KAAd,EAAqB;AACtB,UAAMI,WAAW,GAAGF,IAAI,CAACG,WAAL,EAApB;;AAEA,QAAIL,KAAK,CAACN,cAAV,EAA0B;AACxB,YAAMY,sBAAsB,GAAGvB,qBAAqB,CAClDiB,KAAK,CAACP,IAD4C,EAElDW,WAFkD,CAApD;AAIAF,MAAAA,IAAI,CAACK,WAAL,CAAiBD,sBAAjB,EAAyC,CAAzC,EAA4C,CAA5C;AACAJ,MAAAA,IAAI,CAACM,QAAL,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB;AACA,aAAON,IAAP;AACD;;AAED,UAAMT,IAAI,GACR,EAAE,SAASU,KAAX,KAAqBA,KAAK,CAACM,GAAN,KAAc,CAAnC,GAAuCT,KAAK,CAACP,IAA7C,GAAoD,IAAIO,KAAK,CAACP,IADhE;AAEAS,IAAAA,IAAI,CAACK,WAAL,CAAiBd,IAAjB,EAAuB,CAAvB,EAA0B,CAA1B;AACAS,IAAAA,IAAI,CAACM,QAAL,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB;AACA,WAAON,IAAP;AACD;;AA/CoC","sourcesContent":["import { Parser } from \"../Parser.mjs\";\nimport { mapValue, normalizeTwoDigitYear, parseNDigits } from \"../utils.mjs\";\n\n// From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns\n// | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n// |----------|-------|----|-------|-------|-------|\n// | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n// | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n// | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n// | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n// | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\nexport class YearParser extends Parser {\n  priority = 130;\n  incompatibleTokens = [\"Y\", \"R\", \"u\", \"w\", \"I\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n\n  parse(dateString, token, match) {\n    const valueCallback = (year) => ({\n      year,\n      isTwoDigitYear: token === \"yy\",\n    });\n\n    switch (token) {\n      case \"y\":\n        return mapValue(parseNDigits(4, dateString), valueCallback);\n      case \"yo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"year\",\n          }),\n          valueCallback,\n        );\n      default:\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n    }\n  }\n\n  validate(_date, value) {\n    return value.isTwoDigitYear || value.year > 0;\n  }\n\n  set(date, flags, value) {\n    const currentYear = date.getFullYear();\n\n    if (value.isTwoDigitYear) {\n      const normalizedTwoDigitYear = normalizeTwoDigitYear(\n        value.year,\n        currentYear,\n      );\n      date.setFullYear(normalizedTwoDigitYear, 0, 1);\n      date.setHours(0, 0, 0, 0);\n      return date;\n    }\n\n    const year =\n      !(\"era\" in flags) || flags.era === 1 ? value.year : 1 - value.year;\n    date.setFullYear(year, 0, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}