{"ast":null,"code":"\"use strict\";\n\nexports.eachQuarterOfInterval = eachQuarterOfInterval;\n\nvar _index = require(\"./addQuarters.js\");\n\nvar _index2 = require(\"./startOfQuarter.js\");\n\nvar _index3 = require(\"./toDate.js\");\n/**\n * The {@link eachQuarterOfInterval} function options.\n */\n\n/**\n * @name eachQuarterOfInterval\n * @category Interval Helpers\n * @summary Return the array of quarters within the specified time interval.\n *\n * @description\n * Return the array of quarters within the specified time interval.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param interval - The interval\n *\n * @returns The array with starts of quarters from the quarter of the interval start to the quarter of the interval end\n *\n * @example\n * // Each quarter within interval 6 February 2014 - 10 August 2014:\n * const result = eachQuarterOfInterval({\n *   start: new Date(2014, 1, 6),\n *   end: new Date(2014, 7, 10)\n * })\n * //=> [\n * //   Wed Jan 01 2014 00:00:00,\n * //   Tue Apr 01 2014 00:00:00,\n * //   Tue Jul 01 2014 00:00:00,\n * // ]\n */\n\n\nfunction eachQuarterOfInterval(interval, options) {\n  const startDate = (0, _index3.toDate)(interval.start);\n  const endDate = (0, _index3.toDate)(interval.end);\n  let reversed = +startDate > +endDate;\n  const endTime = reversed ? +(0, _index2.startOfQuarter)(startDate) : +(0, _index2.startOfQuarter)(endDate);\n  let currentDate = reversed ? (0, _index2.startOfQuarter)(endDate) : (0, _index2.startOfQuarter)(startDate);\n  let step = options?.step ?? 1;\n  if (!step) return [];\n\n  if (step < 0) {\n    step = -step;\n    reversed = !reversed;\n  }\n\n  const dates = [];\n\n  while (+currentDate <= endTime) {\n    dates.push((0, _index3.toDate)(currentDate));\n    currentDate = (0, _index.addQuarters)(currentDate, step);\n  }\n\n  return reversed ? dates.reverse() : dates;\n}","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/node_modules/date-fns/eachQuarterOfInterval.js"],"names":["exports","eachQuarterOfInterval","_index","require","_index2","_index3","interval","options","startDate","toDate","start","endDate","end","reversed","endTime","startOfQuarter","currentDate","step","dates","push","addQuarters","reverse"],"mappings":"AAAA;;AACAA,OAAO,CAACC,qBAAR,GAAgCA,qBAAhC;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,kBAAD,CAApB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,qBAAD,CAArB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,aAAD,CAArB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,qBAAT,CAA+BK,QAA/B,EAAyCC,OAAzC,EAAkD;AAChD,QAAMC,SAAS,GAAG,CAAC,GAAGH,OAAO,CAACI,MAAZ,EAAoBH,QAAQ,CAACI,KAA7B,CAAlB;AACA,QAAMC,OAAO,GAAG,CAAC,GAAGN,OAAO,CAACI,MAAZ,EAAoBH,QAAQ,CAACM,GAA7B,CAAhB;AAEA,MAAIC,QAAQ,GAAG,CAACL,SAAD,GAAa,CAACG,OAA7B;AACA,QAAMG,OAAO,GAAGD,QAAQ,GACpB,CAAC,CAAC,GAAGT,OAAO,CAACW,cAAZ,EAA4BP,SAA5B,CADmB,GAEpB,CAAC,CAAC,GAAGJ,OAAO,CAACW,cAAZ,EAA4BJ,OAA5B,CAFL;AAGA,MAAIK,WAAW,GAAGH,QAAQ,GACtB,CAAC,GAAGT,OAAO,CAACW,cAAZ,EAA4BJ,OAA5B,CADsB,GAEtB,CAAC,GAAGP,OAAO,CAACW,cAAZ,EAA4BP,SAA5B,CAFJ;AAIA,MAAIS,IAAI,GAAGV,OAAO,EAAEU,IAAT,IAAiB,CAA5B;AACA,MAAI,CAACA,IAAL,EAAW,OAAO,EAAP;;AACX,MAAIA,IAAI,GAAG,CAAX,EAAc;AACZA,IAAAA,IAAI,GAAG,CAACA,IAAR;AACAJ,IAAAA,QAAQ,GAAG,CAACA,QAAZ;AACD;;AAED,QAAMK,KAAK,GAAG,EAAd;;AAEA,SAAO,CAACF,WAAD,IAAgBF,OAAvB,EAAgC;AAC9BI,IAAAA,KAAK,CAACC,IAAN,CAAW,CAAC,GAAGd,OAAO,CAACI,MAAZ,EAAoBO,WAApB,CAAX;AACAA,IAAAA,WAAW,GAAG,CAAC,GAAGd,MAAM,CAACkB,WAAX,EAAwBJ,WAAxB,EAAqCC,IAArC,CAAd;AACD;;AAED,SAAOJ,QAAQ,GAAGK,KAAK,CAACG,OAAN,EAAH,GAAqBH,KAApC;AACD","sourcesContent":["\"use strict\";\nexports.eachQuarterOfInterval = eachQuarterOfInterval;\nvar _index = require(\"./addQuarters.js\");\nvar _index2 = require(\"./startOfQuarter.js\");\nvar _index3 = require(\"./toDate.js\");\n\n/**\n * The {@link eachQuarterOfInterval} function options.\n */\n\n/**\n * @name eachQuarterOfInterval\n * @category Interval Helpers\n * @summary Return the array of quarters within the specified time interval.\n *\n * @description\n * Return the array of quarters within the specified time interval.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param interval - The interval\n *\n * @returns The array with starts of quarters from the quarter of the interval start to the quarter of the interval end\n *\n * @example\n * // Each quarter within interval 6 February 2014 - 10 August 2014:\n * const result = eachQuarterOfInterval({\n *   start: new Date(2014, 1, 6),\n *   end: new Date(2014, 7, 10)\n * })\n * //=> [\n * //   Wed Jan 01 2014 00:00:00,\n * //   Tue Apr 01 2014 00:00:00,\n * //   Tue Jul 01 2014 00:00:00,\n * // ]\n */\nfunction eachQuarterOfInterval(interval, options) {\n  const startDate = (0, _index3.toDate)(interval.start);\n  const endDate = (0, _index3.toDate)(interval.end);\n\n  let reversed = +startDate > +endDate;\n  const endTime = reversed\n    ? +(0, _index2.startOfQuarter)(startDate)\n    : +(0, _index2.startOfQuarter)(endDate);\n  let currentDate = reversed\n    ? (0, _index2.startOfQuarter)(endDate)\n    : (0, _index2.startOfQuarter)(startDate);\n\n  let step = options?.step ?? 1;\n  if (!step) return [];\n  if (step < 0) {\n    step = -step;\n    reversed = !reversed;\n  }\n\n  const dates = [];\n\n  while (+currentDate <= endTime) {\n    dates.push((0, _index3.toDate)(currentDate));\n    currentDate = (0, _index.addQuarters)(currentDate, step);\n  }\n\n  return reversed ? dates.reverse() : dates;\n}\n"]},"metadata":{},"sourceType":"script"}