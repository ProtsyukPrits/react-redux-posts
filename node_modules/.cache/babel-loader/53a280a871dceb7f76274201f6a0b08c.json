{"ast":null,"code":"import _toConsumableArray from \"/home/dmytro/react-redux-posts/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectWithoutProperties from \"/home/dmytro/react-redux-posts/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _objectSpread from \"/home/dmytro/react-redux-posts/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/home/dmytro/react-redux-posts/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/dmytro/react-redux-posts/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar _excluded = [\"willChange\"];\nimport sync, { cancelSync } from 'framesync';\nimport { invariant } from 'hey-listen';\nimport { createElement } from 'react';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { isRefObject } from '../utils/is-ref-object.mjs';\nimport { env } from '../utils/process.mjs';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isWillChangeMotionValue } from '../value/use-will-change/is.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { variantPriorityOrder } from './utils/animation-state.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { isVariantLabel } from './utils/is-variant-label.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\nvar featureNames = Object.keys(featureDefinitions);\nvar numFeatures = featureNames.length;\nvar propEventHandlers = [\"AnimationStart\", \"AnimationComplete\", \"Update\", \"Unmount\", \"BeforeLayoutMeasure\", \"LayoutMeasure\", \"LayoutAnimationStart\", \"LayoutAnimationComplete\"];\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\n\nvar VisualElement = /*#__PURE__*/function () {\n  function VisualElement(_ref) {\n    var _this = this;\n\n    var parent = _ref.parent,\n        props = _ref.props,\n        reducedMotionConfig = _ref.reducedMotionConfig,\n        visualState = _ref.visualState;\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, VisualElement);\n\n    /**\n     * A reference to the current underlying Instance, e.g. a HTMLElement\n     * or Three.Mesh etc.\n     */\n    this.current = null;\n    /**\n     * A set containing references to this VisualElement's children.\n     */\n\n    this.children = new Set();\n    /**\n     * Determine what role this visual element should take in the variant tree.\n     */\n\n    this.isVariantNode = false;\n    this.isControllingVariants = false;\n    /**\n     * Decides whether this VisualElement should animate in reduced motion\n     * mode.\n     *\n     * TODO: This is currently set on every individual VisualElement but feels\n     * like it could be set globally.\n     */\n\n    this.shouldReduceMotion = null;\n    /**\n     * A map of all motion values attached to this visual element. Motion\n     * values are source of truth for any given animated value. A motion\n     * value might be provided externally by the component via props.\n     */\n\n    this.values = new Map();\n    /**\n     * Tracks whether this VisualElement's React component is currently present\n     * within the defined React tree.\n     */\n\n    this.isPresent = true;\n    /**\n     * A map of every subscription that binds the provided or generated\n     * motion values onChange listeners to this visual element.\n     */\n\n    this.valueSubscriptions = new Map();\n    /**\n     * A reference to the previously-provided motion values as returned\n     * from scrapeMotionValuesFromProps. We use the keys in here to determine\n     * if any motion values need to be removed after props are updated.\n     */\n\n    this.prevMotionValues = {};\n    /**\n     * An object containing a SubscriptionManager for each active event.\n     */\n\n    this.events = {};\n    /**\n     * An object containing an unsubscribe function for each prop event subscription.\n     * For example, every \"Update\" event can have multiple subscribers via\n     * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n     */\n\n    this.propEventSubscriptions = {};\n\n    this.notifyUpdate = function () {\n      return _this.notify(\"Update\", _this.latestValues);\n    };\n\n    this.render = function () {\n      if (!_this.current) return;\n\n      _this.triggerBuild();\n\n      _this.renderInstance(_this.current, _this.renderState, _this.props.style, _this.projection);\n    };\n\n    this.scheduleRender = function () {\n      return sync.render(_this.render, false, true);\n    };\n\n    var latestValues = visualState.latestValues,\n        renderState = visualState.renderState;\n    this.latestValues = latestValues;\n    this.baseTarget = _objectSpread({}, latestValues);\n    this.initialValues = props.initial ? _objectSpread({}, latestValues) : {};\n    this.renderState = renderState;\n    this.parent = parent;\n    this.props = props;\n    this.depth = parent ? parent.depth + 1 : 0;\n    this.reducedMotionConfig = reducedMotionConfig;\n    this.options = options;\n    this.isControllingVariants = isControllingVariants(props);\n    this.isVariantNode = isVariantNode(props);\n\n    if (this.isVariantNode) {\n      this.variantChildren = new Set();\n    }\n\n    this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n    /**\n     * Any motion values that are provided to the element when created\n     * aren't yet bound to the element, as this would technically be impure.\n     * However, we iterate through the motion values and set them to the\n     * initial values for this component.\n     *\n     * TODO: This is impure and we should look at changing this to run on mount.\n     * Doing so will break some tests but this isn't neccessarily a breaking change,\n     * more a reflection of the test.\n     */\n\n    var _this$scrapeMotionVal = this.scrapeMotionValuesFromProps(props),\n        willChange = _this$scrapeMotionVal.willChange,\n        initialMotionValues = _objectWithoutProperties(_this$scrapeMotionVal, _excluded);\n\n    for (var key in initialMotionValues) {\n      var value = initialMotionValues[key];\n\n      if (latestValues[key] !== undefined && isMotionValue(value)) {\n        value.set(latestValues[key], false);\n\n        if (isWillChangeMotionValue(willChange)) {\n          willChange.add(key);\n        }\n      }\n    }\n    /**\n     * Update external values with initial values\n     */\n\n\n    if (props.values) {\n      for (var _key in props.values) {\n        var _value = props.values[_key];\n\n        if (latestValues[_key] !== undefined && isMotionValue(_value)) {\n          _value.set(latestValues[_key]);\n        }\n      }\n    }\n  }\n  /**\n   * This method takes React props and returns found MotionValues. For example, HTML\n   * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n   *\n   * This isn't an abstract method as it needs calling in the constructor, but it is\n   * intended to be one.\n   */\n\n\n  _createClass(VisualElement, [{\n    key: \"scrapeMotionValuesFromProps\",\n    value: function scrapeMotionValuesFromProps(_props) {\n      return {};\n    }\n  }, {\n    key: \"mount\",\n    value: function mount(instance) {\n      var _this2 = this;\n\n      var _a;\n\n      this.current = instance;\n\n      if (this.projection) {\n        this.projection.mount(instance);\n      }\n\n      if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n        this.removeFromVariantTree = (_a = this.parent) === null || _a === void 0 ? void 0 : _a.addVariantChild(this);\n      }\n\n      this.values.forEach(function (value, key) {\n        return _this2.bindToMotionValue(key, value);\n      });\n\n      if (!hasReducedMotionListener.current) {\n        initPrefersReducedMotion();\n      }\n\n      this.shouldReduceMotion = this.reducedMotionConfig === \"never\" ? false : this.reducedMotionConfig === \"always\" ? true : prefersReducedMotion.current;\n      if (this.parent) this.parent.children.add(this);\n      this.setProps(this.props);\n    }\n  }, {\n    key: \"unmount\",\n    value: function unmount() {\n      var _a, _b, _c;\n\n      (_a = this.projection) === null || _a === void 0 ? void 0 : _a.unmount();\n      cancelSync.update(this.notifyUpdate);\n      cancelSync.render(this.render);\n      this.valueSubscriptions.forEach(function (remove) {\n        return remove();\n      });\n      (_b = this.removeFromVariantTree) === null || _b === void 0 ? void 0 : _b.call(this);\n      (_c = this.parent) === null || _c === void 0 ? void 0 : _c.children.delete(this);\n\n      for (var key in this.events) {\n        this.events[key].clear();\n      }\n\n      this.current = null;\n    }\n  }, {\n    key: \"bindToMotionValue\",\n    value: function bindToMotionValue(key, value) {\n      var _this3 = this;\n\n      var removeOnChange = value.onChange(function (latestValue) {\n        _this3.latestValues[key] = latestValue;\n        _this3.props.onUpdate && sync.update(_this3.notifyUpdate, false, true);\n      });\n      var removeOnRenderRequest = value.onRenderRequest(this.scheduleRender);\n      this.valueSubscriptions.set(key, function () {\n        removeOnChange();\n        removeOnRenderRequest();\n      });\n    }\n  }, {\n    key: \"sortNodePosition\",\n    value: function sortNodePosition(other) {\n      /**\n       * If these nodes aren't even of the same type we can't compare their depth.\n       */\n      if (!this.current || !this.sortInstanceNodePosition || this.type !== other.type) return 0;\n      return this.sortInstanceNodePosition(this.current, other.current);\n    }\n  }, {\n    key: \"loadFeatures\",\n    value: function loadFeatures(renderedProps, isStrict, preloadedFeatures, projectionId, ProjectionNodeConstructor, initialLayoutGroupConfig) {\n      var _this4 = this;\n\n      var features = [];\n      /**\n       * If we're in development mode, check to make sure we're not rendering a motion component\n       * as a child of LazyMotion, as this will break the file-size benefits of using it.\n       */\n\n      if (env !== \"production\" && preloadedFeatures && isStrict) {\n        invariant(false, \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\");\n      }\n\n      for (var i = 0; i < numFeatures; i++) {\n        var name = featureNames[i];\n        var _featureDefinitions$n = featureDefinitions[name],\n            isEnabled = _featureDefinitions$n.isEnabled,\n            Component = _featureDefinitions$n.Component;\n        /**\n         * It might be possible in the future to use this moment to\n         * dynamically request functionality. In initial tests this\n         * was producing a lot of duplication amongst bundles.\n         */\n\n        if (isEnabled(renderedProps) && Component) {\n          features.push(createElement(Component, _objectSpread(_objectSpread({\n            key: name\n          }, renderedProps), {}, {\n            visualElement: this\n          })));\n        }\n      }\n\n      if (!this.projection && ProjectionNodeConstructor) {\n        this.projection = new ProjectionNodeConstructor(projectionId, this.latestValues, this.parent && this.parent.projection);\n        var layoutId = renderedProps.layoutId,\n            layout = renderedProps.layout,\n            drag = renderedProps.drag,\n            dragConstraints = renderedProps.dragConstraints,\n            layoutScroll = renderedProps.layoutScroll;\n        this.projection.setOptions({\n          layoutId: layoutId,\n          layout: layout,\n          alwaysMeasureLayout: Boolean(drag) || dragConstraints && isRefObject(dragConstraints),\n          visualElement: this,\n          scheduleRender: function scheduleRender() {\n            return _this4.scheduleRender();\n          },\n\n          /**\n           * TODO: Update options in an effect. This could be tricky as it'll be too late\n           * to update by the time layout animations run.\n           * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n           * ensuring it gets called if there's no potential layout animations.\n           *\n           */\n          animationType: typeof layout === \"string\" ? layout : \"both\",\n          initialPromotionConfig: initialLayoutGroupConfig,\n          layoutScroll: layoutScroll\n        });\n      }\n\n      return features;\n    }\n  }, {\n    key: \"triggerBuild\",\n    value: function triggerBuild() {\n      this.build(this.renderState, this.latestValues, this.options, this.props);\n    }\n    /**\n     * Measure the current viewport box with or without transforms.\n     * Only measures axis-aligned boxes, rotate and skew must be manually\n     * removed with a re-render to work.\n     */\n\n  }, {\n    key: \"measureViewportBox\",\n    value: function measureViewportBox() {\n      return this.current ? this.measureInstanceViewportBox(this.current, this.props) : createBox();\n    }\n  }, {\n    key: \"getStaticValue\",\n    value: function getStaticValue(key) {\n      return this.latestValues[key];\n    }\n  }, {\n    key: \"setStaticValue\",\n    value: function setStaticValue(key, value) {\n      this.latestValues[key] = value;\n    }\n    /**\n     * Make a target animatable by Popmotion. For instance, if we're\n     * trying to animate width from 100px to 100vw we need to measure 100vw\n     * in pixels to determine what we really need to animate to. This is also\n     * pluggable to support Framer's custom value types like Color,\n     * and CSS variables.\n     */\n\n  }, {\n    key: \"makeTargetAnimatable\",\n    value: function makeTargetAnimatable(target) {\n      var canMutate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      return this.makeTargetAnimatableFromInstance(target, this.props, canMutate);\n    }\n    /**\n     * Update the provided props. Ensure any newly-added motion values are\n     * added to our map, old ones removed, and listeners updated.\n     */\n\n  }, {\n    key: \"setProps\",\n    value: function setProps(props) {\n      if (props.transformTemplate || this.props.transformTemplate) {\n        this.scheduleRender();\n      }\n\n      this.props = props;\n      /**\n       * Update prop event handlers ie onAnimationStart, onAnimationComplete\n       */\n\n      for (var i = 0; i < propEventHandlers.length; i++) {\n        var key = propEventHandlers[i];\n\n        if (this.propEventSubscriptions[key]) {\n          this.propEventSubscriptions[key]();\n          delete this.propEventSubscriptions[key];\n        }\n\n        var listener = props[\"on\" + key];\n\n        if (listener) {\n          this.propEventSubscriptions[key] = this.on(key, listener);\n        }\n      }\n\n      this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props), this.prevMotionValues);\n    }\n  }, {\n    key: \"getProps\",\n    value: function getProps() {\n      return this.props;\n    }\n    /**\n     * Returns the variant definition with a given name.\n     */\n\n  }, {\n    key: \"getVariant\",\n    value: function getVariant(name) {\n      var _a;\n\n      return (_a = this.props.variants) === null || _a === void 0 ? void 0 : _a[name];\n    }\n    /**\n     * Returns the defined default transition on this component.\n     */\n\n  }, {\n    key: \"getDefaultTransition\",\n    value: function getDefaultTransition() {\n      return this.props.transition;\n    }\n  }, {\n    key: \"getTransformPagePoint\",\n    value: function getTransformPagePoint() {\n      return this.props.transformPagePoint;\n    }\n  }, {\n    key: \"getClosestVariantNode\",\n    value: function getClosestVariantNode() {\n      var _a;\n\n      return this.isVariantNode ? this : (_a = this.parent) === null || _a === void 0 ? void 0 : _a.getClosestVariantNode();\n    }\n  }, {\n    key: \"getVariantContext\",\n    value: function getVariantContext() {\n      var startAtParent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      var _a, _b;\n\n      if (startAtParent) return (_a = this.parent) === null || _a === void 0 ? void 0 : _a.getVariantContext();\n\n      if (!this.isControllingVariants) {\n        var _context = ((_b = this.parent) === null || _b === void 0 ? void 0 : _b.getVariantContext()) || {};\n\n        if (this.props.initial !== undefined) {\n          _context.initial = this.props.initial;\n        }\n\n        return _context;\n      }\n\n      var context = {};\n\n      for (var i = 0; i < numVariantProps; i++) {\n        var name = variantProps[i];\n        var prop = this.props[name];\n\n        if (isVariantLabel(prop) || prop === false) {\n          context[name] = prop;\n        }\n      }\n\n      return context;\n    }\n    /**\n     * Add a child visual element to our set of children.\n     */\n\n  }, {\n    key: \"addVariantChild\",\n    value: function addVariantChild(child) {\n      var _a;\n\n      var closestVariantNode = this.getClosestVariantNode();\n\n      if (closestVariantNode) {\n        (_a = closestVariantNode.variantChildren) === null || _a === void 0 ? void 0 : _a.add(child);\n        return function () {\n          return closestVariantNode.variantChildren.delete(child);\n        };\n      }\n    }\n    /**\n     * Add a motion value and bind it to this visual element.\n     */\n\n  }, {\n    key: \"addValue\",\n    value: function addValue(key, value) {\n      // Remove existing value if it exists\n      if (this.hasValue(key)) this.removeValue(key);\n      this.values.set(key, value);\n      this.latestValues[key] = value.get();\n      this.bindToMotionValue(key, value);\n    }\n    /**\n     * Remove a motion value and unbind any active subscriptions.\n     */\n\n  }, {\n    key: \"removeValue\",\n    value: function removeValue(key) {\n      var _a;\n\n      this.values.delete(key);\n      (_a = this.valueSubscriptions.get(key)) === null || _a === void 0 ? void 0 : _a();\n      this.valueSubscriptions.delete(key);\n      delete this.latestValues[key];\n      this.removeValueFromRenderState(key, this.renderState);\n    }\n    /**\n     * Check whether we have a motion value for this key\n     */\n\n  }, {\n    key: \"hasValue\",\n    value: function hasValue(key) {\n      return this.values.has(key);\n    }\n    /**\n     * Get a motion value for this key. If called with a default\n     * value, we'll create one if none exists.\n     */\n\n  }, {\n    key: \"getValue\",\n    value: function getValue(key, defaultValue) {\n      if (this.props.values && this.props.values[key]) {\n        return this.props.values[key];\n      }\n\n      var value = this.values.get(key);\n\n      if (value === undefined && defaultValue !== undefined) {\n        value = motionValue(defaultValue);\n        this.addValue(key, value);\n      }\n\n      return value;\n    }\n    /**\n     * If we're trying to animate to a previously unencountered value,\n     * we need to check for it in our state and as a last resort read it\n     * directly from the instance (which might have performance implications).\n     */\n\n  }, {\n    key: \"readValue\",\n    value: function readValue(key) {\n      return this.latestValues[key] !== undefined || !this.current ? this.latestValues[key] : this.readValueFromInstance(this.current, key, this.options);\n    }\n    /**\n     * Set the base target to later animate back to. This is currently\n     * only hydrated on creation and when we first read a value.\n     */\n\n  }, {\n    key: \"setBaseTarget\",\n    value: function setBaseTarget(key, value) {\n      this.baseTarget[key] = value;\n    }\n    /**\n     * Find the base target for a value thats been removed from all animation\n     * props.\n     */\n\n  }, {\n    key: \"getBaseTarget\",\n    value: function getBaseTarget(key) {\n      var _a;\n\n      var initial = this.props.initial;\n      var valueFromInitial = typeof initial === \"string\" || typeof initial === \"object\" ? (_a = resolveVariantFromProps(this.props, initial)) === null || _a === void 0 ? void 0 : _a[key] : undefined;\n      /**\n       * If this value still exists in the current initial variant, read that.\n       */\n\n      if (initial && valueFromInitial !== undefined) {\n        return valueFromInitial;\n      }\n      /**\n       * Alternatively, if this VisualElement config has defined a getBaseTarget\n       * so we can read the value from an alternative source, try that.\n       */\n\n\n      var target = this.getBaseTargetFromProps(this.props, key);\n      if (target !== undefined && !isMotionValue(target)) return target;\n      /**\n       * If the value was initially defined on initial, but it doesn't any more,\n       * return undefined. Otherwise return the value as initially read from the DOM.\n       */\n\n      return this.initialValues[key] !== undefined && valueFromInitial === undefined ? undefined : this.baseTarget[key];\n    }\n  }, {\n    key: \"on\",\n    value: function on(eventName, callback) {\n      if (!this.events[eventName]) {\n        this.events[eventName] = new SubscriptionManager();\n      }\n\n      return this.events[eventName].add(callback);\n    }\n  }, {\n    key: \"notify\",\n    value: function notify(eventName) {\n      var _a2;\n\n      var _a;\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key2 = 1; _key2 < _len; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      (_a = this.events[eventName]) === null || _a === void 0 ? void 0 : (_a2 = _a).notify.apply(_a2, args);\n    }\n  }]);\n\n  return VisualElement;\n}();\n\nvar variantProps = [\"initial\"].concat(_toConsumableArray(variantPriorityOrder));\nvar numVariantProps = variantProps.length;\nexport { VisualElement };","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/node_modules/framer-motion/dist/es/render/VisualElement.mjs"],"names":["sync","cancelSync","invariant","createElement","featureDefinitions","createBox","isRefObject","env","initPrefersReducedMotion","hasReducedMotionListener","prefersReducedMotion","SubscriptionManager","motionValue","isWillChangeMotionValue","isMotionValue","variantPriorityOrder","isControllingVariants","isVariantNode","isVariantLabel","updateMotionValuesFromProps","resolveVariantFromProps","featureNames","Object","keys","numFeatures","length","propEventHandlers","VisualElement","parent","props","reducedMotionConfig","visualState","options","current","children","Set","shouldReduceMotion","values","Map","isPresent","valueSubscriptions","prevMotionValues","events","propEventSubscriptions","notifyUpdate","notify","latestValues","render","triggerBuild","renderInstance","renderState","style","projection","scheduleRender","baseTarget","initialValues","initial","depth","variantChildren","manuallyAnimateOnMount","Boolean","scrapeMotionValuesFromProps","willChange","initialMotionValues","key","value","undefined","set","add","_props","instance","_a","mount","removeFromVariantTree","addVariantChild","forEach","bindToMotionValue","setProps","_b","_c","unmount","update","remove","call","delete","clear","removeOnChange","onChange","latestValue","onUpdate","removeOnRenderRequest","onRenderRequest","other","sortInstanceNodePosition","type","renderedProps","isStrict","preloadedFeatures","projectionId","ProjectionNodeConstructor","initialLayoutGroupConfig","features","i","name","isEnabled","Component","push","visualElement","layoutId","layout","drag","dragConstraints","layoutScroll","setOptions","alwaysMeasureLayout","animationType","initialPromotionConfig","build","measureInstanceViewportBox","target","canMutate","makeTargetAnimatableFromInstance","transformTemplate","listener","on","variants","transition","transformPagePoint","getClosestVariantNode","startAtParent","getVariantContext","context","numVariantProps","variantProps","prop","child","closestVariantNode","hasValue","removeValue","get","removeValueFromRenderState","has","defaultValue","addValue","readValueFromInstance","valueFromInitial","getBaseTargetFromProps","eventName","callback","args"],"mappings":"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","sourcesContent":["import sync, { cancelSync } from 'framesync';\nimport { invariant } from 'hey-listen';\nimport { createElement } from 'react';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { isRefObject } from '../utils/is-ref-object.mjs';\nimport { env } from '../utils/process.mjs';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isWillChangeMotionValue } from '../value/use-will-change/is.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { variantPriorityOrder } from './utils/animation-state.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { isVariantLabel } from './utils/is-variant-label.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\n\nconst featureNames = Object.keys(featureDefinitions);\nconst numFeatures = featureNames.length;\nconst propEventHandlers = [\n    \"AnimationStart\",\n    \"AnimationComplete\",\n    \"Update\",\n    \"Unmount\",\n    \"BeforeLayoutMeasure\",\n    \"LayoutMeasure\",\n    \"LayoutAnimationStart\",\n    \"LayoutAnimationComplete\",\n];\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\nclass VisualElement {\n    constructor({ parent, props, reducedMotionConfig, visualState, }, options = {}) {\n        /**\n         * A reference to the current underlying Instance, e.g. a HTMLElement\n         * or Three.Mesh etc.\n         */\n        this.current = null;\n        /**\n         * A set containing references to this VisualElement's children.\n         */\n        this.children = new Set();\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */\n        this.isVariantNode = false;\n        this.isControllingVariants = false;\n        /**\n         * Decides whether this VisualElement should animate in reduced motion\n         * mode.\n         *\n         * TODO: This is currently set on every individual VisualElement but feels\n         * like it could be set globally.\n         */\n        this.shouldReduceMotion = null;\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */\n        this.values = new Map();\n        /**\n         * Tracks whether this VisualElement's React component is currently present\n         * within the defined React tree.\n         */\n        this.isPresent = true;\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */\n        this.valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */\n        this.prevMotionValues = {};\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        /**\n         * An object containing an unsubscribe function for each prop event subscription.\n         * For example, every \"Update\" event can have multiple subscribers via\n         * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n         */\n        this.propEventSubscriptions = {};\n        this.notifyUpdate = () => this.notify(\"Update\", this.latestValues);\n        this.render = () => {\n            if (!this.current)\n                return;\n            this.triggerBuild();\n            this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n        };\n        this.scheduleRender = () => sync.render(this.render, false, true);\n        const { latestValues, renderState } = visualState;\n        this.latestValues = latestValues;\n        this.baseTarget = { ...latestValues };\n        this.initialValues = props.initial ? { ...latestValues } : {};\n        this.renderState = renderState;\n        this.parent = parent;\n        this.props = props;\n        this.depth = parent ? parent.depth + 1 : 0;\n        this.reducedMotionConfig = reducedMotionConfig;\n        this.options = options;\n        this.isControllingVariants = isControllingVariants(props);\n        this.isVariantNode = isVariantNode(props);\n        if (this.isVariantNode) {\n            this.variantChildren = new Set();\n        }\n        this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't neccessarily a breaking change,\n         * more a reflection of the test.\n         */\n        const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props);\n        for (const key in initialMotionValues) {\n            const value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key], false);\n                if (isWillChangeMotionValue(willChange)) {\n                    willChange.add(key);\n                }\n            }\n        }\n        /**\n         * Update external values with initial values\n         */\n        if (props.values) {\n            for (const key in props.values) {\n                const value = props.values[key];\n                if (latestValues[key] !== undefined && isMotionValue(value)) {\n                    value.set(latestValues[key]);\n                }\n            }\n        }\n    }\n    /**\n     * This method takes React props and returns found MotionValues. For example, HTML\n     * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n     *\n     * This isn't an abstract method as it needs calling in the constructor, but it is\n     * intended to be one.\n     */\n    scrapeMotionValuesFromProps(_props) {\n        return {};\n    }\n    mount(instance) {\n        var _a;\n        this.current = instance;\n        if (this.projection) {\n            this.projection.mount(instance);\n        }\n        if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n            this.removeFromVariantTree = (_a = this.parent) === null || _a === void 0 ? void 0 : _a.addVariantChild(this);\n        }\n        this.values.forEach((value, key) => this.bindToMotionValue(key, value));\n        if (!hasReducedMotionListener.current) {\n            initPrefersReducedMotion();\n        }\n        this.shouldReduceMotion =\n            this.reducedMotionConfig === \"never\"\n                ? false\n                : this.reducedMotionConfig === \"always\"\n                    ? true\n                    : prefersReducedMotion.current;\n        if (this.parent)\n            this.parent.children.add(this);\n        this.setProps(this.props);\n    }\n    unmount() {\n        var _a, _b, _c;\n        (_a = this.projection) === null || _a === void 0 ? void 0 : _a.unmount();\n        cancelSync.update(this.notifyUpdate);\n        cancelSync.render(this.render);\n        this.valueSubscriptions.forEach((remove) => remove());\n        (_b = this.removeFromVariantTree) === null || _b === void 0 ? void 0 : _b.call(this);\n        (_c = this.parent) === null || _c === void 0 ? void 0 : _c.children.delete(this);\n        for (const key in this.events) {\n            this.events[key].clear();\n        }\n        this.current = null;\n    }\n    bindToMotionValue(key, value) {\n        const removeOnChange = value.onChange((latestValue) => {\n            this.latestValues[key] = latestValue;\n            this.props.onUpdate &&\n                sync.update(this.notifyUpdate, false, true);\n        });\n        const removeOnRenderRequest = value.onRenderRequest(this.scheduleRender);\n        this.valueSubscriptions.set(key, () => {\n            removeOnChange();\n            removeOnRenderRequest();\n        });\n    }\n    sortNodePosition(other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */\n        if (!this.current ||\n            !this.sortInstanceNodePosition ||\n            this.type !== other.type)\n            return 0;\n        return this.sortInstanceNodePosition(this.current, other.current);\n    }\n    loadFeatures(renderedProps, isStrict, preloadedFeatures, projectionId, ProjectionNodeConstructor, initialLayoutGroupConfig) {\n        const features = [];\n        /**\n         * If we're in development mode, check to make sure we're not rendering a motion component\n         * as a child of LazyMotion, as this will break the file-size benefits of using it.\n         */\n        if (env !== \"production\" && preloadedFeatures && isStrict) {\n            invariant(false, \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\");\n        }\n        for (let i = 0; i < numFeatures; i++) {\n            const name = featureNames[i];\n            const { isEnabled, Component } = featureDefinitions[name];\n            /**\n             * It might be possible in the future to use this moment to\n             * dynamically request functionality. In initial tests this\n             * was producing a lot of duplication amongst bundles.\n             */\n            if (isEnabled(renderedProps) && Component) {\n                features.push(createElement(Component, {\n                    key: name,\n                    ...renderedProps,\n                    visualElement: this,\n                }));\n            }\n        }\n        if (!this.projection && ProjectionNodeConstructor) {\n            this.projection = new ProjectionNodeConstructor(projectionId, this.latestValues, this.parent && this.parent.projection);\n            const { layoutId, layout, drag, dragConstraints, layoutScroll } = renderedProps;\n            this.projection.setOptions({\n                layoutId,\n                layout,\n                alwaysMeasureLayout: Boolean(drag) ||\n                    (dragConstraints && isRefObject(dragConstraints)),\n                visualElement: this,\n                scheduleRender: () => this.scheduleRender(),\n                /**\n                 * TODO: Update options in an effect. This could be tricky as it'll be too late\n                 * to update by the time layout animations run.\n                 * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n                 * ensuring it gets called if there's no potential layout animations.\n                 *\n                 */\n                animationType: typeof layout === \"string\" ? layout : \"both\",\n                initialPromotionConfig: initialLayoutGroupConfig,\n                layoutScroll,\n            });\n        }\n        return features;\n    }\n    triggerBuild() {\n        this.build(this.renderState, this.latestValues, this.options, this.props);\n    }\n    /**\n     * Measure the current viewport box with or without transforms.\n     * Only measures axis-aligned boxes, rotate and skew must be manually\n     * removed with a re-render to work.\n     */\n    measureViewportBox() {\n        return this.current\n            ? this.measureInstanceViewportBox(this.current, this.props)\n            : createBox();\n    }\n    getStaticValue(key) {\n        return this.latestValues[key];\n    }\n    setStaticValue(key, value) {\n        this.latestValues[key] = value;\n    }\n    /**\n     * Make a target animatable by Popmotion. For instance, if we're\n     * trying to animate width from 100px to 100vw we need to measure 100vw\n     * in pixels to determine what we really need to animate to. This is also\n     * pluggable to support Framer's custom value types like Color,\n     * and CSS variables.\n     */\n    makeTargetAnimatable(target, canMutate = true) {\n        return this.makeTargetAnimatableFromInstance(target, this.props, canMutate);\n    }\n    /**\n     * Update the provided props. Ensure any newly-added motion values are\n     * added to our map, old ones removed, and listeners updated.\n     */\n    setProps(props) {\n        if (props.transformTemplate || this.props.transformTemplate) {\n            this.scheduleRender();\n        }\n        this.props = props;\n        /**\n         * Update prop event handlers ie onAnimationStart, onAnimationComplete\n         */\n        for (let i = 0; i < propEventHandlers.length; i++) {\n            const key = propEventHandlers[i];\n            if (this.propEventSubscriptions[key]) {\n                this.propEventSubscriptions[key]();\n                delete this.propEventSubscriptions[key];\n            }\n            const listener = props[\"on\" + key];\n            if (listener) {\n                this.propEventSubscriptions[key] = this.on(key, listener);\n            }\n        }\n        this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props), this.prevMotionValues);\n    }\n    getProps() {\n        return this.props;\n    }\n    /**\n     * Returns the variant definition with a given name.\n     */\n    getVariant(name) {\n        var _a;\n        return (_a = this.props.variants) === null || _a === void 0 ? void 0 : _a[name];\n    }\n    /**\n     * Returns the defined default transition on this component.\n     */\n    getDefaultTransition() {\n        return this.props.transition;\n    }\n    getTransformPagePoint() {\n        return this.props.transformPagePoint;\n    }\n    getClosestVariantNode() {\n        var _a;\n        return this.isVariantNode ? this : (_a = this.parent) === null || _a === void 0 ? void 0 : _a.getClosestVariantNode();\n    }\n    getVariantContext(startAtParent = false) {\n        var _a, _b;\n        if (startAtParent)\n            return (_a = this.parent) === null || _a === void 0 ? void 0 : _a.getVariantContext();\n        if (!this.isControllingVariants) {\n            const context = ((_b = this.parent) === null || _b === void 0 ? void 0 : _b.getVariantContext()) || {};\n            if (this.props.initial !== undefined) {\n                context.initial = this.props.initial;\n            }\n            return context;\n        }\n        const context = {};\n        for (let i = 0; i < numVariantProps; i++) {\n            const name = variantProps[i];\n            const prop = this.props[name];\n            if (isVariantLabel(prop) || prop === false) {\n                context[name] = prop;\n            }\n        }\n        return context;\n    }\n    /**\n     * Add a child visual element to our set of children.\n     */\n    addVariantChild(child) {\n        var _a;\n        const closestVariantNode = this.getClosestVariantNode();\n        if (closestVariantNode) {\n            (_a = closestVariantNode.variantChildren) === null || _a === void 0 ? void 0 : _a.add(child);\n            return () => closestVariantNode.variantChildren.delete(child);\n        }\n    }\n    /**\n     * Add a motion value and bind it to this visual element.\n     */\n    addValue(key, value) {\n        // Remove existing value if it exists\n        if (this.hasValue(key))\n            this.removeValue(key);\n        this.values.set(key, value);\n        this.latestValues[key] = value.get();\n        this.bindToMotionValue(key, value);\n    }\n    /**\n     * Remove a motion value and unbind any active subscriptions.\n     */\n    removeValue(key) {\n        var _a;\n        this.values.delete(key);\n        (_a = this.valueSubscriptions.get(key)) === null || _a === void 0 ? void 0 : _a();\n        this.valueSubscriptions.delete(key);\n        delete this.latestValues[key];\n        this.removeValueFromRenderState(key, this.renderState);\n    }\n    /**\n     * Check whether we have a motion value for this key\n     */\n    hasValue(key) {\n        return this.values.has(key);\n    }\n    /**\n     * Get a motion value for this key. If called with a default\n     * value, we'll create one if none exists.\n     */\n    getValue(key, defaultValue) {\n        if (this.props.values && this.props.values[key]) {\n            return this.props.values[key];\n        }\n        let value = this.values.get(key);\n        if (value === undefined && defaultValue !== undefined) {\n            value = motionValue(defaultValue);\n            this.addValue(key, value);\n        }\n        return value;\n    }\n    /**\n     * If we're trying to animate to a previously unencountered value,\n     * we need to check for it in our state and as a last resort read it\n     * directly from the instance (which might have performance implications).\n     */\n    readValue(key) {\n        return this.latestValues[key] !== undefined || !this.current\n            ? this.latestValues[key]\n            : this.readValueFromInstance(this.current, key, this.options);\n    }\n    /**\n     * Set the base target to later animate back to. This is currently\n     * only hydrated on creation and when we first read a value.\n     */\n    setBaseTarget(key, value) {\n        this.baseTarget[key] = value;\n    }\n    /**\n     * Find the base target for a value thats been removed from all animation\n     * props.\n     */\n    getBaseTarget(key) {\n        var _a;\n        const { initial } = this.props;\n        const valueFromInitial = typeof initial === \"string\" || typeof initial === \"object\"\n            ? (_a = resolveVariantFromProps(this.props, initial)) === null || _a === void 0 ? void 0 : _a[key]\n            : undefined;\n        /**\n         * If this value still exists in the current initial variant, read that.\n         */\n        if (initial && valueFromInitial !== undefined) {\n            return valueFromInitial;\n        }\n        /**\n         * Alternatively, if this VisualElement config has defined a getBaseTarget\n         * so we can read the value from an alternative source, try that.\n         */\n        const target = this.getBaseTargetFromProps(this.props, key);\n        if (target !== undefined && !isMotionValue(target))\n            return target;\n        /**\n         * If the value was initially defined on initial, but it doesn't any more,\n         * return undefined. Otherwise return the value as initially read from the DOM.\n         */\n        return this.initialValues[key] !== undefined &&\n            valueFromInitial === undefined\n            ? undefined\n            : this.baseTarget[key];\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        return this.events[eventName].add(callback);\n    }\n    notify(eventName, ...args) {\n        var _a;\n        (_a = this.events[eventName]) === null || _a === void 0 ? void 0 : _a.notify(...args);\n    }\n}\nconst variantProps = [\"initial\", ...variantPriorityOrder];\nconst numVariantProps = variantProps.length;\n\nexport { VisualElement };\n"]},"metadata":{},"sourceType":"module"}