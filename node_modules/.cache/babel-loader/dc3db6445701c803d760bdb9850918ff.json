{"ast":null,"code":"\"use strict\";\n\nexports.lightFormatters = void 0;\n\nvar _index = require(\"../addLeadingZeros.js\");\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\n\nconst lightFormatters = exports.lightFormatters = {\n  // Year\n  y(date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n    const signedYear = date.getFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    const year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return (0, _index.addLeadingZeros)(token === \"yy\" ? year % 100 : year, token.length);\n  },\n\n  // Month\n  M(date, token) {\n    const month = date.getMonth();\n    return token === \"M\" ? String(month + 1) : (0, _index.addLeadingZeros)(month + 1, 2);\n  },\n\n  // Day of the month\n  d(date, token) {\n    return (0, _index.addLeadingZeros)(date.getDate(), token.length);\n  },\n\n  // AM or PM\n  a(date, token) {\n    const dayPeriodEnumValue = date.getHours() / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return dayPeriodEnumValue.toUpperCase();\n\n      case \"aaa\":\n        return dayPeriodEnumValue;\n\n      case \"aaaaa\":\n        return dayPeriodEnumValue[0];\n\n      case \"aaaa\":\n      default:\n        return dayPeriodEnumValue === \"am\" ? \"a.m.\" : \"p.m.\";\n    }\n  },\n\n  // Hour [1-12]\n  h(date, token) {\n    return (0, _index.addLeadingZeros)(date.getHours() % 12 || 12, token.length);\n  },\n\n  // Hour [0-23]\n  H(date, token) {\n    return (0, _index.addLeadingZeros)(date.getHours(), token.length);\n  },\n\n  // Minute\n  m(date, token) {\n    return (0, _index.addLeadingZeros)(date.getMinutes(), token.length);\n  },\n\n  // Second\n  s(date, token) {\n    return (0, _index.addLeadingZeros)(date.getSeconds(), token.length);\n  },\n\n  // Fraction of second\n  S(date, token) {\n    const numberOfDigits = token.length;\n    const milliseconds = date.getMilliseconds();\n    const fractionalSeconds = Math.trunc(milliseconds * Math.pow(10, numberOfDigits - 3));\n    return (0, _index.addLeadingZeros)(fractionalSeconds, token.length);\n  }\n\n};","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/node_modules/date-fns/_lib/format/lightFormatters.js"],"names":["exports","lightFormatters","_index","require","y","date","token","signedYear","getFullYear","year","addLeadingZeros","length","M","month","getMonth","String","d","getDate","a","dayPeriodEnumValue","getHours","toUpperCase","h","H","m","getMinutes","s","getSeconds","S","numberOfDigits","milliseconds","getMilliseconds","fractionalSeconds","Math","trunc","pow"],"mappings":"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","sourcesContent":["\"use strict\";\nexports.lightFormatters = void 0;\nvar _index = require(\"../addLeadingZeros.js\");\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nconst lightFormatters = (exports.lightFormatters = {\n  // Year\n  y(date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n\n    const signedYear = date.getFullYear();\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return (0, _index.addLeadingZeros)(\n      token === \"yy\" ? year % 100 : year,\n      token.length,\n    );\n  },\n\n  // Month\n  M(date, token) {\n    const month = date.getMonth();\n    return token === \"M\"\n      ? String(month + 1)\n      : (0, _index.addLeadingZeros)(month + 1, 2);\n  },\n\n  // Day of the month\n  d(date, token) {\n    return (0, _index.addLeadingZeros)(date.getDate(), token.length);\n  },\n\n  // AM or PM\n  a(date, token) {\n    const dayPeriodEnumValue = date.getHours() / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return dayPeriodEnumValue.toUpperCase();\n      case \"aaa\":\n        return dayPeriodEnumValue;\n      case \"aaaaa\":\n        return dayPeriodEnumValue[0];\n      case \"aaaa\":\n      default:\n        return dayPeriodEnumValue === \"am\" ? \"a.m.\" : \"p.m.\";\n    }\n  },\n\n  // Hour [1-12]\n  h(date, token) {\n    return (0, _index.addLeadingZeros)(\n      date.getHours() % 12 || 12,\n      token.length,\n    );\n  },\n\n  // Hour [0-23]\n  H(date, token) {\n    return (0, _index.addLeadingZeros)(date.getHours(), token.length);\n  },\n\n  // Minute\n  m(date, token) {\n    return (0, _index.addLeadingZeros)(date.getMinutes(), token.length);\n  },\n\n  // Second\n  s(date, token) {\n    return (0, _index.addLeadingZeros)(date.getSeconds(), token.length);\n  },\n\n  // Fraction of second\n  S(date, token) {\n    const numberOfDigits = token.length;\n    const milliseconds = date.getMilliseconds();\n    const fractionalSeconds = Math.trunc(\n      milliseconds * Math.pow(10, numberOfDigits - 3),\n    );\n    return (0, _index.addLeadingZeros)(fractionalSeconds, token.length);\n  },\n});\n"]},"metadata":{},"sourceType":"script"}