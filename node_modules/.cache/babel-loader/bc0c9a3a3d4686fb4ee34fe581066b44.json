{"ast":null,"code":"\"use strict\";\n\nexports.differenceInISOWeekYears = differenceInISOWeekYears;\n\nvar _index = require(\"./compareAsc.js\");\n\nvar _index2 = require(\"./differenceInCalendarISOWeekYears.js\");\n\nvar _index3 = require(\"./subISOWeekYears.js\");\n\nvar _index4 = require(\"./toDate.js\");\n/**\n * @name differenceInISOWeekYears\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the number of full ISO week-numbering years between the given dates.\n *\n * @description\n * Get the number of full ISO week-numbering years between the given dates.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of full ISO week-numbering years\n *\n * @example\n * // How many full ISO week-numbering years are between 1 January 2010 and 1 January 2012?\n * const result = differenceInISOWeekYears(\n *   new Date(2012, 0, 1),\n *   new Date(2010, 0, 1)\n * )\n * //=> 1\n */\n\n\nfunction differenceInISOWeekYears(dateLeft, dateRight) {\n  let _dateLeft = (0, _index4.toDate)(dateLeft);\n\n  const _dateRight = (0, _index4.toDate)(dateRight);\n\n  const sign = (0, _index.compareAsc)(_dateLeft, _dateRight);\n  const difference = Math.abs((0, _index2.differenceInCalendarISOWeekYears)(_dateLeft, _dateRight));\n  _dateLeft = (0, _index3.subISOWeekYears)(_dateLeft, sign * difference); // Math.abs(diff in full ISO years - diff in calendar ISO years) === 1\n  // if last calendar ISO year is not full\n  // If so, result must be decreased by 1 in absolute value\n\n  const isLastISOWeekYearNotFull = Number((0, _index.compareAsc)(_dateLeft, _dateRight) === -sign);\n  const result = sign * (difference - isLastISOWeekYearNotFull); // Prevent negative zero\n\n  return result === 0 ? 0 : result;\n}","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/node_modules/date-fns/differenceInISOWeekYears.js"],"names":["exports","differenceInISOWeekYears","_index","require","_index2","_index3","_index4","dateLeft","dateRight","_dateLeft","toDate","_dateRight","sign","compareAsc","difference","Math","abs","differenceInCalendarISOWeekYears","subISOWeekYears","isLastISOWeekYearNotFull","Number","result"],"mappings":"AAAA;;AACAA,OAAO,CAACC,wBAAR,GAAmCA,wBAAnC;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,iBAAD,CAApB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,uCAAD,CAArB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,sBAAD,CAArB;;AACA,IAAIG,OAAO,GAAGH,OAAO,CAAC,aAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,wBAAT,CAAkCM,QAAlC,EAA4CC,SAA5C,EAAuD;AACrD,MAAIC,SAAS,GAAG,CAAC,GAAGH,OAAO,CAACI,MAAZ,EAAoBH,QAApB,CAAhB;;AACA,QAAMI,UAAU,GAAG,CAAC,GAAGL,OAAO,CAACI,MAAZ,EAAoBF,SAApB,CAAnB;;AAEA,QAAMI,IAAI,GAAG,CAAC,GAAGV,MAAM,CAACW,UAAX,EAAuBJ,SAAvB,EAAkCE,UAAlC,CAAb;AACA,QAAMG,UAAU,GAAGC,IAAI,CAACC,GAAL,CACjB,CAAC,GAAGZ,OAAO,CAACa,gCAAZ,EAA8CR,SAA9C,EAAyDE,UAAzD,CADiB,CAAnB;AAGAF,EAAAA,SAAS,GAAG,CAAC,GAAGJ,OAAO,CAACa,eAAZ,EAA6BT,SAA7B,EAAwCG,IAAI,GAAGE,UAA/C,CAAZ,CARqD,CAUrD;AACA;AACA;;AACA,QAAMK,wBAAwB,GAAGC,MAAM,CACrC,CAAC,GAAGlB,MAAM,CAACW,UAAX,EAAuBJ,SAAvB,EAAkCE,UAAlC,MAAkD,CAACC,IADd,CAAvC;AAGA,QAAMS,MAAM,GAAGT,IAAI,IAAIE,UAAU,GAAGK,wBAAjB,CAAnB,CAhBqD,CAiBrD;;AACA,SAAOE,MAAM,KAAK,CAAX,GAAe,CAAf,GAAmBA,MAA1B;AACD","sourcesContent":["\"use strict\";\nexports.differenceInISOWeekYears = differenceInISOWeekYears;\nvar _index = require(\"./compareAsc.js\");\nvar _index2 = require(\"./differenceInCalendarISOWeekYears.js\");\nvar _index3 = require(\"./subISOWeekYears.js\");\nvar _index4 = require(\"./toDate.js\");\n\n/**\n * @name differenceInISOWeekYears\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the number of full ISO week-numbering years between the given dates.\n *\n * @description\n * Get the number of full ISO week-numbering years between the given dates.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of full ISO week-numbering years\n *\n * @example\n * // How many full ISO week-numbering years are between 1 January 2010 and 1 January 2012?\n * const result = differenceInISOWeekYears(\n *   new Date(2012, 0, 1),\n *   new Date(2010, 0, 1)\n * )\n * //=> 1\n */\nfunction differenceInISOWeekYears(dateLeft, dateRight) {\n  let _dateLeft = (0, _index4.toDate)(dateLeft);\n  const _dateRight = (0, _index4.toDate)(dateRight);\n\n  const sign = (0, _index.compareAsc)(_dateLeft, _dateRight);\n  const difference = Math.abs(\n    (0, _index2.differenceInCalendarISOWeekYears)(_dateLeft, _dateRight),\n  );\n  _dateLeft = (0, _index3.subISOWeekYears)(_dateLeft, sign * difference);\n\n  // Math.abs(diff in full ISO years - diff in calendar ISO years) === 1\n  // if last calendar ISO year is not full\n  // If so, result must be decreased by 1 in absolute value\n  const isLastISOWeekYearNotFull = Number(\n    (0, _index.compareAsc)(_dateLeft, _dateRight) === -sign,\n  );\n  const result = sign * (difference - isLastISOWeekYearNotFull);\n  // Prevent negative zero\n  return result === 0 ? 0 : result;\n}\n"]},"metadata":{},"sourceType":"script"}