{"ast":null,"code":"import _slicedToArray from \"/home/dmytro/react-redux-posts/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/home/dmytro/react-redux-posts/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\n\n// src/index.ts\nfunction compact(object) {\n  var clone = Object.assign({}, object);\n\n  for (var key in clone) {\n    if (clone[key] === void 0) delete clone[key];\n  }\n\n  return clone;\n}\n\nfunction omit(object) {\n  var keysToOmit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var clone = Object.assign({}, object);\n\n  var _iterator = _createForOfIteratorHelper(keysToOmit),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var key = _step.value;\n      if (key in clone) delete clone[key];\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return clone;\n}\n\nfunction pick(object, keysToPick) {\n  var result = {};\n\n  var _iterator2 = _createForOfIteratorHelper(keysToPick),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var key = _step2.value;\n\n      if (key in object) {\n        result[key] = object[key];\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return result;\n}\n\nfunction split(object, keys) {\n  var picked = {};\n  var omitted = {};\n\n  for (var _i = 0, _Object$entries = Object.entries(object); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n        key = _Object$entries$_i[0],\n        value = _Object$entries$_i[1];\n\n    if (keys.includes(key)) picked[key] = value;else omitted[key] = value;\n  }\n\n  return [picked, omitted];\n}\n\nexport { compact, omit, pick, split };","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/node_modules/@chakra-ui/object-utils/dist/index.esm.js"],"names":["compact","object","clone","Object","assign","key","omit","keysToOmit","pick","keysToPick","result","split","keys","picked","omitted","entries","value","includes"],"mappings":";;;AAAA;AACA,SAASA,OAAT,CAAiBC,MAAjB,EAAyB;AACvB,MAAMC,KAAK,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,MAAlB,CAAd;;AACA,OAAK,IAAII,GAAT,IAAgBH,KAAhB,EAAuB;AACrB,QAAIA,KAAK,CAACG,GAAD,CAAL,KAAe,KAAK,CAAxB,EACE,OAAOH,KAAK,CAACG,GAAD,CAAZ;AACH;;AACD,SAAOH,KAAP;AACD;;AACD,SAASI,IAAT,CAAcL,MAAd,EAAuC;AAAA,MAAjBM,UAAiB,uEAAJ,EAAI;AACrC,MAAML,KAAK,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,MAAlB,CAAd;;AADqC,6CAEnBM,UAFmB;AAAA;;AAAA;AAErC,wDAA8B;AAAA,UAAnBF,GAAmB;AAC5B,UAAIA,GAAG,IAAIH,KAAX,EACE,OAAOA,KAAK,CAACG,GAAD,CAAZ;AACH;AALoC;AAAA;AAAA;AAAA;AAAA;;AAMrC,SAAOH,KAAP;AACD;;AACD,SAASM,IAAT,CAAcP,MAAd,EAAsBQ,UAAtB,EAAkC;AAChC,MAAMC,MAAM,GAAG,EAAf;;AADgC,8CAEdD,UAFc;AAAA;;AAAA;AAEhC,2DAA8B;AAAA,UAAnBJ,GAAmB;;AAC5B,UAAIA,GAAG,IAAIJ,MAAX,EAAmB;AACjBS,QAAAA,MAAM,CAACL,GAAD,CAAN,GAAcJ,MAAM,CAACI,GAAD,CAApB;AACD;AACF;AAN+B;AAAA;AAAA;AAAA;AAAA;;AAOhC,SAAOK,MAAP;AACD;;AACD,SAASC,KAAT,CAAeV,MAAf,EAAuBW,IAAvB,EAA6B;AAC3B,MAAMC,MAAM,GAAG,EAAf;AACA,MAAMC,OAAO,GAAG,EAAhB;;AACA,qCAA2BX,MAAM,CAACY,OAAP,CAAed,MAAf,CAA3B,qCAAmD;AAA9C;AAAA,QAAOI,GAAP;AAAA,QAAYW,KAAZ;;AACH,QAAIJ,IAAI,CAACK,QAAL,CAAcZ,GAAd,CAAJ,EACEQ,MAAM,CAACR,GAAD,CAAN,GAAcW,KAAd,CADF,KAGEF,OAAO,CAACT,GAAD,CAAP,GAAeW,KAAf;AACH;;AACD,SAAO,CAACH,MAAD,EAASC,OAAT,CAAP;AACD;;AACD,SACEd,OADF,EAEEM,IAFF,EAGEE,IAHF,EAIEG,KAJF","sourcesContent":["// src/index.ts\nfunction compact(object) {\n  const clone = Object.assign({}, object);\n  for (let key in clone) {\n    if (clone[key] === void 0)\n      delete clone[key];\n  }\n  return clone;\n}\nfunction omit(object, keysToOmit = []) {\n  const clone = Object.assign({}, object);\n  for (const key of keysToOmit) {\n    if (key in clone)\n      delete clone[key];\n  }\n  return clone;\n}\nfunction pick(object, keysToPick) {\n  const result = {};\n  for (const key of keysToPick) {\n    if (key in object) {\n      result[key] = object[key];\n    }\n  }\n  return result;\n}\nfunction split(object, keys) {\n  const picked = {};\n  const omitted = {};\n  for (const [key, value] of Object.entries(object)) {\n    if (keys.includes(key))\n      picked[key] = value;\n    else\n      omitted[key] = value;\n  }\n  return [picked, omitted];\n}\nexport {\n  compact,\n  omit,\n  pick,\n  split\n};\n"]},"metadata":{},"sourceType":"module"}