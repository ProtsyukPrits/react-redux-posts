{"ast":null,"code":"\"use strict\";\n\nexports.roundToNearestHours = roundToNearestHours;\n\nvar _index = require(\"./_lib/getRoundingMethod.js\");\n\nvar _index2 = require(\"./constructFrom.js\");\n\nvar _index3 = require(\"./toDate.js\");\n/**\n * The {@link roundToNearestHours} function options.\n */\n\n/**\n * @name roundToNearestHours\n * @category Hour Helpers\n * @summary Rounds the given date to the nearest hour\n *\n * @description\n * Rounds the given date to the nearest hour (or number of hours).\n * Rounds up when the given date is exactly between the nearest round hours.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to round\n * @param options - An object with options.\n *\n * @returns The new date rounded to the closest hour\n *\n * @example\n * // Round 10 July 2014 12:34:56 to nearest hour:\n * const result = roundToNearestHours(new Date(2014, 6, 10, 12, 34, 56))\n * //=> Thu Jul 10 2014 13:00:00\n *\n * @example\n * // Round 10 July 2014 12:34:56 to nearest half hour:\n * const result = roundToNearestHours(new Date(2014, 6, 10, 12, 34, 56), { nearestTo: 6 })\n * //=> Thu Jul 10 2014 12:00:00\n\n * @example\n * // Round 10 July 2014 12:34:56 to nearest half hour:\n * const result = roundToNearestHours(new Date(2014, 6, 10, 12, 34, 56), { nearestTo: 8 })\n * //=> Thu Jul 10 2014 16:00:00\n\n* @example\n * // Floor (rounds down) 10 July 2014 12:34:56 to nearest hour:\n * const result = roundToNearestHours(new Date(2014, 6, 10, 1, 23, 45), { roundingMethod: 'ceil' })\n * //=> Thu Jul 10 2014 02:00:00\n *\n * @example\n * // Ceil (rounds up) 10 July 2014 12:34:56 to nearest quarter hour:\n * const result = roundToNearestHours(new Date(2014, 6, 10, 12, 34, 56), { roundingMethod: 'floor', nearestTo: 8 })\n * //=> Thu Jul 10 2014 08:00:00\n */\n\n\nfunction roundToNearestHours(date, options) {\n  const nearestTo = options?.nearestTo ?? 1;\n  if (nearestTo < 1 || nearestTo > 12) return (0, _index2.constructFrom)(date, NaN);\n\n  const _date = (0, _index3.toDate)(date);\n\n  const fractionalMinutes = _date.getMinutes() / 60;\n  const fractionalSeconds = _date.getSeconds() / 60 / 60;\n  const fractionalMilliseconds = _date.getMilliseconds() / 1000 / 60 / 60;\n  const hours = _date.getHours() + fractionalMinutes + fractionalSeconds + fractionalMilliseconds; // Unlike the `differenceIn*` functions, the default rounding behavior is `round` and not 'trunc'\n\n  const method = options?.roundingMethod ?? \"round\";\n  const roundingMethod = (0, _index.getRoundingMethod)(method); // nearestTo option does not care daylight savings time\n\n  const roundedHours = roundingMethod(hours / nearestTo) * nearestTo;\n  const result = (0, _index2.constructFrom)(date, _date);\n  result.setHours(roundedHours, 0, 0, 0);\n  return result;\n}","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/node_modules/date-fns/roundToNearestHours.js"],"names":["exports","roundToNearestHours","_index","require","_index2","_index3","date","options","nearestTo","constructFrom","NaN","_date","toDate","fractionalMinutes","getMinutes","fractionalSeconds","getSeconds","fractionalMilliseconds","getMilliseconds","hours","getHours","method","roundingMethod","getRoundingMethod","roundedHours","result","setHours"],"mappings":"AAAA;;AACAA,OAAO,CAACC,mBAAR,GAA8BA,mBAA9B;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,6BAAD,CAApB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,oBAAD,CAArB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,aAAD,CAArB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,mBAAT,CAA6BK,IAA7B,EAAmCC,OAAnC,EAA4C;AAC1C,QAAMC,SAAS,GAAGD,OAAO,EAAEC,SAAT,IAAsB,CAAxC;AAEA,MAAIA,SAAS,GAAG,CAAZ,IAAiBA,SAAS,GAAG,EAAjC,EACE,OAAO,CAAC,GAAGJ,OAAO,CAACK,aAAZ,EAA2BH,IAA3B,EAAiCI,GAAjC,CAAP;;AAEF,QAAMC,KAAK,GAAG,CAAC,GAAGN,OAAO,CAACO,MAAZ,EAAoBN,IAApB,CAAd;;AACA,QAAMO,iBAAiB,GAAGF,KAAK,CAACG,UAAN,KAAqB,EAA/C;AACA,QAAMC,iBAAiB,GAAGJ,KAAK,CAACK,UAAN,KAAqB,EAArB,GAA0B,EAApD;AACA,QAAMC,sBAAsB,GAAGN,KAAK,CAACO,eAAN,KAA0B,IAA1B,GAAiC,EAAjC,GAAsC,EAArE;AACA,QAAMC,KAAK,GACTR,KAAK,CAACS,QAAN,KACAP,iBADA,GAEAE,iBAFA,GAGAE,sBAJF,CAV0C,CAgB1C;;AACA,QAAMI,MAAM,GAAGd,OAAO,EAAEe,cAAT,IAA2B,OAA1C;AACA,QAAMA,cAAc,GAAG,CAAC,GAAGpB,MAAM,CAACqB,iBAAX,EAA8BF,MAA9B,CAAvB,CAlB0C,CAoB1C;;AACA,QAAMG,YAAY,GAAGF,cAAc,CAACH,KAAK,GAAGX,SAAT,CAAd,GAAoCA,SAAzD;AAEA,QAAMiB,MAAM,GAAG,CAAC,GAAGrB,OAAO,CAACK,aAAZ,EAA2BH,IAA3B,EAAiCK,KAAjC,CAAf;AACAc,EAAAA,MAAM,CAACC,QAAP,CAAgBF,YAAhB,EAA8B,CAA9B,EAAiC,CAAjC,EAAoC,CAApC;AACA,SAAOC,MAAP;AACD","sourcesContent":["\"use strict\";\nexports.roundToNearestHours = roundToNearestHours;\nvar _index = require(\"./_lib/getRoundingMethod.js\");\nvar _index2 = require(\"./constructFrom.js\");\nvar _index3 = require(\"./toDate.js\");\n\n/**\n * The {@link roundToNearestHours} function options.\n */\n\n/**\n * @name roundToNearestHours\n * @category Hour Helpers\n * @summary Rounds the given date to the nearest hour\n *\n * @description\n * Rounds the given date to the nearest hour (or number of hours).\n * Rounds up when the given date is exactly between the nearest round hours.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to round\n * @param options - An object with options.\n *\n * @returns The new date rounded to the closest hour\n *\n * @example\n * // Round 10 July 2014 12:34:56 to nearest hour:\n * const result = roundToNearestHours(new Date(2014, 6, 10, 12, 34, 56))\n * //=> Thu Jul 10 2014 13:00:00\n *\n * @example\n * // Round 10 July 2014 12:34:56 to nearest half hour:\n * const result = roundToNearestHours(new Date(2014, 6, 10, 12, 34, 56), { nearestTo: 6 })\n * //=> Thu Jul 10 2014 12:00:00\n\n * @example\n * // Round 10 July 2014 12:34:56 to nearest half hour:\n * const result = roundToNearestHours(new Date(2014, 6, 10, 12, 34, 56), { nearestTo: 8 })\n * //=> Thu Jul 10 2014 16:00:00\n\n* @example\n * // Floor (rounds down) 10 July 2014 12:34:56 to nearest hour:\n * const result = roundToNearestHours(new Date(2014, 6, 10, 1, 23, 45), { roundingMethod: 'ceil' })\n * //=> Thu Jul 10 2014 02:00:00\n *\n * @example\n * // Ceil (rounds up) 10 July 2014 12:34:56 to nearest quarter hour:\n * const result = roundToNearestHours(new Date(2014, 6, 10, 12, 34, 56), { roundingMethod: 'floor', nearestTo: 8 })\n * //=> Thu Jul 10 2014 08:00:00\n */\nfunction roundToNearestHours(date, options) {\n  const nearestTo = options?.nearestTo ?? 1;\n\n  if (nearestTo < 1 || nearestTo > 12)\n    return (0, _index2.constructFrom)(date, NaN);\n\n  const _date = (0, _index3.toDate)(date);\n  const fractionalMinutes = _date.getMinutes() / 60;\n  const fractionalSeconds = _date.getSeconds() / 60 / 60;\n  const fractionalMilliseconds = _date.getMilliseconds() / 1000 / 60 / 60;\n  const hours =\n    _date.getHours() +\n    fractionalMinutes +\n    fractionalSeconds +\n    fractionalMilliseconds;\n\n  // Unlike the `differenceIn*` functions, the default rounding behavior is `round` and not 'trunc'\n  const method = options?.roundingMethod ?? \"round\";\n  const roundingMethod = (0, _index.getRoundingMethod)(method);\n\n  // nearestTo option does not care daylight savings time\n  const roundedHours = roundingMethod(hours / nearestTo) * nearestTo;\n\n  const result = (0, _index2.constructFrom)(date, _date);\n  result.setHours(roundedHours, 0, 0, 0);\n  return result;\n}\n"]},"metadata":{},"sourceType":"script"}