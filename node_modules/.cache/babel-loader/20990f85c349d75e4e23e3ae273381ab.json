{"ast":null,"code":"\"use strict\";\n\nexports.roundToNearestMinutes = roundToNearestMinutes;\n\nvar _index = require(\"./_lib/getRoundingMethod.js\");\n\nvar _index2 = require(\"./constructFrom.js\");\n\nvar _index3 = require(\"./toDate.js\");\n/**\n * The {@link roundToNearestMinutes} function options.\n */\n\n/**\n * @name roundToNearestMinutes\n * @category Minute Helpers\n * @summary Rounds the given date to the nearest minute\n *\n * @description\n * Rounds the given date to the nearest minute (or number of minutes).\n * Rounds up when the given date is exactly between the nearest round minutes.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to round\n * @param options - An object with options.\n *\n * @returns The new date rounded to the closest minute\n *\n * @example\n * // Round 10 July 2014 12:12:34 to nearest minute:\n * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34))\n * //=> Thu Jul 10 2014 12:13:00\n *\n * @example\n * // Round 10 July 2014 12:12:34 to nearest quarter hour:\n * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34), { nearestTo: 15 })\n * //=> Thu Jul 10 2014 12:15:00\n *\n * @example\n * // Floor (rounds down) 10 July 2014 12:12:34 to nearest minute:\n * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34), { roundingMethod: 'floor' })\n * //=> Thu Jul 10 2014 12:12:00\n *\n * @example\n * // Ceil (rounds up) 10 July 2014 12:12:34 to nearest half hour:\n * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34), { roundingMethod: 'ceil', nearestTo: 30 })\n * //=> Thu Jul 10 2014 12:30:00\n */\n\n\nfunction roundToNearestMinutes(date, options) {\n  const nearestTo = options?.nearestTo ?? 1;\n  if (nearestTo < 1 || nearestTo > 30) return (0, _index2.constructFrom)(date, NaN);\n\n  const _date = (0, _index3.toDate)(date);\n\n  const fractionalSeconds = _date.getSeconds() / 60;\n  const fractionalMilliseconds = _date.getMilliseconds() / 1000 / 60;\n  const minutes = _date.getMinutes() + fractionalSeconds + fractionalMilliseconds; // Unlike the `differenceIn*` functions, the default rounding behavior is `round` and not 'trunc'\n\n  const method = options?.roundingMethod ?? \"round\";\n  const roundingMethod = (0, _index.getRoundingMethod)(method);\n  const roundedMinutes = roundingMethod(minutes / nearestTo) * nearestTo;\n  const result = (0, _index2.constructFrom)(date, _date);\n  result.setMinutes(roundedMinutes, 0, 0);\n  return result;\n}","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/node_modules/date-fns/roundToNearestMinutes.js"],"names":["exports","roundToNearestMinutes","_index","require","_index2","_index3","date","options","nearestTo","constructFrom","NaN","_date","toDate","fractionalSeconds","getSeconds","fractionalMilliseconds","getMilliseconds","minutes","getMinutes","method","roundingMethod","getRoundingMethod","roundedMinutes","result","setMinutes"],"mappings":"AAAA;;AACAA,OAAO,CAACC,qBAAR,GAAgCA,qBAAhC;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,6BAAD,CAApB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,oBAAD,CAArB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,aAAD,CAArB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,qBAAT,CAA+BK,IAA/B,EAAqCC,OAArC,EAA8C;AAC5C,QAAMC,SAAS,GAAGD,OAAO,EAAEC,SAAT,IAAsB,CAAxC;AAEA,MAAIA,SAAS,GAAG,CAAZ,IAAiBA,SAAS,GAAG,EAAjC,EACE,OAAO,CAAC,GAAGJ,OAAO,CAACK,aAAZ,EAA2BH,IAA3B,EAAiCI,GAAjC,CAAP;;AAEF,QAAMC,KAAK,GAAG,CAAC,GAAGN,OAAO,CAACO,MAAZ,EAAoBN,IAApB,CAAd;;AACA,QAAMO,iBAAiB,GAAGF,KAAK,CAACG,UAAN,KAAqB,EAA/C;AACA,QAAMC,sBAAsB,GAAGJ,KAAK,CAACK,eAAN,KAA0B,IAA1B,GAAiC,EAAhE;AACA,QAAMC,OAAO,GACXN,KAAK,CAACO,UAAN,KAAqBL,iBAArB,GAAyCE,sBAD3C,CAT4C,CAY5C;;AACA,QAAMI,MAAM,GAAGZ,OAAO,EAAEa,cAAT,IAA2B,OAA1C;AACA,QAAMA,cAAc,GAAG,CAAC,GAAGlB,MAAM,CAACmB,iBAAX,EAA8BF,MAA9B,CAAvB;AAEA,QAAMG,cAAc,GAAGF,cAAc,CAACH,OAAO,GAAGT,SAAX,CAAd,GAAsCA,SAA7D;AAEA,QAAMe,MAAM,GAAG,CAAC,GAAGnB,OAAO,CAACK,aAAZ,EAA2BH,IAA3B,EAAiCK,KAAjC,CAAf;AACAY,EAAAA,MAAM,CAACC,UAAP,CAAkBF,cAAlB,EAAkC,CAAlC,EAAqC,CAArC;AACA,SAAOC,MAAP;AACD","sourcesContent":["\"use strict\";\nexports.roundToNearestMinutes = roundToNearestMinutes;\nvar _index = require(\"./_lib/getRoundingMethod.js\");\nvar _index2 = require(\"./constructFrom.js\");\nvar _index3 = require(\"./toDate.js\");\n\n/**\n * The {@link roundToNearestMinutes} function options.\n */\n\n/**\n * @name roundToNearestMinutes\n * @category Minute Helpers\n * @summary Rounds the given date to the nearest minute\n *\n * @description\n * Rounds the given date to the nearest minute (or number of minutes).\n * Rounds up when the given date is exactly between the nearest round minutes.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to round\n * @param options - An object with options.\n *\n * @returns The new date rounded to the closest minute\n *\n * @example\n * // Round 10 July 2014 12:12:34 to nearest minute:\n * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34))\n * //=> Thu Jul 10 2014 12:13:00\n *\n * @example\n * // Round 10 July 2014 12:12:34 to nearest quarter hour:\n * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34), { nearestTo: 15 })\n * //=> Thu Jul 10 2014 12:15:00\n *\n * @example\n * // Floor (rounds down) 10 July 2014 12:12:34 to nearest minute:\n * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34), { roundingMethod: 'floor' })\n * //=> Thu Jul 10 2014 12:12:00\n *\n * @example\n * // Ceil (rounds up) 10 July 2014 12:12:34 to nearest half hour:\n * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34), { roundingMethod: 'ceil', nearestTo: 30 })\n * //=> Thu Jul 10 2014 12:30:00\n */\nfunction roundToNearestMinutes(date, options) {\n  const nearestTo = options?.nearestTo ?? 1;\n\n  if (nearestTo < 1 || nearestTo > 30)\n    return (0, _index2.constructFrom)(date, NaN);\n\n  const _date = (0, _index3.toDate)(date);\n  const fractionalSeconds = _date.getSeconds() / 60;\n  const fractionalMilliseconds = _date.getMilliseconds() / 1000 / 60;\n  const minutes =\n    _date.getMinutes() + fractionalSeconds + fractionalMilliseconds;\n\n  // Unlike the `differenceIn*` functions, the default rounding behavior is `round` and not 'trunc'\n  const method = options?.roundingMethod ?? \"round\";\n  const roundingMethod = (0, _index.getRoundingMethod)(method);\n\n  const roundedMinutes = roundingMethod(minutes / nearestTo) * nearestTo;\n\n  const result = (0, _index2.constructFrom)(date, _date);\n  result.setMinutes(roundedMinutes, 0, 0);\n  return result;\n}\n"]},"metadata":{},"sourceType":"script"}