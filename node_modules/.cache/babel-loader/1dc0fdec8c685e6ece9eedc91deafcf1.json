{"ast":null,"code":"\"use strict\";\n\nexports.eachWeekOfInterval = eachWeekOfInterval;\n\nvar _index = require(\"./addWeeks.js\");\n\nvar _index2 = require(\"./startOfWeek.js\");\n\nvar _index3 = require(\"./toDate.js\");\n/**\n * The {@link eachWeekOfInterval} function options.\n */\n\n/**\n * @name eachWeekOfInterval\n * @category Interval Helpers\n * @summary Return the array of weeks within the specified time interval.\n *\n * @description\n * Return the array of weeks within the specified time interval.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param interval - The interval.\n * @param options - An object with options.\n *\n * @returns The array with starts of weeks from the week of the interval start to the week of the interval end\n *\n * @example\n * // Each week within interval 6 October 2014 - 23 November 2014:\n * const result = eachWeekOfInterval({\n *   start: new Date(2014, 9, 6),\n *   end: new Date(2014, 10, 23)\n * })\n * //=> [\n * //   Sun Oct 05 2014 00:00:00,\n * //   Sun Oct 12 2014 00:00:00,\n * //   Sun Oct 19 2014 00:00:00,\n * //   Sun Oct 26 2014 00:00:00,\n * //   Sun Nov 02 2014 00:00:00,\n * //   Sun Nov 09 2014 00:00:00,\n * //   Sun Nov 16 2014 00:00:00,\n * //   Sun Nov 23 2014 00:00:00\n * // ]\n */\n\n\nfunction eachWeekOfInterval(interval, options) {\n  const startDate = (0, _index3.toDate)(interval.start);\n  const endDate = (0, _index3.toDate)(interval.end);\n  let reversed = +startDate > +endDate;\n  const startDateWeek = reversed ? (0, _index2.startOfWeek)(endDate, options) : (0, _index2.startOfWeek)(startDate, options);\n  const endDateWeek = reversed ? (0, _index2.startOfWeek)(startDate, options) : (0, _index2.startOfWeek)(endDate, options); // Some timezones switch DST at midnight, making start of day unreliable in these timezones, 3pm is a safe bet\n\n  startDateWeek.setHours(15);\n  endDateWeek.setHours(15);\n  const endTime = +endDateWeek.getTime();\n  let currentDate = startDateWeek;\n  let step = options?.step ?? 1;\n  if (!step) return [];\n\n  if (step < 0) {\n    step = -step;\n    reversed = !reversed;\n  }\n\n  const dates = [];\n\n  while (+currentDate <= endTime) {\n    currentDate.setHours(0);\n    dates.push((0, _index3.toDate)(currentDate));\n    currentDate = (0, _index.addWeeks)(currentDate, step);\n    currentDate.setHours(15);\n  }\n\n  return reversed ? dates.reverse() : dates;\n}","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/node_modules/date-fns/eachWeekOfInterval.js"],"names":["exports","eachWeekOfInterval","_index","require","_index2","_index3","interval","options","startDate","toDate","start","endDate","end","reversed","startDateWeek","startOfWeek","endDateWeek","setHours","endTime","getTime","currentDate","step","dates","push","addWeeks","reverse"],"mappings":"AAAA;;AACAA,OAAO,CAACC,kBAAR,GAA6BA,kBAA7B;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,eAAD,CAApB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,kBAAD,CAArB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,aAAD,CAArB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,kBAAT,CAA4BK,QAA5B,EAAsCC,OAAtC,EAA+C;AAC7C,QAAMC,SAAS,GAAG,CAAC,GAAGH,OAAO,CAACI,MAAZ,EAAoBH,QAAQ,CAACI,KAA7B,CAAlB;AACA,QAAMC,OAAO,GAAG,CAAC,GAAGN,OAAO,CAACI,MAAZ,EAAoBH,QAAQ,CAACM,GAA7B,CAAhB;AAEA,MAAIC,QAAQ,GAAG,CAACL,SAAD,GAAa,CAACG,OAA7B;AACA,QAAMG,aAAa,GAAGD,QAAQ,GAC1B,CAAC,GAAGT,OAAO,CAACW,WAAZ,EAAyBJ,OAAzB,EAAkCJ,OAAlC,CAD0B,GAE1B,CAAC,GAAGH,OAAO,CAACW,WAAZ,EAAyBP,SAAzB,EAAoCD,OAApC,CAFJ;AAGA,QAAMS,WAAW,GAAGH,QAAQ,GACxB,CAAC,GAAGT,OAAO,CAACW,WAAZ,EAAyBP,SAAzB,EAAoCD,OAApC,CADwB,GAExB,CAAC,GAAGH,OAAO,CAACW,WAAZ,EAAyBJ,OAAzB,EAAkCJ,OAAlC,CAFJ,CAR6C,CAY7C;;AACAO,EAAAA,aAAa,CAACG,QAAd,CAAuB,EAAvB;AACAD,EAAAA,WAAW,CAACC,QAAZ,CAAqB,EAArB;AAEA,QAAMC,OAAO,GAAG,CAACF,WAAW,CAACG,OAAZ,EAAjB;AACA,MAAIC,WAAW,GAAGN,aAAlB;AAEA,MAAIO,IAAI,GAAGd,OAAO,EAAEc,IAAT,IAAiB,CAA5B;AACA,MAAI,CAACA,IAAL,EAAW,OAAO,EAAP;;AACX,MAAIA,IAAI,GAAG,CAAX,EAAc;AACZA,IAAAA,IAAI,GAAG,CAACA,IAAR;AACAR,IAAAA,QAAQ,GAAG,CAACA,QAAZ;AACD;;AAED,QAAMS,KAAK,GAAG,EAAd;;AAEA,SAAO,CAACF,WAAD,IAAgBF,OAAvB,EAAgC;AAC9BE,IAAAA,WAAW,CAACH,QAAZ,CAAqB,CAArB;AACAK,IAAAA,KAAK,CAACC,IAAN,CAAW,CAAC,GAAGlB,OAAO,CAACI,MAAZ,EAAoBW,WAApB,CAAX;AACAA,IAAAA,WAAW,GAAG,CAAC,GAAGlB,MAAM,CAACsB,QAAX,EAAqBJ,WAArB,EAAkCC,IAAlC,CAAd;AACAD,IAAAA,WAAW,CAACH,QAAZ,CAAqB,EAArB;AACD;;AAED,SAAOJ,QAAQ,GAAGS,KAAK,CAACG,OAAN,EAAH,GAAqBH,KAApC;AACD","sourcesContent":["\"use strict\";\nexports.eachWeekOfInterval = eachWeekOfInterval;\nvar _index = require(\"./addWeeks.js\");\nvar _index2 = require(\"./startOfWeek.js\");\nvar _index3 = require(\"./toDate.js\");\n\n/**\n * The {@link eachWeekOfInterval} function options.\n */\n\n/**\n * @name eachWeekOfInterval\n * @category Interval Helpers\n * @summary Return the array of weeks within the specified time interval.\n *\n * @description\n * Return the array of weeks within the specified time interval.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param interval - The interval.\n * @param options - An object with options.\n *\n * @returns The array with starts of weeks from the week of the interval start to the week of the interval end\n *\n * @example\n * // Each week within interval 6 October 2014 - 23 November 2014:\n * const result = eachWeekOfInterval({\n *   start: new Date(2014, 9, 6),\n *   end: new Date(2014, 10, 23)\n * })\n * //=> [\n * //   Sun Oct 05 2014 00:00:00,\n * //   Sun Oct 12 2014 00:00:00,\n * //   Sun Oct 19 2014 00:00:00,\n * //   Sun Oct 26 2014 00:00:00,\n * //   Sun Nov 02 2014 00:00:00,\n * //   Sun Nov 09 2014 00:00:00,\n * //   Sun Nov 16 2014 00:00:00,\n * //   Sun Nov 23 2014 00:00:00\n * // ]\n */\nfunction eachWeekOfInterval(interval, options) {\n  const startDate = (0, _index3.toDate)(interval.start);\n  const endDate = (0, _index3.toDate)(interval.end);\n\n  let reversed = +startDate > +endDate;\n  const startDateWeek = reversed\n    ? (0, _index2.startOfWeek)(endDate, options)\n    : (0, _index2.startOfWeek)(startDate, options);\n  const endDateWeek = reversed\n    ? (0, _index2.startOfWeek)(startDate, options)\n    : (0, _index2.startOfWeek)(endDate, options);\n\n  // Some timezones switch DST at midnight, making start of day unreliable in these timezones, 3pm is a safe bet\n  startDateWeek.setHours(15);\n  endDateWeek.setHours(15);\n\n  const endTime = +endDateWeek.getTime();\n  let currentDate = startDateWeek;\n\n  let step = options?.step ?? 1;\n  if (!step) return [];\n  if (step < 0) {\n    step = -step;\n    reversed = !reversed;\n  }\n\n  const dates = [];\n\n  while (+currentDate <= endTime) {\n    currentDate.setHours(0);\n    dates.push((0, _index3.toDate)(currentDate));\n    currentDate = (0, _index.addWeeks)(currentDate, step);\n    currentDate.setHours(15);\n  }\n\n  return reversed ? dates.reverse() : dates;\n}\n"]},"metadata":{},"sourceType":"script"}