{"ast":null,"code":"\"use strict\";\n\nexports.formatRFC3339 = formatRFC3339;\n\nvar _index = require(\"./isValid.js\");\n\nvar _index2 = require(\"./toDate.js\");\n\nvar _index3 = require(\"./_lib/addLeadingZeros.js\");\n/**\n * The {@link formatRFC3339} function options.\n */\n\n/**\n * @name formatRFC3339\n * @category Common Helpers\n * @summary Format the date according to the RFC 3339 standard (https://tools.ietf.org/html/rfc3339#section-5.6).\n *\n * @description\n * Return the formatted date string in RFC 3339 format. Options may be passed to control the parts and notations of the date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param options - An object with options.\n *\n * @returns The formatted date string\n *\n * @throws `date` must not be Invalid Date\n *\n * @example\n * // Represent 18 September 2019 in RFC 3339 format:\n * formatRFC3339(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18T19:00:52Z'\n *\n * @example\n * // Represent 18 September 2019 in RFC 3339 format, 3 digits of second fraction\n * formatRFC3339(new Date(2019, 8, 18, 19, 0, 52, 234), {\n *   fractionDigits: 3\n * })\n * //=> '2019-09-18T19:00:52.234Z'\n */\n\n\nfunction formatRFC3339(date, options) {\n  const _date = (0, _index2.toDate)(date);\n\n  if (!(0, _index.isValid)(_date)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  const fractionDigits = options?.fractionDigits ?? 0;\n  const day = (0, _index3.addLeadingZeros)(_date.getDate(), 2);\n  const month = (0, _index3.addLeadingZeros)(_date.getMonth() + 1, 2);\n\n  const year = _date.getFullYear();\n\n  const hour = (0, _index3.addLeadingZeros)(_date.getHours(), 2);\n  const minute = (0, _index3.addLeadingZeros)(_date.getMinutes(), 2);\n  const second = (0, _index3.addLeadingZeros)(_date.getSeconds(), 2);\n  let fractionalSecond = \"\";\n\n  if (fractionDigits > 0) {\n    const milliseconds = _date.getMilliseconds();\n\n    const fractionalSeconds = Math.trunc(milliseconds * Math.pow(10, fractionDigits - 3));\n    fractionalSecond = \".\" + (0, _index3.addLeadingZeros)(fractionalSeconds, fractionDigits);\n  }\n\n  let offset = \"\";\n\n  const tzOffset = _date.getTimezoneOffset();\n\n  if (tzOffset !== 0) {\n    const absoluteOffset = Math.abs(tzOffset);\n    const hourOffset = (0, _index3.addLeadingZeros)(Math.trunc(absoluteOffset / 60), 2);\n    const minuteOffset = (0, _index3.addLeadingZeros)(absoluteOffset % 60, 2); // If less than 0, the sign is +, because it is ahead of time.\n\n    const sign = tzOffset < 0 ? \"+\" : \"-\";\n    offset = `${sign}${hourOffset}:${minuteOffset}`;\n  } else {\n    offset = \"Z\";\n  }\n\n  return `${year}-${month}-${day}T${hour}:${minute}:${second}${fractionalSecond}${offset}`;\n}","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/node_modules/date-fns/formatRFC3339.js"],"names":["exports","formatRFC3339","_index","require","_index2","_index3","date","options","_date","toDate","isValid","RangeError","fractionDigits","day","addLeadingZeros","getDate","month","getMonth","year","getFullYear","hour","getHours","minute","getMinutes","second","getSeconds","fractionalSecond","milliseconds","getMilliseconds","fractionalSeconds","Math","trunc","pow","offset","tzOffset","getTimezoneOffset","absoluteOffset","abs","hourOffset","minuteOffset","sign"],"mappings":"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","sourcesContent":["\"use strict\";\nexports.formatRFC3339 = formatRFC3339;\nvar _index = require(\"./isValid.js\");\nvar _index2 = require(\"./toDate.js\");\nvar _index3 = require(\"./_lib/addLeadingZeros.js\");\n\n/**\n * The {@link formatRFC3339} function options.\n */\n\n/**\n * @name formatRFC3339\n * @category Common Helpers\n * @summary Format the date according to the RFC 3339 standard (https://tools.ietf.org/html/rfc3339#section-5.6).\n *\n * @description\n * Return the formatted date string in RFC 3339 format. Options may be passed to control the parts and notations of the date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param options - An object with options.\n *\n * @returns The formatted date string\n *\n * @throws `date` must not be Invalid Date\n *\n * @example\n * // Represent 18 September 2019 in RFC 3339 format:\n * formatRFC3339(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18T19:00:52Z'\n *\n * @example\n * // Represent 18 September 2019 in RFC 3339 format, 3 digits of second fraction\n * formatRFC3339(new Date(2019, 8, 18, 19, 0, 52, 234), {\n *   fractionDigits: 3\n * })\n * //=> '2019-09-18T19:00:52.234Z'\n */\nfunction formatRFC3339(date, options) {\n  const _date = (0, _index2.toDate)(date);\n\n  if (!(0, _index.isValid)(_date)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  const fractionDigits = options?.fractionDigits ?? 0;\n\n  const day = (0, _index3.addLeadingZeros)(_date.getDate(), 2);\n  const month = (0, _index3.addLeadingZeros)(_date.getMonth() + 1, 2);\n  const year = _date.getFullYear();\n\n  const hour = (0, _index3.addLeadingZeros)(_date.getHours(), 2);\n  const minute = (0, _index3.addLeadingZeros)(_date.getMinutes(), 2);\n  const second = (0, _index3.addLeadingZeros)(_date.getSeconds(), 2);\n\n  let fractionalSecond = \"\";\n  if (fractionDigits > 0) {\n    const milliseconds = _date.getMilliseconds();\n    const fractionalSeconds = Math.trunc(\n      milliseconds * Math.pow(10, fractionDigits - 3),\n    );\n    fractionalSecond =\n      \".\" + (0, _index3.addLeadingZeros)(fractionalSeconds, fractionDigits);\n  }\n\n  let offset = \"\";\n  const tzOffset = _date.getTimezoneOffset();\n\n  if (tzOffset !== 0) {\n    const absoluteOffset = Math.abs(tzOffset);\n    const hourOffset = (0, _index3.addLeadingZeros)(\n      Math.trunc(absoluteOffset / 60),\n      2,\n    );\n    const minuteOffset = (0, _index3.addLeadingZeros)(absoluteOffset % 60, 2);\n    // If less than 0, the sign is +, because it is ahead of time.\n    const sign = tzOffset < 0 ? \"+\" : \"-\";\n\n    offset = `${sign}${hourOffset}:${minuteOffset}`;\n  } else {\n    offset = \"Z\";\n  }\n\n  return `${year}-${month}-${day}T${hour}:${minute}:${second}${fractionalSecond}${offset}`;\n}\n"]},"metadata":{},"sourceType":"script"}