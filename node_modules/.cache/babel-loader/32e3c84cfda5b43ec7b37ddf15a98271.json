{"ast":null,"code":"\"use strict\";\n\nexports.TimestampSecondsParser = void 0;\n\nvar _index = require(\"../../../constructFrom.js\");\n\nvar _Parser = require(\"../Parser.js\");\n\nvar _utils = require(\"../utils.js\");\n\nclass TimestampSecondsParser extends _Parser.Parser {\n  priority = 40;\n\n  parse(dateString) {\n    return (0, _utils.parseAnyDigitsSigned)(dateString);\n  }\n\n  set(date, _flags, value) {\n    return [(0, _index.constructFrom)(date, value * 1000), {\n      timestampIsSet: true\n    }];\n  }\n\n  incompatibleTokens = \"*\";\n}\n\nexports.TimestampSecondsParser = TimestampSecondsParser;","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/node_modules/date-fns/parse/_lib/parsers/TimestampSecondsParser.js"],"names":["exports","TimestampSecondsParser","_index","require","_Parser","_utils","Parser","priority","parse","dateString","parseAnyDigitsSigned","set","date","_flags","value","constructFrom","timestampIsSet","incompatibleTokens"],"mappings":"AAAA;;AACAA,OAAO,CAACC,sBAAR,GAAiC,KAAK,CAAtC;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,2BAAD,CAApB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,cAAD,CAArB;;AAEA,IAAIE,MAAM,GAAGF,OAAO,CAAC,aAAD,CAApB;;AAEA,MAAMF,sBAAN,SAAqCG,OAAO,CAACE,MAA7C,CAAoD;AAClDC,EAAAA,QAAQ,GAAG,EAAH;;AAERC,EAAAA,KAAK,CAACC,UAAD,EAAa;AAChB,WAAO,CAAC,GAAGJ,MAAM,CAACK,oBAAX,EAAiCD,UAAjC,CAAP;AACD;;AAEDE,EAAAA,GAAG,CAACC,IAAD,EAAOC,MAAP,EAAeC,KAAf,EAAsB;AACvB,WAAO,CACL,CAAC,GAAGZ,MAAM,CAACa,aAAX,EAA0BH,IAA1B,EAAgCE,KAAK,GAAG,IAAxC,CADK,EAEL;AAAEE,MAAAA,cAAc,EAAE;AAAlB,KAFK,CAAP;AAID;;AAEDC,EAAAA,kBAAkB,GAAG,GAAH;AAdgC;;AAgBpDjB,OAAO,CAACC,sBAAR,GAAiCA,sBAAjC","sourcesContent":["\"use strict\";\nexports.TimestampSecondsParser = void 0;\nvar _index = require(\"../../../constructFrom.js\");\nvar _Parser = require(\"../Parser.js\");\n\nvar _utils = require(\"../utils.js\");\n\nclass TimestampSecondsParser extends _Parser.Parser {\n  priority = 40;\n\n  parse(dateString) {\n    return (0, _utils.parseAnyDigitsSigned)(dateString);\n  }\n\n  set(date, _flags, value) {\n    return [\n      (0, _index.constructFrom)(date, value * 1000),\n      { timestampIsSet: true },\n    ];\n  }\n\n  incompatibleTokens = \"*\";\n}\nexports.TimestampSecondsParser = TimestampSecondsParser;\n"]},"metadata":{},"sourceType":"script"}