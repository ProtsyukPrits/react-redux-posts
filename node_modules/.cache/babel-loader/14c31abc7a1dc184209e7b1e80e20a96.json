{"ast":null,"code":"\"use strict\";\n\nexports.dayPeriodEnumToHours = dayPeriodEnumToHours;\nexports.isLeapYearIndex = isLeapYearIndex;\nexports.mapValue = mapValue;\nexports.normalizeTwoDigitYear = normalizeTwoDigitYear;\nexports.parseAnyDigitsSigned = parseAnyDigitsSigned;\nexports.parseNDigits = parseNDigits;\nexports.parseNDigitsSigned = parseNDigitsSigned;\nexports.parseNumericPattern = parseNumericPattern;\nexports.parseTimezonePattern = parseTimezonePattern;\n\nvar _index = require(\"../../constants.js\");\n\nvar _constants = require(\"./constants.js\");\n\nfunction mapValue(parseFnResult, mapFn) {\n  if (!parseFnResult) {\n    return parseFnResult;\n  }\n\n  return {\n    value: mapFn(parseFnResult.value),\n    rest: parseFnResult.rest\n  };\n}\n\nfunction parseNumericPattern(pattern, dateString) {\n  const matchResult = dateString.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  }\n\n  return {\n    value: parseInt(matchResult[0], 10),\n    rest: dateString.slice(matchResult[0].length)\n  };\n}\n\nfunction parseTimezonePattern(pattern, dateString) {\n  const matchResult = dateString.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  } // Input is 'Z'\n\n\n  if (matchResult[0] === \"Z\") {\n    return {\n      value: 0,\n      rest: dateString.slice(1)\n    };\n  }\n\n  const sign = matchResult[1] === \"+\" ? 1 : -1;\n  const hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;\n  const minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;\n  const seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;\n  return {\n    value: sign * (hours * _index.millisecondsInHour + minutes * _index.millisecondsInMinute + seconds * _index.millisecondsInSecond),\n    rest: dateString.slice(matchResult[0].length)\n  };\n}\n\nfunction parseAnyDigitsSigned(dateString) {\n  return parseNumericPattern(_constants.numericPatterns.anyDigitsSigned, dateString);\n}\n\nfunction parseNDigits(n, dateString) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(_constants.numericPatterns.singleDigit, dateString);\n\n    case 2:\n      return parseNumericPattern(_constants.numericPatterns.twoDigits, dateString);\n\n    case 3:\n      return parseNumericPattern(_constants.numericPatterns.threeDigits, dateString);\n\n    case 4:\n      return parseNumericPattern(_constants.numericPatterns.fourDigits, dateString);\n\n    default:\n      return parseNumericPattern(new RegExp(\"^\\\\d{1,\" + n + \"}\"), dateString);\n  }\n}\n\nfunction parseNDigitsSigned(n, dateString) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(_constants.numericPatterns.singleDigitSigned, dateString);\n\n    case 2:\n      return parseNumericPattern(_constants.numericPatterns.twoDigitsSigned, dateString);\n\n    case 3:\n      return parseNumericPattern(_constants.numericPatterns.threeDigitsSigned, dateString);\n\n    case 4:\n      return parseNumericPattern(_constants.numericPatterns.fourDigitsSigned, dateString);\n\n    default:\n      return parseNumericPattern(new RegExp(\"^-?\\\\d{1,\" + n + \"}\"), dateString);\n  }\n}\n\nfunction dayPeriodEnumToHours(dayPeriod) {\n  switch (dayPeriod) {\n    case \"morning\":\n      return 4;\n\n    case \"evening\":\n      return 17;\n\n    case \"pm\":\n    case \"noon\":\n    case \"afternoon\":\n      return 12;\n\n    case \"am\":\n    case \"midnight\":\n    case \"night\":\n    default:\n      return 0;\n  }\n}\n\nfunction normalizeTwoDigitYear(twoDigitYear, currentYear) {\n  const isCommonEra = currentYear > 0; // Absolute number of the current year:\n  // 1 -> 1 AC\n  // 0 -> 1 BC\n  // -1 -> 2 BC\n\n  const absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;\n  let result;\n\n  if (absCurrentYear <= 50) {\n    result = twoDigitYear || 100;\n  } else {\n    const rangeEnd = absCurrentYear + 50;\n    const rangeEndCentury = Math.trunc(rangeEnd / 100) * 100;\n    const isPreviousCentury = twoDigitYear >= rangeEnd % 100;\n    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);\n  }\n\n  return isCommonEra ? result : 1 - result;\n}\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;\n}","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/node_modules/date-fns/parse/_lib/utils.js"],"names":["exports","dayPeriodEnumToHours","isLeapYearIndex","mapValue","normalizeTwoDigitYear","parseAnyDigitsSigned","parseNDigits","parseNDigitsSigned","parseNumericPattern","parseTimezonePattern","_index","require","_constants","parseFnResult","mapFn","value","rest","pattern","dateString","matchResult","match","parseInt","slice","length","sign","hours","minutes","seconds","millisecondsInHour","millisecondsInMinute","millisecondsInSecond","numericPatterns","anyDigitsSigned","n","singleDigit","twoDigits","threeDigits","fourDigits","RegExp","singleDigitSigned","twoDigitsSigned","threeDigitsSigned","fourDigitsSigned","dayPeriod","twoDigitYear","currentYear","isCommonEra","absCurrentYear","result","rangeEnd","rangeEndCentury","Math","trunc","isPreviousCentury","year"],"mappings":"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","sourcesContent":["\"use strict\";\nexports.dayPeriodEnumToHours = dayPeriodEnumToHours;\nexports.isLeapYearIndex = isLeapYearIndex;\nexports.mapValue = mapValue;\nexports.normalizeTwoDigitYear = normalizeTwoDigitYear;\nexports.parseAnyDigitsSigned = parseAnyDigitsSigned;\nexports.parseNDigits = parseNDigits;\nexports.parseNDigitsSigned = parseNDigitsSigned;\nexports.parseNumericPattern = parseNumericPattern;\nexports.parseTimezonePattern = parseTimezonePattern;\nvar _index = require(\"../../constants.js\");\n\nvar _constants = require(\"./constants.js\");\n\nfunction mapValue(parseFnResult, mapFn) {\n  if (!parseFnResult) {\n    return parseFnResult;\n  }\n\n  return {\n    value: mapFn(parseFnResult.value),\n    rest: parseFnResult.rest,\n  };\n}\n\nfunction parseNumericPattern(pattern, dateString) {\n  const matchResult = dateString.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  }\n\n  return {\n    value: parseInt(matchResult[0], 10),\n    rest: dateString.slice(matchResult[0].length),\n  };\n}\n\nfunction parseTimezonePattern(pattern, dateString) {\n  const matchResult = dateString.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  }\n\n  // Input is 'Z'\n  if (matchResult[0] === \"Z\") {\n    return {\n      value: 0,\n      rest: dateString.slice(1),\n    };\n  }\n\n  const sign = matchResult[1] === \"+\" ? 1 : -1;\n  const hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;\n  const minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;\n  const seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;\n\n  return {\n    value:\n      sign *\n      (hours * _index.millisecondsInHour +\n        minutes * _index.millisecondsInMinute +\n        seconds * _index.millisecondsInSecond),\n    rest: dateString.slice(matchResult[0].length),\n  };\n}\n\nfunction parseAnyDigitsSigned(dateString) {\n  return parseNumericPattern(\n    _constants.numericPatterns.anyDigitsSigned,\n    dateString,\n  );\n}\n\nfunction parseNDigits(n, dateString) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(\n        _constants.numericPatterns.singleDigit,\n        dateString,\n      );\n    case 2:\n      return parseNumericPattern(\n        _constants.numericPatterns.twoDigits,\n        dateString,\n      );\n    case 3:\n      return parseNumericPattern(\n        _constants.numericPatterns.threeDigits,\n        dateString,\n      );\n    case 4:\n      return parseNumericPattern(\n        _constants.numericPatterns.fourDigits,\n        dateString,\n      );\n    default:\n      return parseNumericPattern(new RegExp(\"^\\\\d{1,\" + n + \"}\"), dateString);\n  }\n}\n\nfunction parseNDigitsSigned(n, dateString) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(\n        _constants.numericPatterns.singleDigitSigned,\n        dateString,\n      );\n    case 2:\n      return parseNumericPattern(\n        _constants.numericPatterns.twoDigitsSigned,\n        dateString,\n      );\n    case 3:\n      return parseNumericPattern(\n        _constants.numericPatterns.threeDigitsSigned,\n        dateString,\n      );\n    case 4:\n      return parseNumericPattern(\n        _constants.numericPatterns.fourDigitsSigned,\n        dateString,\n      );\n    default:\n      return parseNumericPattern(new RegExp(\"^-?\\\\d{1,\" + n + \"}\"), dateString);\n  }\n}\n\nfunction dayPeriodEnumToHours(dayPeriod) {\n  switch (dayPeriod) {\n    case \"morning\":\n      return 4;\n    case \"evening\":\n      return 17;\n    case \"pm\":\n    case \"noon\":\n    case \"afternoon\":\n      return 12;\n    case \"am\":\n    case \"midnight\":\n    case \"night\":\n    default:\n      return 0;\n  }\n}\n\nfunction normalizeTwoDigitYear(twoDigitYear, currentYear) {\n  const isCommonEra = currentYear > 0;\n  // Absolute number of the current year:\n  // 1 -> 1 AC\n  // 0 -> 1 BC\n  // -1 -> 2 BC\n  const absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;\n\n  let result;\n  if (absCurrentYear <= 50) {\n    result = twoDigitYear || 100;\n  } else {\n    const rangeEnd = absCurrentYear + 50;\n    const rangeEndCentury = Math.trunc(rangeEnd / 100) * 100;\n    const isPreviousCentury = twoDigitYear >= rangeEnd % 100;\n    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);\n  }\n\n  return isCommonEra ? result : 1 - result;\n}\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\n}\n"]},"metadata":{},"sourceType":"script"}