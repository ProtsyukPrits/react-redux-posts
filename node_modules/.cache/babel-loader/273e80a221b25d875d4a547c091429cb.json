{"ast":null,"code":"import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport Notiflix from 'notiflix';\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com/';\n\nconst setAuthHeader = token => {\n  axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n};\n\nconst clearAuthHeader = () => {\n  axios.defaults.headers.common.Authorization = '';\n};\n\nexport const register = createAsyncThunk('auth/register', async credentials => {\n  try {\n    const res = await axios.post('/users/signup', credentials);\n    setAuthHeader(res.data.token);\n    return res.data;\n  } catch (error) {\n    return Notiflix.Notify.info('We have some error, please try again. Maybe you need correct  you email ;)');\n  }\n}); //\n\nexport const logIn = createAsyncThunk('auth/login', async credentials => {\n  try {\n    const res = await axios.post('/users/login', credentials);\n    setAuthHeader(res.data.token);\n    return res.data;\n  } catch (error) {\n    return Notiflix.Notify.info('We have some error, please try again!!!');\n  }\n}); //\n\nexport const logOut = createAsyncThunk('auth/logout', async (_, thunkAPI) => {\n  try {\n    clearAuthHeader();\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.message);\n  }\n}); //\n\nexport const refresh = createAsyncThunk('auth/refresh', async (_, thunkAPI) => {\n  const state = thunkAPI.getState();\n  const persistedToken = state.auth.token;\n\n  if (persistedToken === null) {\n    return thunkAPI.rejectWithValue('Unable to fetch user');\n  }\n\n  try {\n    setAuthHeader(persistedToken);\n    const res = await axios.get('/users/current');\n    return res.data;\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.message);\n  }\n});","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/src/redux/auth/operations.js"],"names":["createAsyncThunk","axios","Notiflix","defaults","baseURL","setAuthHeader","token","headers","common","Authorization","clearAuthHeader","register","credentials","res","post","data","error","Notify","info","logIn","logOut","_","thunkAPI","rejectWithValue","message","refresh","state","getState","persistedToken","auth","get"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,kBAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,UAArB;AAGAD,KAAK,CAACE,QAAN,CAAeC,OAAf,GAAyB,wCAAzB;;AAEC,MAAMC,aAAa,GAAGC,KAAK,IAAI;AAC9BL,EAAAA,KAAK,CAACE,QAAN,CAAeI,OAAf,CAAuBC,MAAvB,CAA8BC,aAA9B,GAA+C,UAASH,KAAM,EAA9D;AACD,CAFA;;AAIA,MAAMI,eAAe,GAAG,MAAM;AAC7BT,EAAAA,KAAK,CAACE,QAAN,CAAeI,OAAf,CAAuBC,MAAvB,CAA8BC,aAA9B,GAA8C,EAA9C;AACD,CAFA;;AAID,OAAO,MAAME,QAAQ,GAAGX,gBAAgB,CACtC,eADsC,EAEtC,MAAOY,WAAP,IAAuB;AACrB,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMZ,KAAK,CAACa,IAAN,CAAW,eAAX,EAA4BF,WAA5B,CAAlB;AACAP,IAAAA,aAAa,CAACQ,GAAG,CAACE,IAAJ,CAAST,KAAV,CAAb;AACA,WAAOO,GAAG,CAACE,IAAX;AACD,GAJD,CAIE,OAAOC,KAAP,EAAc;AACd,WAAOd,QAAQ,CAACe,MAAT,CAAgBC,IAAhB,CAAqB,4EAArB,CAAP;AACD;AACF,CAVqC,CAAjC,C,CAaP;;AAEA,OAAO,MAAMC,KAAK,GAAGnB,gBAAgB,CACnC,YADmC,EAEnC,MAAOY,WAAP,IAAuB;AACrB,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMZ,KAAK,CAACa,IAAN,CAAW,cAAX,EAA2BF,WAA3B,CAAlB;AACAP,IAAAA,aAAa,CAACQ,GAAG,CAACE,IAAJ,CAAST,KAAV,CAAb;AACA,WAAOO,GAAG,CAACE,IAAX;AACD,GAJD,CAIE,OAAOC,KAAP,EAAc;AACd,WAAOd,QAAQ,CAACe,MAAT,CAAgBC,IAAhB,CAAqB,yCAArB,CAAP;AACD;AACF,CAVkC,CAA9B,C,CAaP;;AAEA,OAAO,MAAME,MAAM,GAAGpB,gBAAgB,CACpC,aADoC,EAEpC,OAAOqB,CAAP,EAAUC,QAAV,KAAuB;AACrB,MAAI;AACFZ,IAAAA,eAAe;AAChB,GAFD,CAEE,OAAOM,KAAP,EAAc;AACd,WAAOM,QAAQ,CAACC,eAAT,CAAyBP,KAAK,CAACQ,OAA/B,CAAP;AACD;AACF,CARmC,CAA/B,C,CAYP;;AAEA,OAAO,MAAMC,OAAO,GAAGzB,gBAAgB,CACrC,cADqC,EAErC,OAAOqB,CAAP,EAAUC,QAAV,KAAuB;AACrB,QAAMI,KAAK,GAAGJ,QAAQ,CAACK,QAAT,EAAd;AACA,QAAMC,cAAc,GAAGF,KAAK,CAACG,IAAN,CAAWvB,KAAlC;;AAEA,MAAIsB,cAAc,KAAK,IAAvB,EAA6B;AAC3B,WAAON,QAAQ,CAACC,eAAT,CAAyB,sBAAzB,CAAP;AACD;;AAED,MAAI;AACFlB,IAAAA,aAAa,CAACuB,cAAD,CAAb;AACA,UAAMf,GAAG,GAAG,MAAMZ,KAAK,CAAC6B,GAAN,CAAU,gBAAV,CAAlB;AACA,WAAOjB,GAAG,CAACE,IAAX;AACD,GAJD,CAIE,OAAOC,KAAP,EAAc;AACd,WAAOM,QAAQ,CAACC,eAAT,CAAyBP,KAAK,CAACQ,OAA/B,CAAP;AACD;AACF,CAjBoC,CAAhC","sourcesContent":["import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport Notiflix from 'notiflix';\n\n\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com/';\n\n const setAuthHeader = token => {\n  axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n};\n\n const clearAuthHeader = () => {\n  axios.defaults.headers.common.Authorization = '';\n} \n\nexport const register = createAsyncThunk(\n  'auth/register',\n  async (credentials) => {\n    try {\n      const res = await axios.post('/users/signup', credentials);\n      setAuthHeader(res.data.token);\n      return res.data;\n    } catch (error) {\n      return Notiflix.Notify.info('We have some error, please try again. Maybe you need correct  you email ;)')\n    }\n  }\n)\n\n//\n\nexport const logIn = createAsyncThunk(\n  'auth/login',\n  async (credentials) => {\n    try {\n      const res = await axios.post('/users/login', credentials);\n      setAuthHeader(res.data.token);\n      return res.data;\n    } catch (error) {\n      return Notiflix.Notify.info('We have some error, please try again!!!');\n    }\n  }\n)\n\n//\n\nexport const logOut = createAsyncThunk(\n  'auth/logout',\n  async (_, thunkAPI) => {\n    try {\n      clearAuthHeader();\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  }\n)\n\n\n//\n\nexport const refresh = createAsyncThunk(\n  'auth/refresh',\n  async (_, thunkAPI) => {\n    const state = thunkAPI.getState();  \n    const persistedToken = state.auth.token;\n\n    if (persistedToken === null) {\n      return thunkAPI.rejectWithValue('Unable to fetch user');\n    }\n\n    try {\n      setAuthHeader(persistedToken);\n      const res = await axios.get('/users/current');\n      return res.data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  }\n)\n"]},"metadata":{},"sourceType":"module"}