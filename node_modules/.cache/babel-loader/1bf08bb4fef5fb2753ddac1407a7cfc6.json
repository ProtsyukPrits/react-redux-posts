{"ast":null,"code":"\"use strict\";\n\nexports.formatRFC7231 = formatRFC7231;\n\nvar _index = require(\"./isValid.js\");\n\nvar _index2 = require(\"./toDate.js\");\n\nvar _index3 = require(\"./_lib/addLeadingZeros.js\");\n\nconst days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\nconst months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n/**\n * @name formatRFC7231\n * @category Common Helpers\n * @summary Format the date according to the RFC 7231 standard (https://tools.ietf.org/html/rfc7231#section-7.1.1.1).\n *\n * @description\n * Return the formatted date string in RFC 7231 format.\n * The result will always be in UTC timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The formatted date string\n *\n * @throws `date` must not be Invalid Date\n *\n * @example\n * // Represent 18 September 2019 in RFC 7231 format:\n * const result = formatRFC7231(new Date(2019, 8, 18, 19, 0, 52))\n * //=> 'Wed, 18 Sep 2019 19:00:52 GMT'\n */\n\nfunction formatRFC7231(date) {\n  const _date = (0, _index2.toDate)(date);\n\n  if (!(0, _index.isValid)(_date)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  const dayName = days[_date.getUTCDay()];\n\n  const dayOfMonth = (0, _index3.addLeadingZeros)(_date.getUTCDate(), 2);\n\n  const monthName = months[_date.getUTCMonth()];\n\n  const year = _date.getUTCFullYear();\n\n  const hour = (0, _index3.addLeadingZeros)(_date.getUTCHours(), 2);\n  const minute = (0, _index3.addLeadingZeros)(_date.getUTCMinutes(), 2);\n  const second = (0, _index3.addLeadingZeros)(_date.getUTCSeconds(), 2); // Result variables.\n\n  return `${dayName}, ${dayOfMonth} ${monthName} ${year} ${hour}:${minute}:${second} GMT`;\n}","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/node_modules/date-fns/formatRFC7231.js"],"names":["exports","formatRFC7231","_index","require","_index2","_index3","days","months","date","_date","toDate","isValid","RangeError","dayName","getUTCDay","dayOfMonth","addLeadingZeros","getUTCDate","monthName","getUTCMonth","year","getUTCFullYear","hour","getUTCHours","minute","getUTCMinutes","second","getUTCSeconds"],"mappings":"AAAA;;AACAA,OAAO,CAACC,aAAR,GAAwBA,aAAxB;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,cAAD,CAApB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,aAAD,CAArB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,2BAAD,CAArB;;AAEA,MAAMG,IAAI,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,CAAb;AAEA,MAAMC,MAAM,GAAG,CACb,KADa,EAEb,KAFa,EAGb,KAHa,EAIb,KAJa,EAKb,KALa,EAMb,KANa,EAOb,KAPa,EAQb,KARa,EASb,KATa,EAUb,KAVa,EAWb,KAXa,EAYb,KAZa,CAAf;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASN,aAAT,CAAuBO,IAAvB,EAA6B;AAC3B,QAAMC,KAAK,GAAG,CAAC,GAAGL,OAAO,CAACM,MAAZ,EAAoBF,IAApB,CAAd;;AAEA,MAAI,CAAC,CAAC,GAAGN,MAAM,CAACS,OAAX,EAAoBF,KAApB,CAAL,EAAiC;AAC/B,UAAM,IAAIG,UAAJ,CAAe,oBAAf,CAAN;AACD;;AAED,QAAMC,OAAO,GAAGP,IAAI,CAACG,KAAK,CAACK,SAAN,EAAD,CAApB;;AACA,QAAMC,UAAU,GAAG,CAAC,GAAGV,OAAO,CAACW,eAAZ,EAA6BP,KAAK,CAACQ,UAAN,EAA7B,EAAiD,CAAjD,CAAnB;;AACA,QAAMC,SAAS,GAAGX,MAAM,CAACE,KAAK,CAACU,WAAN,EAAD,CAAxB;;AACA,QAAMC,IAAI,GAAGX,KAAK,CAACY,cAAN,EAAb;;AAEA,QAAMC,IAAI,GAAG,CAAC,GAAGjB,OAAO,CAACW,eAAZ,EAA6BP,KAAK,CAACc,WAAN,EAA7B,EAAkD,CAAlD,CAAb;AACA,QAAMC,MAAM,GAAG,CAAC,GAAGnB,OAAO,CAACW,eAAZ,EAA6BP,KAAK,CAACgB,aAAN,EAA7B,EAAoD,CAApD,CAAf;AACA,QAAMC,MAAM,GAAG,CAAC,GAAGrB,OAAO,CAACW,eAAZ,EAA6BP,KAAK,CAACkB,aAAN,EAA7B,EAAoD,CAApD,CAAf,CAd2B,CAgB3B;;AACA,SAAQ,GAAEd,OAAQ,KAAIE,UAAW,IAAGG,SAAU,IAAGE,IAAK,IAAGE,IAAK,IAAGE,MAAO,IAAGE,MAAO,MAAlF;AACD","sourcesContent":["\"use strict\";\nexports.formatRFC7231 = formatRFC7231;\nvar _index = require(\"./isValid.js\");\nvar _index2 = require(\"./toDate.js\");\nvar _index3 = require(\"./_lib/addLeadingZeros.js\");\n\nconst days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n\nconst months = [\n  \"Jan\",\n  \"Feb\",\n  \"Mar\",\n  \"Apr\",\n  \"May\",\n  \"Jun\",\n  \"Jul\",\n  \"Aug\",\n  \"Sep\",\n  \"Oct\",\n  \"Nov\",\n  \"Dec\",\n];\n\n/**\n * @name formatRFC7231\n * @category Common Helpers\n * @summary Format the date according to the RFC 7231 standard (https://tools.ietf.org/html/rfc7231#section-7.1.1.1).\n *\n * @description\n * Return the formatted date string in RFC 7231 format.\n * The result will always be in UTC timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The formatted date string\n *\n * @throws `date` must not be Invalid Date\n *\n * @example\n * // Represent 18 September 2019 in RFC 7231 format:\n * const result = formatRFC7231(new Date(2019, 8, 18, 19, 0, 52))\n * //=> 'Wed, 18 Sep 2019 19:00:52 GMT'\n */\nfunction formatRFC7231(date) {\n  const _date = (0, _index2.toDate)(date);\n\n  if (!(0, _index.isValid)(_date)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  const dayName = days[_date.getUTCDay()];\n  const dayOfMonth = (0, _index3.addLeadingZeros)(_date.getUTCDate(), 2);\n  const monthName = months[_date.getUTCMonth()];\n  const year = _date.getUTCFullYear();\n\n  const hour = (0, _index3.addLeadingZeros)(_date.getUTCHours(), 2);\n  const minute = (0, _index3.addLeadingZeros)(_date.getUTCMinutes(), 2);\n  const second = (0, _index3.addLeadingZeros)(_date.getUTCSeconds(), 2);\n\n  // Result variables.\n  return `${dayName}, ${dayOfMonth} ${monthName} ${year} ${hour}:${minute}:${second} GMT`;\n}\n"]},"metadata":{},"sourceType":"script"}