{"ast":null,"code":"\"use strict\";\n\nexports.StandAloneQuarterParser = void 0;\n\nvar _Parser = require(\"../Parser.js\");\n\nvar _utils = require(\"../utils.js\");\n\nclass StandAloneQuarterParser extends _Parser.Parser {\n  priority = 120;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"q\":\n      case \"qq\":\n        // 01, 02, 03, 04\n        return (0, _utils.parseNDigits)(token.length, dateString);\n      // 1st, 2nd, 3rd, 4th\n\n      case \"qo\":\n        return match.ordinalNumber(dateString, {\n          unit: \"quarter\"\n        });\n      // Q1, Q2, Q3, Q4\n\n      case \"qqq\":\n        return match.quarter(dateString, {\n          width: \"abbreviated\",\n          context: \"standalone\"\n        }) || match.quarter(dateString, {\n          width: \"narrow\",\n          context: \"standalone\"\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case \"qqqqq\":\n        return match.quarter(dateString, {\n          width: \"narrow\",\n          context: \"standalone\"\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case \"qqqq\":\n      default:\n        return match.quarter(dateString, {\n          width: \"wide\",\n          context: \"standalone\"\n        }) || match.quarter(dateString, {\n          width: \"abbreviated\",\n          context: \"standalone\"\n        }) || match.quarter(dateString, {\n          width: \"narrow\",\n          context: \"standalone\"\n        });\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 4;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth((value - 1) * 3, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"Y\", \"R\", \"Q\", \"M\", \"L\", \"w\", \"I\", \"d\", \"D\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n}\n\nexports.StandAloneQuarterParser = StandAloneQuarterParser;","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/node_modules/date-fns/parse/_lib/parsers/StandAloneQuarterParser.js"],"names":["exports","StandAloneQuarterParser","_Parser","require","_utils","Parser","priority","parse","dateString","token","match","parseNDigits","length","ordinalNumber","unit","quarter","width","context","validate","_date","value","set","date","_flags","setMonth","setHours","incompatibleTokens"],"mappings":"AAAA;;AACAA,OAAO,CAACC,uBAAR,GAAkC,KAAK,CAAvC;;AACA,IAAIC,OAAO,GAAGC,OAAO,CAAC,cAAD,CAArB;;AAEA,IAAIC,MAAM,GAAGD,OAAO,CAAC,aAAD,CAApB;;AAEA,MAAMF,uBAAN,SAAsCC,OAAO,CAACG,MAA9C,CAAqD;AACnDC,EAAAA,QAAQ,GAAG,GAAH;;AAERC,EAAAA,KAAK,CAACC,UAAD,EAAaC,KAAb,EAAoBC,KAApB,EAA2B;AAC9B,YAAQD,KAAR;AACE;AACA,WAAK,GAAL;AACA,WAAK,IAAL;AAAW;AACT,eAAO,CAAC,GAAGL,MAAM,CAACO,YAAX,EAAyBF,KAAK,CAACG,MAA/B,EAAuCJ,UAAvC,CAAP;AACF;;AACA,WAAK,IAAL;AACE,eAAOE,KAAK,CAACG,aAAN,CAAoBL,UAApB,EAAgC;AAAEM,UAAAA,IAAI,EAAE;AAAR,SAAhC,CAAP;AACF;;AACA,WAAK,KAAL;AACE,eACEJ,KAAK,CAACK,OAAN,CAAcP,UAAd,EAA0B;AACxBQ,UAAAA,KAAK,EAAE,aADiB;AAExBC,UAAAA,OAAO,EAAE;AAFe,SAA1B,KAIAP,KAAK,CAACK,OAAN,CAAcP,UAAd,EAA0B;AACxBQ,UAAAA,KAAK,EAAE,QADiB;AAExBC,UAAAA,OAAO,EAAE;AAFe,SAA1B,CALF;AAWF;;AACA,WAAK,OAAL;AACE,eAAOP,KAAK,CAACK,OAAN,CAAcP,UAAd,EAA0B;AAC/BQ,UAAAA,KAAK,EAAE,QADwB;AAE/BC,UAAAA,OAAO,EAAE;AAFsB,SAA1B,CAAP;AAIF;;AACA,WAAK,MAAL;AACA;AACE,eACEP,KAAK,CAACK,OAAN,CAAcP,UAAd,EAA0B;AACxBQ,UAAAA,KAAK,EAAE,MADiB;AAExBC,UAAAA,OAAO,EAAE;AAFe,SAA1B,KAIAP,KAAK,CAACK,OAAN,CAAcP,UAAd,EAA0B;AACxBQ,UAAAA,KAAK,EAAE,aADiB;AAExBC,UAAAA,OAAO,EAAE;AAFe,SAA1B,CAJA,IAQAP,KAAK,CAACK,OAAN,CAAcP,UAAd,EAA0B;AACxBQ,UAAAA,KAAK,EAAE,QADiB;AAExBC,UAAAA,OAAO,EAAE;AAFe,SAA1B,CATF;AA9BJ;AA6CD;;AAEDC,EAAAA,QAAQ,CAACC,KAAD,EAAQC,KAAR,EAAe;AACrB,WAAOA,KAAK,IAAI,CAAT,IAAcA,KAAK,IAAI,CAA9B;AACD;;AAEDC,EAAAA,GAAG,CAACC,IAAD,EAAOC,MAAP,EAAeH,KAAf,EAAsB;AACvBE,IAAAA,IAAI,CAACE,QAAL,CAAc,CAACJ,KAAK,GAAG,CAAT,IAAc,CAA5B,EAA+B,CAA/B;AACAE,IAAAA,IAAI,CAACG,QAAL,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB;AACA,WAAOH,IAAP;AACD;;AAEDI,EAAAA,kBAAkB,GAAG,CACnB,GADmB,EAEnB,GAFmB,EAGnB,GAHmB,EAInB,GAJmB,EAKnB,GALmB,EAMnB,GANmB,EAOnB,GAPmB,EAQnB,GARmB,EASnB,GATmB,EAUnB,GAVmB,EAWnB,GAXmB,EAYnB,GAZmB,EAanB,GAbmB,EAcnB,GAdmB,CAAH;AA7DiC;;AA8ErD1B,OAAO,CAACC,uBAAR,GAAkCA,uBAAlC","sourcesContent":["\"use strict\";\nexports.StandAloneQuarterParser = void 0;\nvar _Parser = require(\"../Parser.js\");\n\nvar _utils = require(\"../utils.js\");\n\nclass StandAloneQuarterParser extends _Parser.Parser {\n  priority = 120;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"q\":\n      case \"qq\": // 01, 02, 03, 04\n        return (0, _utils.parseNDigits)(token.length, dateString);\n      // 1st, 2nd, 3rd, 4th\n      case \"qo\":\n        return match.ordinalNumber(dateString, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"qqq\":\n        return (\n          match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"standalone\",\n          })\n        );\n\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"qqqqq\":\n        return match.quarter(dateString, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"qqqq\":\n      default:\n        return (\n          match.quarter(dateString, {\n            width: \"wide\",\n            context: \"standalone\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"standalone\",\n          })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 4;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth((value - 1) * 3, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\nexports.StandAloneQuarterParser = StandAloneQuarterParser;\n"]},"metadata":{},"sourceType":"script"}