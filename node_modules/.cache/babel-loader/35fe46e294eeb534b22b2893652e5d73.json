{"ast":null,"code":"\"use strict\";\n\nexports.differenceInDays = differenceInDays;\n\nvar _index = require(\"./differenceInCalendarDays.js\");\n\nvar _index2 = require(\"./toDate.js\");\n/**\n * @name differenceInDays\n * @category Day Helpers\n * @summary Get the number of full days between the given dates.\n *\n * @description\n * Get the number of full day periods between two dates. Fractional days are\n * truncated towards zero.\n *\n * One \"full day\" is the distance between a local time in one day to the same\n * local time on the next or previous day. A full day can sometimes be less than\n * or more than 24 hours if a daylight savings change happens between two dates.\n *\n * To ignore DST and only measure exact 24-hour periods, use this instead:\n * `Math.trunc(differenceInHours(dateLeft, dateRight)/24)|0`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of full days according to the local timezone\n *\n * @example\n * // How many full days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 365\n *\n * @example\n * // How many full days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 0\n *\n * @example\n * // How many full days are between\n * // 1 March 2020 0:00 and 1 June 2020 0:00 ?\n * // Note: because local time is used, the\n * // result will always be 92 days, even in\n * // time zones where DST starts and the\n * // period has only 92*24-1 hours.\n * const result = differenceInDays(\n *   new Date(2020, 5, 1),\n *   new Date(2020, 2, 1)\n * )\n * //=> 92\n */\n\n\nfunction differenceInDays(dateLeft, dateRight) {\n  const _dateLeft = (0, _index2.toDate)(dateLeft);\n\n  const _dateRight = (0, _index2.toDate)(dateRight);\n\n  const sign = compareLocalAsc(_dateLeft, _dateRight);\n  const difference = Math.abs((0, _index.differenceInCalendarDays)(_dateLeft, _dateRight));\n\n  _dateLeft.setDate(_dateLeft.getDate() - sign * difference); // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full\n  // If so, result must be decreased by 1 in absolute value\n\n\n  const isLastDayNotFull = Number(compareLocalAsc(_dateLeft, _dateRight) === -sign);\n  const result = sign * (difference - isLastDayNotFull); // Prevent negative zero\n\n  return result === 0 ? 0 : result;\n} // Like `compareAsc` but uses local time not UTC, which is needed\n// for accurate equality comparisons of UTC timestamps that end up\n// having the same representation in local time, e.g. one hour before\n// DST ends vs. the instant that DST ends.\n\n\nfunction compareLocalAsc(dateLeft, dateRight) {\n  const diff = dateLeft.getFullYear() - dateRight.getFullYear() || dateLeft.getMonth() - dateRight.getMonth() || dateLeft.getDate() - dateRight.getDate() || dateLeft.getHours() - dateRight.getHours() || dateLeft.getMinutes() - dateRight.getMinutes() || dateLeft.getSeconds() - dateRight.getSeconds() || dateLeft.getMilliseconds() - dateRight.getMilliseconds();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/node_modules/date-fns/differenceInDays.js"],"names":["exports","differenceInDays","_index","require","_index2","dateLeft","dateRight","_dateLeft","toDate","_dateRight","sign","compareLocalAsc","difference","Math","abs","differenceInCalendarDays","setDate","getDate","isLastDayNotFull","Number","result","diff","getFullYear","getMonth","getHours","getMinutes","getSeconds","getMilliseconds"],"mappings":"AAAA;;AACAA,OAAO,CAACC,gBAAR,GAA2BA,gBAA3B;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,+BAAD,CAApB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,aAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,gBAAT,CAA0BI,QAA1B,EAAoCC,SAApC,EAA+C;AAC7C,QAAMC,SAAS,GAAG,CAAC,GAAGH,OAAO,CAACI,MAAZ,EAAoBH,QAApB,CAAlB;;AACA,QAAMI,UAAU,GAAG,CAAC,GAAGL,OAAO,CAACI,MAAZ,EAAoBF,SAApB,CAAnB;;AAEA,QAAMI,IAAI,GAAGC,eAAe,CAACJ,SAAD,EAAYE,UAAZ,CAA5B;AACA,QAAMG,UAAU,GAAGC,IAAI,CAACC,GAAL,CACjB,CAAC,GAAGZ,MAAM,CAACa,wBAAX,EAAqCR,SAArC,EAAgDE,UAAhD,CADiB,CAAnB;;AAIAF,EAAAA,SAAS,CAACS,OAAV,CAAkBT,SAAS,CAACU,OAAV,KAAsBP,IAAI,GAAGE,UAA/C,EAT6C,CAW7C;AACA;;;AACA,QAAMM,gBAAgB,GAAGC,MAAM,CAC7BR,eAAe,CAACJ,SAAD,EAAYE,UAAZ,CAAf,KAA2C,CAACC,IADf,CAA/B;AAGA,QAAMU,MAAM,GAAGV,IAAI,IAAIE,UAAU,GAAGM,gBAAjB,CAAnB,CAhB6C,CAiB7C;;AACA,SAAOE,MAAM,KAAK,CAAX,GAAe,CAAf,GAAmBA,MAA1B;AACD,C,CAED;AACA;AACA;AACA;;;AACA,SAAST,eAAT,CAAyBN,QAAzB,EAAmCC,SAAnC,EAA8C;AAC5C,QAAMe,IAAI,GACRhB,QAAQ,CAACiB,WAAT,KAAyBhB,SAAS,CAACgB,WAAV,EAAzB,IACAjB,QAAQ,CAACkB,QAAT,KAAsBjB,SAAS,CAACiB,QAAV,EADtB,IAEAlB,QAAQ,CAACY,OAAT,KAAqBX,SAAS,CAACW,OAAV,EAFrB,IAGAZ,QAAQ,CAACmB,QAAT,KAAsBlB,SAAS,CAACkB,QAAV,EAHtB,IAIAnB,QAAQ,CAACoB,UAAT,KAAwBnB,SAAS,CAACmB,UAAV,EAJxB,IAKApB,QAAQ,CAACqB,UAAT,KAAwBpB,SAAS,CAACoB,UAAV,EALxB,IAMArB,QAAQ,CAACsB,eAAT,KAA6BrB,SAAS,CAACqB,eAAV,EAP/B;;AASA,MAAIN,IAAI,GAAG,CAAX,EAAc;AACZ,WAAO,CAAC,CAAR;AACD,GAFD,MAEO,IAAIA,IAAI,GAAG,CAAX,EAAc;AACnB,WAAO,CAAP,CADmB,CAEnB;AACD,GAHM,MAGA;AACL,WAAOA,IAAP;AACD;AACF","sourcesContent":["\"use strict\";\nexports.differenceInDays = differenceInDays;\nvar _index = require(\"./differenceInCalendarDays.js\");\nvar _index2 = require(\"./toDate.js\");\n\n/**\n * @name differenceInDays\n * @category Day Helpers\n * @summary Get the number of full days between the given dates.\n *\n * @description\n * Get the number of full day periods between two dates. Fractional days are\n * truncated towards zero.\n *\n * One \"full day\" is the distance between a local time in one day to the same\n * local time on the next or previous day. A full day can sometimes be less than\n * or more than 24 hours if a daylight savings change happens between two dates.\n *\n * To ignore DST and only measure exact 24-hour periods, use this instead:\n * `Math.trunc(differenceInHours(dateLeft, dateRight)/24)|0`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of full days according to the local timezone\n *\n * @example\n * // How many full days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 365\n *\n * @example\n * // How many full days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 0\n *\n * @example\n * // How many full days are between\n * // 1 March 2020 0:00 and 1 June 2020 0:00 ?\n * // Note: because local time is used, the\n * // result will always be 92 days, even in\n * // time zones where DST starts and the\n * // period has only 92*24-1 hours.\n * const result = differenceInDays(\n *   new Date(2020, 5, 1),\n *   new Date(2020, 2, 1)\n * )\n * //=> 92\n */\nfunction differenceInDays(dateLeft, dateRight) {\n  const _dateLeft = (0, _index2.toDate)(dateLeft);\n  const _dateRight = (0, _index2.toDate)(dateRight);\n\n  const sign = compareLocalAsc(_dateLeft, _dateRight);\n  const difference = Math.abs(\n    (0, _index.differenceInCalendarDays)(_dateLeft, _dateRight),\n  );\n\n  _dateLeft.setDate(_dateLeft.getDate() - sign * difference);\n\n  // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full\n  // If so, result must be decreased by 1 in absolute value\n  const isLastDayNotFull = Number(\n    compareLocalAsc(_dateLeft, _dateRight) === -sign,\n  );\n  const result = sign * (difference - isLastDayNotFull);\n  // Prevent negative zero\n  return result === 0 ? 0 : result;\n}\n\n// Like `compareAsc` but uses local time not UTC, which is needed\n// for accurate equality comparisons of UTC timestamps that end up\n// having the same representation in local time, e.g. one hour before\n// DST ends vs. the instant that DST ends.\nfunction compareLocalAsc(dateLeft, dateRight) {\n  const diff =\n    dateLeft.getFullYear() - dateRight.getFullYear() ||\n    dateLeft.getMonth() - dateRight.getMonth() ||\n    dateLeft.getDate() - dateRight.getDate() ||\n    dateLeft.getHours() - dateRight.getHours() ||\n    dateLeft.getMinutes() - dateRight.getMinutes() ||\n    dateLeft.getSeconds() - dateRight.getSeconds() ||\n    dateLeft.getMilliseconds() - dateRight.getMilliseconds();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1;\n    // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}