{"ast":null,"code":"\"use strict\";\n\nexports.getWeekOfMonth = getWeekOfMonth;\n\nvar _index = require(\"./getDate.js\");\n\nvar _index2 = require(\"./getDay.js\");\n\nvar _index3 = require(\"./startOfMonth.js\");\n\nvar _index4 = require(\"./_lib/defaultOptions.js\");\n/**\n * The {@link getWeekOfMonth} function options.\n */\n\n/**\n * @name getWeekOfMonth\n * @category Week Helpers\n * @summary Get the week of the month of the given date.\n *\n * @description\n * Get the week of the month of the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n * @param options - An object with options.\n *\n * @returns The week of month\n *\n * @example\n * // Which week of the month is 9 November 2017?\n * const result = getWeekOfMonth(new Date(2017, 10, 9))\n * //=> 2\n */\n\n\nfunction getWeekOfMonth(date, options) {\n  const defaultOptions = (0, _index4.getDefaultOptions)();\n  const weekStartsOn = options?.weekStartsOn ?? options?.locale?.options?.weekStartsOn ?? defaultOptions.weekStartsOn ?? defaultOptions.locale?.options?.weekStartsOn ?? 0;\n  const currentDayOfMonth = (0, _index.getDate)(date);\n  if (isNaN(currentDayOfMonth)) return NaN;\n  const startWeekDay = (0, _index2.getDay)((0, _index3.startOfMonth)(date));\n  let lastDayOfFirstWeek = weekStartsOn - startWeekDay;\n  if (lastDayOfFirstWeek <= 0) lastDayOfFirstWeek += 7;\n  const remainingDaysAfterFirstWeek = currentDayOfMonth - lastDayOfFirstWeek;\n  return Math.ceil(remainingDaysAfterFirstWeek / 7) + 1;\n}","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/node_modules/date-fns/getWeekOfMonth.js"],"names":["exports","getWeekOfMonth","_index","require","_index2","_index3","_index4","date","options","defaultOptions","getDefaultOptions","weekStartsOn","locale","currentDayOfMonth","getDate","isNaN","NaN","startWeekDay","getDay","startOfMonth","lastDayOfFirstWeek","remainingDaysAfterFirstWeek","Math","ceil"],"mappings":"AAAA;;AACAA,OAAO,CAACC,cAAR,GAAyBA,cAAzB;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,cAAD,CAApB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,aAAD,CAArB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,mBAAD,CAArB;;AAEA,IAAIG,OAAO,GAAGH,OAAO,CAAC,0BAAD,CAArB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,cAAT,CAAwBM,IAAxB,EAA8BC,OAA9B,EAAuC;AACrC,QAAMC,cAAc,GAAG,CAAC,GAAGH,OAAO,CAACI,iBAAZ,GAAvB;AACA,QAAMC,YAAY,GAChBH,OAAO,EAAEG,YAAT,IACAH,OAAO,EAAEI,MAAT,EAAiBJ,OAAjB,EAA0BG,YAD1B,IAEAF,cAAc,CAACE,YAFf,IAGAF,cAAc,CAACG,MAAf,EAAuBJ,OAAvB,EAAgCG,YAHhC,IAIA,CALF;AAOA,QAAME,iBAAiB,GAAG,CAAC,GAAGX,MAAM,CAACY,OAAX,EAAoBP,IAApB,CAA1B;AACA,MAAIQ,KAAK,CAACF,iBAAD,CAAT,EAA8B,OAAOG,GAAP;AAE9B,QAAMC,YAAY,GAAG,CAAC,GAAGb,OAAO,CAACc,MAAZ,EAAoB,CAAC,GAAGb,OAAO,CAACc,YAAZ,EAA0BZ,IAA1B,CAApB,CAArB;AAEA,MAAIa,kBAAkB,GAAGT,YAAY,GAAGM,YAAxC;AACA,MAAIG,kBAAkB,IAAI,CAA1B,EAA6BA,kBAAkB,IAAI,CAAtB;AAE7B,QAAMC,2BAA2B,GAAGR,iBAAiB,GAAGO,kBAAxD;AACA,SAAOE,IAAI,CAACC,IAAL,CAAUF,2BAA2B,GAAG,CAAxC,IAA6C,CAApD;AACD","sourcesContent":["\"use strict\";\nexports.getWeekOfMonth = getWeekOfMonth;\nvar _index = require(\"./getDate.js\");\nvar _index2 = require(\"./getDay.js\");\nvar _index3 = require(\"./startOfMonth.js\");\n\nvar _index4 = require(\"./_lib/defaultOptions.js\");\n\n/**\n * The {@link getWeekOfMonth} function options.\n */\n\n/**\n * @name getWeekOfMonth\n * @category Week Helpers\n * @summary Get the week of the month of the given date.\n *\n * @description\n * Get the week of the month of the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n * @param options - An object with options.\n *\n * @returns The week of month\n *\n * @example\n * // Which week of the month is 9 November 2017?\n * const result = getWeekOfMonth(new Date(2017, 10, 9))\n * //=> 2\n */\nfunction getWeekOfMonth(date, options) {\n  const defaultOptions = (0, _index4.getDefaultOptions)();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const currentDayOfMonth = (0, _index.getDate)(date);\n  if (isNaN(currentDayOfMonth)) return NaN;\n\n  const startWeekDay = (0, _index2.getDay)((0, _index3.startOfMonth)(date));\n\n  let lastDayOfFirstWeek = weekStartsOn - startWeekDay;\n  if (lastDayOfFirstWeek <= 0) lastDayOfFirstWeek += 7;\n\n  const remainingDaysAfterFirstWeek = currentDayOfMonth - lastDayOfFirstWeek;\n  return Math.ceil(remainingDaysAfterFirstWeek / 7) + 1;\n}\n"]},"metadata":{},"sourceType":"script"}