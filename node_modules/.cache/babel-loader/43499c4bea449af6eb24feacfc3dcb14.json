{"ast":null,"code":"import { createSlice, nanoid } from \"@reduxjs/toolkit\";\nimport { sub } from \"date-fns\";\nconst initialState = [{\n  id: \"1\",\n  title: \"Bitcoin\",\n  content: \"Why I didn't buy bitcoin in 2010\",\n  date: sub(new Date(), {\n    minutes: 10\n  }).toISOString(),\n  reactions: {\n    thumbsUp: 0,\n    wow: 0,\n    heart: 0,\n    rocket: 0,\n    coffee: 0\n  }\n}, {\n  id: \"2\",\n  title: \"Love my cat\",\n  content: \"Why do cats poop in slippers and not in the tray?\",\n  date: sub(new Date(), {\n    minutes: 5\n  }).toISOString(),\n  reactions: {\n    thumbsUp: 0,\n    wow: 0,\n    heart: 0,\n    rocket: 0,\n    coffee: 0\n  }\n}];\nconst postsSlice = createSlice({\n  name: \"posts\",\n  initialState,\n  reducers: {\n    postAdded: {\n      reducer(state, action) {\n        state.push(action.payload);\n      },\n\n      prepare(title, content, userId) {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content,\n            date: new Date().toISOString(),\n            userId,\n            reactions: {\n              thumbsUp: 0,\n              wow: 0,\n              heart: 0,\n              rocket: 0,\n              coffee: 0\n            }\n          }\n        };\n      }\n\n    },\n\n    reactionAdded(state, action) {\n      const {\n        postId,\n        reaction\n      } = action.payload;\n      const existingPost = state.find(post => post.id === postId);\n\n      if (existingPost) {\n        existingPost.reactions[reaction]++;\n      }\n    }\n\n  }\n});\nexport const selectAllPosts = state => state.posts;\nexport const {\n  postAdded,\n  reactionAdded\n} = postsSlice.actions;\nexport default postsSlice.reducer;","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/src/features/posts/postsSlice.js"],"names":["createSlice","nanoid","sub","initialState","id","title","content","date","Date","minutes","toISOString","reactions","thumbsUp","wow","heart","rocket","coffee","postsSlice","name","reducers","postAdded","reducer","state","action","push","payload","prepare","userId","reactionAdded","postId","reaction","existingPost","find","post","selectAllPosts","posts","actions"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,MAAtB,QAAoC,kBAApC;AACA,SAASC,GAAT,QAAoB,UAApB;AAEA,MAAMC,YAAY,GAAG,CACnB;AACEC,EAAAA,EAAE,EAAE,GADN;AAEEC,EAAAA,KAAK,EAAE,SAFT;AAGEC,EAAAA,OAAO,EAAE,kCAHX;AAIEC,EAAAA,IAAI,EAAEL,GAAG,CAAC,IAAIM,IAAJ,EAAD,EAAa;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAAb,CAAH,CAAiCC,WAAjC,EAJR;AAKEC,EAAAA,SAAS,EAAE;AACTC,IAAAA,QAAQ,EAAE,CADD;AAETC,IAAAA,GAAG,EAAE,CAFI;AAGTC,IAAAA,KAAK,EAAE,CAHE;AAITC,IAAAA,MAAM,EAAE,CAJC;AAKTC,IAAAA,MAAM,EAAE;AALC;AALb,CADmB,EAcnB;AACEZ,EAAAA,EAAE,EAAE,GADN;AAEEC,EAAAA,KAAK,EAAE,aAFT;AAGEC,EAAAA,OAAO,EAAE,mDAHX;AAIEC,EAAAA,IAAI,EAAEL,GAAG,CAAC,IAAIM,IAAJ,EAAD,EAAa;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAAb,CAAH,CAAgCC,WAAhC,EAJR;AAKEC,EAAAA,SAAS,EAAE;AACTC,IAAAA,QAAQ,EAAE,CADD;AAETC,IAAAA,GAAG,EAAE,CAFI;AAGTC,IAAAA,KAAK,EAAE,CAHE;AAITC,IAAAA,MAAM,EAAE,CAJC;AAKTC,IAAAA,MAAM,EAAE;AALC;AALb,CAdmB,CAArB;AA6BA,MAAMC,UAAU,GAAGjB,WAAW,CAAC;AAC7BkB,EAAAA,IAAI,EAAE,OADuB;AAE7Bf,EAAAA,YAF6B;AAG7BgB,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAE;AACTC,MAAAA,OAAO,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACrBD,QAAAA,KAAK,CAACE,IAAN,CAAWD,MAAM,CAACE,OAAlB;AACD,OAHQ;;AAITC,MAAAA,OAAO,CAACrB,KAAD,EAAQC,OAAR,EAAiBqB,MAAjB,EAAyB;AAC9B,eAAO;AACLF,UAAAA,OAAO,EAAE;AACPrB,YAAAA,EAAE,EAAEH,MAAM,EADH;AAEPI,YAAAA,KAFO;AAGPC,YAAAA,OAHO;AAIPC,YAAAA,IAAI,EAAE,IAAIC,IAAJ,GAAWE,WAAX,EAJC;AAKPiB,YAAAA,MALO;AAMPhB,YAAAA,SAAS,EAAE;AACTC,cAAAA,QAAQ,EAAE,CADD;AAETC,cAAAA,GAAG,EAAE,CAFI;AAGTC,cAAAA,KAAK,EAAE,CAHE;AAITC,cAAAA,MAAM,EAAE,CAJC;AAKTC,cAAAA,MAAM,EAAE;AALC;AANJ;AADJ,SAAP;AAgBD;;AArBQ,KADH;;AAwBRY,IAAAA,aAAa,CAACN,KAAD,EAAQC,MAAR,EAAgB;AAC3B,YAAM;AAAEM,QAAAA,MAAF;AAAUC,QAAAA;AAAV,UAAuBP,MAAM,CAACE,OAApC;AACA,YAAMM,YAAY,GAAGT,KAAK,CAACU,IAAN,CAAYC,IAAD,IAAUA,IAAI,CAAC7B,EAAL,KAAYyB,MAAjC,CAArB;;AACA,UAAIE,YAAJ,EAAkB;AAChBA,QAAAA,YAAY,CAACpB,SAAb,CAAuBmB,QAAvB;AACD;AACF;;AA9BO;AAHmB,CAAD,CAA9B;AAqCA,OAAO,MAAMI,cAAc,GAAIZ,KAAD,IAAWA,KAAK,CAACa,KAAxC;AACP,OAAO,MAAM;AAAEf,EAAAA,SAAF;AAAaQ,EAAAA;AAAb,IAA+BX,UAAU,CAACmB,OAAhD;AACP,eAAenB,UAAU,CAACI,OAA1B","sourcesContent":["import { createSlice, nanoid } from \"@reduxjs/toolkit\";\nimport { sub } from \"date-fns\";\n\nconst initialState = [\n  {\n    id: \"1\",\n    title: \"Bitcoin\",\n    content: \"Why I didn't buy bitcoin in 2010\",\n    date: sub(new Date(), { minutes: 10 }).toISOString(),\n    reactions: {\n      thumbsUp: 0,\n      wow: 0,\n      heart: 0,\n      rocket: 0,\n      coffee: 0,\n    },\n  },\n  {\n    id: \"2\",\n    title: \"Love my cat\",\n    content: \"Why do cats poop in slippers and not in the tray?\",\n    date: sub(new Date(), { minutes: 5 }).toISOString(),\n    reactions: {\n      thumbsUp: 0,\n      wow: 0,\n      heart: 0,\n      rocket: 0,\n      coffee: 0,\n    },\n  },\n];\n\nconst postsSlice = createSlice({\n  name: \"posts\",\n  initialState,\n  reducers: {\n    postAdded: {\n      reducer(state, action) {\n        state.push(action.payload);\n      },\n      prepare(title, content, userId) {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content,\n            date: new Date().toISOString(),\n            userId,\n            reactions: {\n              thumbsUp: 0,\n              wow: 0,\n              heart: 0,\n              rocket: 0,\n              coffee: 0,\n            },\n          },\n        };\n      },\n    },\n    reactionAdded(state, action) {\n      const { postId, reaction } = action.payload;\n      const existingPost = state.find((post) => post.id === postId);\n      if (existingPost) {\n        existingPost.reactions[reaction]++;\n      }\n    },\n  },\n});\n\nexport const selectAllPosts = (state) => state.posts;\nexport const { postAdded, reactionAdded } = postsSlice.actions;\nexport default postsSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}