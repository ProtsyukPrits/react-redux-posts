{"ast":null,"code":"export function buildMatchFn(args) {\n  return function (string) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var width = options.width;\n    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];\n    var matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n\n    var matchedString = matchResult[0];\n    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];\n    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function (pattern) {\n      return pattern.test(matchedString);\n    }) : // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\n    findKey(parsePatterns, function (pattern) {\n      return pattern.test(matchedString);\n    });\n    var value;\n    value = args.valueCallback ? args.valueCallback(key) : key;\n    value = options.valueCallback ? // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\n    options.valueCallback(value) : value;\n    var rest = string.slice(matchedString.length);\n    return {\n      value: value,\n      rest: rest\n    };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (var key in object) {\n    if (Object.prototype.hasOwnProperty.call(object, key) && predicate(object[key])) {\n      return key;\n    }\n  }\n\n  return undefined;\n}\n\nfunction findIndex(array, predicate) {\n  for (var key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n\n  return undefined;\n}","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/node_modules/date-fns/locale/_lib/buildMatchFn.mjs"],"names":["buildMatchFn","args","string","options","width","matchPattern","matchPatterns","defaultMatchWidth","matchResult","match","matchedString","parsePatterns","defaultParseWidth","key","Array","isArray","findIndex","pattern","test","findKey","value","valueCallback","rest","slice","length","object","predicate","Object","prototype","hasOwnProperty","call","undefined","array"],"mappings":"AAAA,OAAO,SAASA,YAAT,CAAsBC,IAAtB,EAA4B;AACjC,SAAO,UAACC,MAAD,EAA0B;AAAA,QAAjBC,OAAiB,uEAAP,EAAO;AAC/B,QAAMC,KAAK,GAAGD,OAAO,CAACC,KAAtB;AAEA,QAAMC,YAAY,GACfD,KAAK,IAAIH,IAAI,CAACK,aAAL,CAAmBF,KAAnB,CAAV,IACAH,IAAI,CAACK,aAAL,CAAmBL,IAAI,CAACM,iBAAxB,CAFF;AAGA,QAAMC,WAAW,GAAGN,MAAM,CAACO,KAAP,CAAaJ,YAAb,CAApB;;AAEA,QAAI,CAACG,WAAL,EAAkB;AAChB,aAAO,IAAP;AACD;;AACD,QAAME,aAAa,GAAGF,WAAW,CAAC,CAAD,CAAjC;AAEA,QAAMG,aAAa,GAChBP,KAAK,IAAIH,IAAI,CAACU,aAAL,CAAmBP,KAAnB,CAAV,IACAH,IAAI,CAACU,aAAL,CAAmBV,IAAI,CAACW,iBAAxB,CAFF;AAIA,QAAMC,GAAG,GAAGC,KAAK,CAACC,OAAN,CAAcJ,aAAd,IACRK,SAAS,CAACL,aAAD,EAAgB,UAACM,OAAD;AAAA,aAAaA,OAAO,CAACC,IAAR,CAAaR,aAAb,CAAb;AAAA,KAAhB,CADD,GAER;AACAS,IAAAA,OAAO,CAACR,aAAD,EAAgB,UAACM,OAAD;AAAA,aAAaA,OAAO,CAACC,IAAR,CAAaR,aAAb,CAAb;AAAA,KAAhB,CAHX;AAKA,QAAIU,KAAJ;AAEAA,IAAAA,KAAK,GAAGnB,IAAI,CAACoB,aAAL,GAAqBpB,IAAI,CAACoB,aAAL,CAAmBR,GAAnB,CAArB,GAA+CA,GAAvD;AACAO,IAAAA,KAAK,GAAGjB,OAAO,CAACkB,aAAR,GACJ;AACAlB,IAAAA,OAAO,CAACkB,aAAR,CAAsBD,KAAtB,CAFI,GAGJA,KAHJ;AAKA,QAAME,IAAI,GAAGpB,MAAM,CAACqB,KAAP,CAAab,aAAa,CAACc,MAA3B,CAAb;AAEA,WAAO;AAAEJ,MAAAA,KAAK,EAALA,KAAF;AAASE,MAAAA,IAAI,EAAJA;AAAT,KAAP;AACD,GAjCD;AAkCD;;AAED,SAASH,OAAT,CAAiBM,MAAjB,EAAyBC,SAAzB,EAAoC;AAClC,OAAK,IAAMb,GAAX,IAAkBY,MAAlB,EAA0B;AACxB,QACEE,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCL,MAArC,EAA6CZ,GAA7C,KACAa,SAAS,CAACD,MAAM,CAACZ,GAAD,CAAP,CAFX,EAGE;AACA,aAAOA,GAAP;AACD;AACF;;AACD,SAAOkB,SAAP;AACD;;AAED,SAASf,SAAT,CAAmBgB,KAAnB,EAA0BN,SAA1B,EAAqC;AACnC,OAAK,IAAIb,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGmB,KAAK,CAACR,MAA9B,EAAsCX,GAAG,EAAzC,EAA6C;AAC3C,QAAIa,SAAS,CAACM,KAAK,CAACnB,GAAD,CAAN,CAAb,EAA2B;AACzB,aAAOA,GAAP;AACD;AACF;;AACD,SAAOkB,SAAP;AACD","sourcesContent":["export function buildMatchFn(args) {\n  return (string, options = {}) => {\n    const width = options.width;\n\n    const matchPattern =\n      (width && args.matchPatterns[width]) ||\n      args.matchPatterns[args.defaultMatchWidth];\n    const matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n    const matchedString = matchResult[0];\n\n    const parsePatterns =\n      (width && args.parsePatterns[width]) ||\n      args.parsePatterns[args.defaultParseWidth];\n\n    const key = Array.isArray(parsePatterns)\n      ? findIndex(parsePatterns, (pattern) => pattern.test(matchedString))\n      : // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\n        findKey(parsePatterns, (pattern) => pattern.test(matchedString));\n\n    let value;\n\n    value = args.valueCallback ? args.valueCallback(key) : key;\n    value = options.valueCallback\n      ? // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\n        options.valueCallback(value)\n      : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (const key in object) {\n    if (\n      Object.prototype.hasOwnProperty.call(object, key) &&\n      predicate(object[key])\n    ) {\n      return key;\n    }\n  }\n  return undefined;\n}\n\nfunction findIndex(array, predicate) {\n  for (let key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n  return undefined;\n}\n"]},"metadata":{},"sourceType":"module"}