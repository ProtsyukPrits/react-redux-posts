{"ast":null,"code":"import { numericPatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { parseNDigits, parseNumericPattern } from \"../utils.mjs\";\nexport class Hour1to12Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"h\":\n        return parseNumericPattern(numericPatterns.hour12h, dateString);\n\n      case \"ho\":\n        return match.ordinalNumber(dateString, {\n          unit: \"hour\"\n        });\n\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 12;\n  }\n\n  set(date, _flags, value) {\n    const isPM = date.getHours() >= 12;\n\n    if (isPM && value < 12) {\n      date.setHours(value + 12, 0, 0, 0);\n    } else if (!isPM && value === 12) {\n      date.setHours(0, 0, 0, 0);\n    } else {\n      date.setHours(value, 0, 0, 0);\n    }\n\n    return date;\n  }\n\n  incompatibleTokens = [\"H\", \"K\", \"k\", \"t\", \"T\"];\n}","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/node_modules/date-fns/parse/_lib/parsers/Hour1to12Parser.mjs"],"names":["numericPatterns","Parser","parseNDigits","parseNumericPattern","Hour1to12Parser","priority","parse","dateString","token","match","hour12h","ordinalNumber","unit","length","validate","_date","value","set","date","_flags","isPM","getHours","setHours","incompatibleTokens"],"mappings":"AAAA,SAASA,eAAT,QAAgC,kBAAhC;AACA,SAASC,MAAT,QAAuB,eAAvB;AACA,SAASC,YAAT,EAAuBC,mBAAvB,QAAkD,cAAlD;AAEA,OAAO,MAAMC,eAAN,SAA8BH,MAA9B,CAAqC;AAC1CI,EAAAA,QAAQ,GAAG,EAAH;;AAERC,EAAAA,KAAK,CAACC,UAAD,EAAaC,KAAb,EAAoBC,KAApB,EAA2B;AAC9B,YAAQD,KAAR;AACE,WAAK,GAAL;AACE,eAAOL,mBAAmB,CAACH,eAAe,CAACU,OAAjB,EAA0BH,UAA1B,CAA1B;;AACF,WAAK,IAAL;AACE,eAAOE,KAAK,CAACE,aAAN,CAAoBJ,UAApB,EAAgC;AAAEK,UAAAA,IAAI,EAAE;AAAR,SAAhC,CAAP;;AACF;AACE,eAAOV,YAAY,CAACM,KAAK,CAACK,MAAP,EAAeN,UAAf,CAAnB;AANJ;AAQD;;AAEDO,EAAAA,QAAQ,CAACC,KAAD,EAAQC,KAAR,EAAe;AACrB,WAAOA,KAAK,IAAI,CAAT,IAAcA,KAAK,IAAI,EAA9B;AACD;;AAEDC,EAAAA,GAAG,CAACC,IAAD,EAAOC,MAAP,EAAeH,KAAf,EAAsB;AACvB,UAAMI,IAAI,GAAGF,IAAI,CAACG,QAAL,MAAmB,EAAhC;;AACA,QAAID,IAAI,IAAIJ,KAAK,GAAG,EAApB,EAAwB;AACtBE,MAAAA,IAAI,CAACI,QAAL,CAAcN,KAAK,GAAG,EAAtB,EAA0B,CAA1B,EAA6B,CAA7B,EAAgC,CAAhC;AACD,KAFD,MAEO,IAAI,CAACI,IAAD,IAASJ,KAAK,KAAK,EAAvB,EAA2B;AAChCE,MAAAA,IAAI,CAACI,QAAL,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB;AACD,KAFM,MAEA;AACLJ,MAAAA,IAAI,CAACI,QAAL,CAAcN,KAAd,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B;AACD;;AACD,WAAOE,IAAP;AACD;;AAEDK,EAAAA,kBAAkB,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,CAAH;AA9BwB","sourcesContent":["import { numericPatterns } from \"../constants.mjs\";\nimport { Parser } from \"../Parser.mjs\";\nimport { parseNDigits, parseNumericPattern } from \"../utils.mjs\";\n\nexport class Hour1to12Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"h\":\n        return parseNumericPattern(numericPatterns.hour12h, dateString);\n      case \"ho\":\n        return match.ordinalNumber(dateString, { unit: \"hour\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 12;\n  }\n\n  set(date, _flags, value) {\n    const isPM = date.getHours() >= 12;\n    if (isPM && value < 12) {\n      date.setHours(value + 12, 0, 0, 0);\n    } else if (!isPM && value === 12) {\n      date.setHours(0, 0, 0, 0);\n    } else {\n      date.setHours(value, 0, 0, 0);\n    }\n    return date;\n  }\n\n  incompatibleTokens = [\"H\", \"K\", \"k\", \"t\", \"T\"];\n}\n"]},"metadata":{},"sourceType":"module"}