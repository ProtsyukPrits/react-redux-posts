{"ast":null,"code":"\"use strict\";\n\nexports.interval = interval;\n\nvar _index = require(\"./toDate.js\");\n/**\n * The {@link interval} function options.\n */\n\n/**\n * @name interval\n * @category Interval Helpers\n * @summary Creates an interval object and validates its values.\n *\n * @description\n * Creates a normalized interval object and validates its values. If the interval is invalid, an exception is thrown.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param start - The start of the interval.\n * @param end - The end of the interval.\n * @param options - The options object.\n *\n * @throws `Start date is invalid` when `start` is invalid.\n * @throws `End date is invalid` when `end` is invalid.\n * @throws `End date must be after start date` when end is before `start` and `options.assertPositive` is true.\n *\n * @returns The normalized and validated interval object.\n */\n\n\nfunction interval(start, end, options) {\n  const _start = (0, _index.toDate)(start);\n\n  if (isNaN(+_start)) throw new TypeError(\"Start date is invalid\");\n\n  const _end = (0, _index.toDate)(end);\n\n  if (isNaN(+_end)) throw new TypeError(\"End date is invalid\");\n  if (options?.assertPositive && +_start > +_end) throw new TypeError(\"End date must be after start date\");\n  return {\n    start: _start,\n    end: _end\n  };\n}","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/node_modules/date-fns/interval.js"],"names":["exports","interval","_index","require","start","end","options","_start","toDate","isNaN","TypeError","_end","assertPositive"],"mappings":"AAAA;;AACAA,OAAO,CAACC,QAAR,GAAmBA,QAAnB;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,aAAD,CAApB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,QAAT,CAAkBG,KAAlB,EAAyBC,GAAzB,EAA8BC,OAA9B,EAAuC;AACrC,QAAMC,MAAM,GAAG,CAAC,GAAGL,MAAM,CAACM,MAAX,EAAmBJ,KAAnB,CAAf;;AACA,MAAIK,KAAK,CAAC,CAACF,MAAF,CAAT,EAAoB,MAAM,IAAIG,SAAJ,CAAc,uBAAd,CAAN;;AAEpB,QAAMC,IAAI,GAAG,CAAC,GAAGT,MAAM,CAACM,MAAX,EAAmBH,GAAnB,CAAb;;AACA,MAAII,KAAK,CAAC,CAACE,IAAF,CAAT,EAAkB,MAAM,IAAID,SAAJ,CAAc,qBAAd,CAAN;AAElB,MAAIJ,OAAO,EAAEM,cAAT,IAA2B,CAACL,MAAD,GAAU,CAACI,IAA1C,EACE,MAAM,IAAID,SAAJ,CAAc,mCAAd,CAAN;AAEF,SAAO;AAAEN,IAAAA,KAAK,EAAEG,MAAT;AAAiBF,IAAAA,GAAG,EAAEM;AAAtB,GAAP;AACD","sourcesContent":["\"use strict\";\nexports.interval = interval;\nvar _index = require(\"./toDate.js\");\n\n/**\n * The {@link interval} function options.\n */\n\n/**\n * @name interval\n * @category Interval Helpers\n * @summary Creates an interval object and validates its values.\n *\n * @description\n * Creates a normalized interval object and validates its values. If the interval is invalid, an exception is thrown.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param start - The start of the interval.\n * @param end - The end of the interval.\n * @param options - The options object.\n *\n * @throws `Start date is invalid` when `start` is invalid.\n * @throws `End date is invalid` when `end` is invalid.\n * @throws `End date must be after start date` when end is before `start` and `options.assertPositive` is true.\n *\n * @returns The normalized and validated interval object.\n */\nfunction interval(start, end, options) {\n  const _start = (0, _index.toDate)(start);\n  if (isNaN(+_start)) throw new TypeError(\"Start date is invalid\");\n\n  const _end = (0, _index.toDate)(end);\n  if (isNaN(+_end)) throw new TypeError(\"End date is invalid\");\n\n  if (options?.assertPositive && +_start > +_end)\n    throw new TypeError(\"End date must be after start date\");\n\n  return { start: _start, end: _end };\n}\n"]},"metadata":{},"sourceType":"script"}