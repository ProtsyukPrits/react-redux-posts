{"ast":null,"code":"\"use strict\";\n\nexports.set = set;\n\nvar _index = require(\"./constructFrom.js\");\n\nvar _index2 = require(\"./setMonth.js\");\n\nvar _index3 = require(\"./toDate.js\");\n/**\n * @name set\n * @category Common Helpers\n * @summary Set date values to a given date.\n *\n * @description\n * Set date values to a given date.\n *\n * Sets time values to date from object `values`.\n * A value is not set if it is undefined or null or doesn't exist in `values`.\n *\n * Note about bundle size: `set` does not internally use `setX` functions from date-fns but instead opts\n * to use native `Date#setX` methods. If you use this function, you may not want to include the\n * other `setX` functions that date-fns provides if you are concerned about the bundle size.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param values - The date values to be set\n *\n * @returns The new date with options set\n *\n * @example\n * // Transform 1 September 2014 into 20 October 2015 in a single line:\n * const result = set(new Date(2014, 8, 20), { year: 2015, month: 9, date: 20 })\n * //=> Tue Oct 20 2015 00:00:00\n *\n * @example\n * // Set 12 PM to 1 September 2014 01:23:45 to 1 September 2014 12:00:00:\n * const result = set(new Date(2014, 8, 1, 1, 23, 45), { hours: 12 })\n * //=> Mon Sep 01 2014 12:23:45\n */\n\n\nfunction set(date, values) {\n  let _date = (0, _index3.toDate)(date); // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\n\n\n  if (isNaN(+_date)) {\n    return (0, _index.constructFrom)(date, NaN);\n  }\n\n  if (values.year != null) {\n    _date.setFullYear(values.year);\n  }\n\n  if (values.month != null) {\n    _date = (0, _index2.setMonth)(_date, values.month);\n  }\n\n  if (values.date != null) {\n    _date.setDate(values.date);\n  }\n\n  if (values.hours != null) {\n    _date.setHours(values.hours);\n  }\n\n  if (values.minutes != null) {\n    _date.setMinutes(values.minutes);\n  }\n\n  if (values.seconds != null) {\n    _date.setSeconds(values.seconds);\n  }\n\n  if (values.milliseconds != null) {\n    _date.setMilliseconds(values.milliseconds);\n  }\n\n  return _date;\n}","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/node_modules/date-fns/set.js"],"names":["exports","set","_index","require","_index2","_index3","date","values","_date","toDate","isNaN","constructFrom","NaN","year","setFullYear","month","setMonth","setDate","hours","setHours","minutes","setMinutes","seconds","setSeconds","milliseconds","setMilliseconds"],"mappings":"AAAA;;AACAA,OAAO,CAACC,GAAR,GAAcA,GAAd;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,oBAAD,CAApB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,eAAD,CAArB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,aAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASF,GAAT,CAAaK,IAAb,EAAmBC,MAAnB,EAA2B;AACzB,MAAIC,KAAK,GAAG,CAAC,GAAGH,OAAO,CAACI,MAAZ,EAAoBH,IAApB,CAAZ,CADyB,CAGzB;;;AACA,MAAII,KAAK,CAAC,CAACF,KAAF,CAAT,EAAmB;AACjB,WAAO,CAAC,GAAGN,MAAM,CAACS,aAAX,EAA0BL,IAA1B,EAAgCM,GAAhC,CAAP;AACD;;AAED,MAAIL,MAAM,CAACM,IAAP,IAAe,IAAnB,EAAyB;AACvBL,IAAAA,KAAK,CAACM,WAAN,CAAkBP,MAAM,CAACM,IAAzB;AACD;;AAED,MAAIN,MAAM,CAACQ,KAAP,IAAgB,IAApB,EAA0B;AACxBP,IAAAA,KAAK,GAAG,CAAC,GAAGJ,OAAO,CAACY,QAAZ,EAAsBR,KAAtB,EAA6BD,MAAM,CAACQ,KAApC,CAAR;AACD;;AAED,MAAIR,MAAM,CAACD,IAAP,IAAe,IAAnB,EAAyB;AACvBE,IAAAA,KAAK,CAACS,OAAN,CAAcV,MAAM,CAACD,IAArB;AACD;;AAED,MAAIC,MAAM,CAACW,KAAP,IAAgB,IAApB,EAA0B;AACxBV,IAAAA,KAAK,CAACW,QAAN,CAAeZ,MAAM,CAACW,KAAtB;AACD;;AAED,MAAIX,MAAM,CAACa,OAAP,IAAkB,IAAtB,EAA4B;AAC1BZ,IAAAA,KAAK,CAACa,UAAN,CAAiBd,MAAM,CAACa,OAAxB;AACD;;AAED,MAAIb,MAAM,CAACe,OAAP,IAAkB,IAAtB,EAA4B;AAC1Bd,IAAAA,KAAK,CAACe,UAAN,CAAiBhB,MAAM,CAACe,OAAxB;AACD;;AAED,MAAIf,MAAM,CAACiB,YAAP,IAAuB,IAA3B,EAAiC;AAC/BhB,IAAAA,KAAK,CAACiB,eAAN,CAAsBlB,MAAM,CAACiB,YAA7B;AACD;;AAED,SAAOhB,KAAP;AACD","sourcesContent":["\"use strict\";\nexports.set = set;\nvar _index = require(\"./constructFrom.js\");\nvar _index2 = require(\"./setMonth.js\");\nvar _index3 = require(\"./toDate.js\");\n\n/**\n * @name set\n * @category Common Helpers\n * @summary Set date values to a given date.\n *\n * @description\n * Set date values to a given date.\n *\n * Sets time values to date from object `values`.\n * A value is not set if it is undefined or null or doesn't exist in `values`.\n *\n * Note about bundle size: `set` does not internally use `setX` functions from date-fns but instead opts\n * to use native `Date#setX` methods. If you use this function, you may not want to include the\n * other `setX` functions that date-fns provides if you are concerned about the bundle size.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param values - The date values to be set\n *\n * @returns The new date with options set\n *\n * @example\n * // Transform 1 September 2014 into 20 October 2015 in a single line:\n * const result = set(new Date(2014, 8, 20), { year: 2015, month: 9, date: 20 })\n * //=> Tue Oct 20 2015 00:00:00\n *\n * @example\n * // Set 12 PM to 1 September 2014 01:23:45 to 1 September 2014 12:00:00:\n * const result = set(new Date(2014, 8, 1, 1, 23, 45), { hours: 12 })\n * //=> Mon Sep 01 2014 12:23:45\n */\n\nfunction set(date, values) {\n  let _date = (0, _index3.toDate)(date);\n\n  // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\n  if (isNaN(+_date)) {\n    return (0, _index.constructFrom)(date, NaN);\n  }\n\n  if (values.year != null) {\n    _date.setFullYear(values.year);\n  }\n\n  if (values.month != null) {\n    _date = (0, _index2.setMonth)(_date, values.month);\n  }\n\n  if (values.date != null) {\n    _date.setDate(values.date);\n  }\n\n  if (values.hours != null) {\n    _date.setHours(values.hours);\n  }\n\n  if (values.minutes != null) {\n    _date.setMinutes(values.minutes);\n  }\n\n  if (values.seconds != null) {\n    _date.setSeconds(values.seconds);\n  }\n\n  if (values.milliseconds != null) {\n    _date.setMilliseconds(values.milliseconds);\n  }\n\n  return _date;\n}\n"]},"metadata":{},"sourceType":"script"}