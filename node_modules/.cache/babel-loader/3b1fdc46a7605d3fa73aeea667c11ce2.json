{"ast":null,"code":"var _jsxFileName = \"/home/dmytro/react-redux-posts/src/components/ContactForm/ContactForm.jsx\",\n    _s = $RefreshSig$();\n\nimport { FormList, Label } from './ContactForm.styled';\nimport { Formik, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport Notiflix from 'notiflix';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { Button, Input } from '@chakra-ui/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialValues = {\n  name: '',\n  number: ''\n};\nconst nameRegex = /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/;\nconst numberRegex = /^\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/;\nconst schema = yup.object().shape({\n  name: yup.string().matches(nameRegex, \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\").required(),\n  number: yup.string().matches(numberRegex, 'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +').required()\n});\n\nconst ContactForm = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = (values, _ref) => {\n    let {\n      resetForm\n    } = _ref;\n    const {\n      name\n    } = values;\n\n    if (contacts.some(contact => contact.name === name)) {\n      return Notiflix.Notify.info(`${name} is already in contacts!`);\n    }\n\n    resetForm();\n    dispatch(addContact(values));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: initialValues,\n    onSubmit: handleSubmit,\n    validationSchema: schema,\n    children: /*#__PURE__*/_jsxDEV(FormList, {\n      autoComplete: \"off\",\n      children: [/*#__PURE__*/_jsxDEV(Label, {\n        htmlFor: \"name\",\n        children: [\"Name:\", /*#__PURE__*/_jsxDEV(Field, {\n          type: \"text\",\n          name: \"name\",\n          as: Input\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n          name: \"name\",\n          component: \"div\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Label, {\n        htmlFor: \"number\",\n        children: [\"Number:\", /*#__PURE__*/_jsxDEV(Field, {\n          type: \"tel\",\n          name: \"number\",\n          as: Input\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n          name: \"number\",\n          component: \"div\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        children: \"Add contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 7\n  }, this);\n};\n\n_s(ContactForm, \"sydSEEMVkiloeUptxkxmL6nxG7A=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = ContactForm;\nexport default ContactForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactForm\");","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/src/components/ContactForm/ContactForm.jsx"],"names":["FormList","Label","Formik","Field","ErrorMessage","yup","Notiflix","useDispatch","useSelector","addContact","selectContacts","Button","Input","initialValues","name","number","nameRegex","numberRegex","schema","object","shape","string","matches","required","ContactForm","dispatch","contacts","handleSubmit","values","resetForm","some","contact","Notify","info"],"mappings":"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","sourcesContent":["import { FormList, Label} from './ContactForm.styled';\nimport { Formik, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport Notiflix from 'notiflix';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { Button, Input } from '@chakra-ui/react';\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nconst nameRegex = /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/;\nconst numberRegex =\n  /^\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/;\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(\n      nameRegex,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required(),\n  number: yup\n    .string()\n    .matches(\n      numberRegex,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required(),\n});\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = (values, { resetForm }) => {\n    const { name } = values;\n\n    if (contacts.some(contact => contact.name === name)) {\n      return Notiflix.Notify.info(`${name} is already in contacts!`);\n    }\n\n    resetForm();\n    dispatch(addContact(values));\n  };\n\n  return (\n      <Formik\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n        validationSchema={schema}\n      >\n        <FormList autoComplete=\"off\">\n          <Label htmlFor=\"name\">\n            Name:\n            <Field type=\"text\" name=\"name\" as={Input} />\n            <ErrorMessage name=\"name\" component=\"div\" />\n          </Label>\n\n          <Label htmlFor=\"number\">\n            Number:\n            <Field type=\"tel\" name=\"number\" as={Input} />\n            <ErrorMessage name=\"number\" component=\"div\" />\n          </Label>\n\n          <Button type=\"submit\">Add contacts</Button>\n        </FormList>\n      </Formik>\n  );\n};\n\nexport default ContactForm;\n"]},"metadata":{},"sourceType":"module"}