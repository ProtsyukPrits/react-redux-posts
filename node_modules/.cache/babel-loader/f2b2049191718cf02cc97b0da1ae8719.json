{"ast":null,"code":"// src/index.ts\nvar hasSetup = false;\nvar modality = null;\nvar hasEventBeforeFocus = false;\nvar handlers = /* @__PURE__ */new Set();\nvar isMac = typeof window !== \"undefined\" && window.navigator != null ? /^Mac/.test(window.navigator.platform) : false;\n\nfunction isValidKey(event) {\n  return !(event.metaKey || !isMac && event.altKey || event.ctrlKey);\n}\n\nfunction trigger(modality2, event) {\n  handlers.forEach(function (handler) {\n    return handler(modality2, event);\n  });\n}\n\nfunction onKeyboardEvent(event) {\n  hasEventBeforeFocus = true;\n\n  if (isValidKey(event)) {\n    modality = \"keyboard\";\n    trigger(\"keyboard\", event);\n  }\n}\n\nfunction onPointerEvent(event) {\n  modality = \"pointer\";\n\n  if (event.type === \"mousedown\" || event.type === \"pointerdown\") {\n    hasEventBeforeFocus = true;\n    trigger(\"pointer\", event);\n  }\n}\n\nfunction onWindowFocus(event) {\n  if (event.target === window || event.target === document) {\n    return;\n  }\n\n  if (!hasEventBeforeFocus) {\n    modality = \"keyboard\";\n    trigger(\"keyboard\", event);\n  }\n\n  hasEventBeforeFocus = false;\n}\n\nfunction onWindowBlur() {\n  hasEventBeforeFocus = false;\n}\n\nfunction isFocusVisible() {\n  return modality !== \"pointer\";\n}\n\nfunction setupGlobalFocusEvents() {\n  if (typeof window === \"undefined\" || hasSetup) {\n    return;\n  }\n\n  var focus = HTMLElement.prototype.focus;\n\n  HTMLElement.prototype.focus = function focusElement() {\n    hasEventBeforeFocus = true;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    focus.apply(this, args);\n  };\n\n  document.addEventListener(\"keydown\", onKeyboardEvent, true);\n  document.addEventListener(\"keyup\", onKeyboardEvent, true);\n  window.addEventListener(\"focus\", onWindowFocus, true);\n  window.addEventListener(\"blur\", onWindowBlur, false);\n\n  if (typeof PointerEvent !== \"undefined\") {\n    document.addEventListener(\"pointerdown\", onPointerEvent, true);\n    document.addEventListener(\"pointermove\", onPointerEvent, true);\n    document.addEventListener(\"pointerup\", onPointerEvent, true);\n  } else {\n    document.addEventListener(\"mousedown\", onPointerEvent, true);\n    document.addEventListener(\"mousemove\", onPointerEvent, true);\n    document.addEventListener(\"mouseup\", onPointerEvent, true);\n  }\n\n  hasSetup = true;\n}\n\nfunction trackFocusVisible(fn) {\n  setupGlobalFocusEvents();\n  fn(isFocusVisible());\n\n  var handler = function handler() {\n    return fn(isFocusVisible());\n  };\n\n  handlers.add(handler);\n  return function () {\n    handlers.delete(handler);\n  };\n}\n\nexport { trackFocusVisible };","map":{"version":3,"mappings":"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","names":["hasSetup","modality","hasEventBeforeFocus","handlers","Set","isMac","window","navigator","test","platform","event","metaKey","altKey","ctrlKey","modality2","forEach","handler","isValidKey","trigger","type","target","document","focus","HTMLElement","prototype","args","apply","addEventListener","onKeyboardEvent","onWindowFocus","onWindowBlur","PointerEvent","onPointerEvent","fn","setupGlobalFocusEvents","isFocusVisible","add","delete"],"sources":["/home/dmytro/react-redux-posts/node_modules/@zag-js/focus-visible/src/index.ts"],"sourcesContent":["type Modality = \"keyboard\" | \"pointer\"\ntype HandlerEvent = PointerEvent | MouseEvent | KeyboardEvent | FocusEvent\ntype Handler = (modality: Modality, e: HandlerEvent) => void\ntype FocusVisibleCallback = (isFocusVisible: boolean) => void\n\nlet hasSetup = false\nlet modality: Modality | null = null\nlet hasEventBeforeFocus = false\n\nconst handlers = new Set<Handler>()\n\nconst isMac = typeof window !== \"undefined\" && window.navigator != null ? /^Mac/.test(window.navigator.platform) : false\n\nfunction isValidKey(event: KeyboardEvent) {\n  return !(event.metaKey || (!isMac && event.altKey) || event.ctrlKey)\n}\n\nfunction trigger(modality: Modality, event: HandlerEvent) {\n  handlers.forEach((handler) => handler(modality, event))\n}\n\nfunction onKeyboardEvent(event: KeyboardEvent) {\n  hasEventBeforeFocus = true\n  if (isValidKey(event)) {\n    modality = \"keyboard\"\n    trigger(\"keyboard\", event)\n  }\n}\n\nfunction onPointerEvent(event: PointerEvent | MouseEvent) {\n  modality = \"pointer\"\n  if (event.type === \"mousedown\" || event.type === \"pointerdown\") {\n    hasEventBeforeFocus = true\n    trigger(\"pointer\", event)\n  }\n}\n\nfunction onWindowFocus(event: FocusEvent) {\n  // Firefox fires two extra focus events when the user first clicks into an iframe:\n  // first on the window, then on the document. We ignore these events so they don't\n  // cause keyboard focus rings to appear.\n  if (event.target === window || event.target === document) {\n    return\n  }\n\n  // If a focus event occurs without a preceding keyboard or pointer event, switch to keyboard modality.\n  // This occurs, for example, when navigating a form with the next/previous buttons on iOS.\n  if (!hasEventBeforeFocus) {\n    modality = \"keyboard\"\n    trigger(\"keyboard\", event)\n  }\n\n  hasEventBeforeFocus = false\n}\n\nfunction onWindowBlur() {\n  // When the window is blurred, reset state. This is necessary when tabbing out of the window,\n  // for example, since a subsequent focus event won't be fired.\n  hasEventBeforeFocus = false\n}\n\nfunction isFocusVisible() {\n  return modality !== \"pointer\"\n}\n\nfunction setupGlobalFocusEvents() {\n  if (typeof window === \"undefined\" || hasSetup) {\n    return\n  }\n\n  // Programmatic focus() calls shouldn't affect the current input modality.\n  // However, we need to detect other cases when a focus event occurs without\n  // a preceding user event (e.g. screen reader focus). Overriding the focus\n  // method on HTMLElement.prototype is a bit hacky, but works.\n  const { focus } = HTMLElement.prototype\n  HTMLElement.prototype.focus = function focusElement(...args) {\n    hasEventBeforeFocus = true\n    focus.apply(this, args)\n  }\n\n  document.addEventListener(\"keydown\", onKeyboardEvent, true)\n  document.addEventListener(\"keyup\", onKeyboardEvent, true)\n\n  // Register focus events on the window so they are sure to happen\n  // before React's event listeners (registered on the document).\n  window.addEventListener(\"focus\", onWindowFocus, true)\n  window.addEventListener(\"blur\", onWindowBlur, false)\n\n  if (typeof PointerEvent !== \"undefined\") {\n    document.addEventListener(\"pointerdown\", onPointerEvent, true)\n    document.addEventListener(\"pointermove\", onPointerEvent, true)\n    document.addEventListener(\"pointerup\", onPointerEvent, true)\n  } else {\n    document.addEventListener(\"mousedown\", onPointerEvent, true)\n    document.addEventListener(\"mousemove\", onPointerEvent, true)\n    document.addEventListener(\"mouseup\", onPointerEvent, true)\n  }\n\n  hasSetup = true\n}\n\nexport function trackFocusVisible(fn: FocusVisibleCallback) {\n  setupGlobalFocusEvents()\n\n  fn(isFocusVisible())\n  const handler = () => fn(isFocusVisible())\n\n  handlers.add(handler)\n  return () => {\n    handlers.delete(handler)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}