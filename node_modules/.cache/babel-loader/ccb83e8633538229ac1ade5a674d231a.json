{"ast":null,"code":"\"use strict\";\n\nexports.differenceInBusinessDays = differenceInBusinessDays;\n\nvar _index = require(\"./addDays.js\");\n\nvar _index2 = require(\"./differenceInCalendarDays.js\");\n\nvar _index3 = require(\"./isSameDay.js\");\n\nvar _index4 = require(\"./isValid.js\");\n\nvar _index5 = require(\"./isWeekend.js\");\n\nvar _index6 = require(\"./toDate.js\");\n/**\n * @name differenceInBusinessDays\n * @category Day Helpers\n * @summary Get the number of business days between the given dates.\n *\n * @description\n * Get the number of business day periods between the given dates.\n * Business days being days that arent in the weekend.\n * Like `differenceInCalendarDays`, the function removes the times from\n * the dates before calculating the difference.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of business days\n *\n * @example\n * // How many business days are between\n * // 10 January 2014 and 20 July 2014?\n * const result = differenceInBusinessDays(\n *   new Date(2014, 6, 20),\n *   new Date(2014, 0, 10)\n * )\n * //=> 136\n *\n * // How many business days are between\n * // 30 November 2021 and 1 November 2021?\n * const result = differenceInBusinessDays(\n *   new Date(2021, 10, 30),\n *   new Date(2021, 10, 1)\n * )\n * //=> 21\n *\n * // How many business days are between\n * // 1 November 2021 and 1 December 2021?\n * const result = differenceInBusinessDays(\n *   new Date(2021, 10, 1),\n *   new Date(2021, 11, 1)\n * )\n * //=> -22\n *\n * // How many business days are between\n * // 1 November 2021 and 1 November 2021 ?\n * const result = differenceInBusinessDays(\n *   new Date(2021, 10, 1),\n *   new Date(2021, 10, 1)\n * )\n * //=> 0\n */\n\n\nfunction differenceInBusinessDays(dateLeft, dateRight) {\n  const _dateLeft = (0, _index6.toDate)(dateLeft);\n\n  let _dateRight = (0, _index6.toDate)(dateRight);\n\n  if (!(0, _index4.isValid)(_dateLeft) || !(0, _index4.isValid)(_dateRight)) return NaN;\n  const calendarDifference = (0, _index2.differenceInCalendarDays)(_dateLeft, _dateRight);\n  const sign = calendarDifference < 0 ? -1 : 1;\n  const weeks = Math.trunc(calendarDifference / 7);\n  let result = weeks * 5;\n  _dateRight = (0, _index.addDays)(_dateRight, weeks * 7); // the loop below will run at most 6 times to account for the remaining days that don't makeup a full week\n\n  while (!(0, _index3.isSameDay)(_dateLeft, _dateRight)) {\n    // sign is used to account for both negative and positive differences\n    result += (0, _index5.isWeekend)(_dateRight) ? 0 : sign;\n    _dateRight = (0, _index.addDays)(_dateRight, sign);\n  } // Prevent negative zero\n\n\n  return result === 0 ? 0 : result;\n}","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/node_modules/date-fns/differenceInBusinessDays.js"],"names":["exports","differenceInBusinessDays","_index","require","_index2","_index3","_index4","_index5","_index6","dateLeft","dateRight","_dateLeft","toDate","_dateRight","isValid","NaN","calendarDifference","differenceInCalendarDays","sign","weeks","Math","trunc","result","addDays","isSameDay","isWeekend"],"mappings":"AAAA;;AACAA,OAAO,CAACC,wBAAR,GAAmCA,wBAAnC;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,cAAD,CAApB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,+BAAD,CAArB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,gBAAD,CAArB;;AACA,IAAIG,OAAO,GAAGH,OAAO,CAAC,cAAD,CAArB;;AACA,IAAII,OAAO,GAAGJ,OAAO,CAAC,gBAAD,CAArB;;AACA,IAAIK,OAAO,GAAGL,OAAO,CAAC,aAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,wBAAT,CAAkCQ,QAAlC,EAA4CC,SAA5C,EAAuD;AACrD,QAAMC,SAAS,GAAG,CAAC,GAAGH,OAAO,CAACI,MAAZ,EAAoBH,QAApB,CAAlB;;AACA,MAAII,UAAU,GAAG,CAAC,GAAGL,OAAO,CAACI,MAAZ,EAAoBF,SAApB,CAAjB;;AAEA,MAAI,CAAC,CAAC,GAAGJ,OAAO,CAACQ,OAAZ,EAAqBH,SAArB,CAAD,IAAoC,CAAC,CAAC,GAAGL,OAAO,CAACQ,OAAZ,EAAqBD,UAArB,CAAzC,EACE,OAAOE,GAAP;AAEF,QAAMC,kBAAkB,GAAG,CAAC,GAAGZ,OAAO,CAACa,wBAAZ,EACzBN,SADyB,EAEzBE,UAFyB,CAA3B;AAIA,QAAMK,IAAI,GAAGF,kBAAkB,GAAG,CAArB,GAAyB,CAAC,CAA1B,GAA8B,CAA3C;AAEA,QAAMG,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWL,kBAAkB,GAAG,CAAhC,CAAd;AAEA,MAAIM,MAAM,GAAGH,KAAK,GAAG,CAArB;AACAN,EAAAA,UAAU,GAAG,CAAC,GAAGX,MAAM,CAACqB,OAAX,EAAoBV,UAApB,EAAgCM,KAAK,GAAG,CAAxC,CAAb,CAhBqD,CAkBrD;;AACA,SAAO,CAAC,CAAC,GAAGd,OAAO,CAACmB,SAAZ,EAAuBb,SAAvB,EAAkCE,UAAlC,CAAR,EAAuD;AACrD;AACAS,IAAAA,MAAM,IAAI,CAAC,GAAGf,OAAO,CAACkB,SAAZ,EAAuBZ,UAAvB,IAAqC,CAArC,GAAyCK,IAAnD;AACAL,IAAAA,UAAU,GAAG,CAAC,GAAGX,MAAM,CAACqB,OAAX,EAAoBV,UAApB,EAAgCK,IAAhC,CAAb;AACD,GAvBoD,CAyBrD;;;AACA,SAAOI,MAAM,KAAK,CAAX,GAAe,CAAf,GAAmBA,MAA1B;AACD","sourcesContent":["\"use strict\";\nexports.differenceInBusinessDays = differenceInBusinessDays;\nvar _index = require(\"./addDays.js\");\nvar _index2 = require(\"./differenceInCalendarDays.js\");\nvar _index3 = require(\"./isSameDay.js\");\nvar _index4 = require(\"./isValid.js\");\nvar _index5 = require(\"./isWeekend.js\");\nvar _index6 = require(\"./toDate.js\");\n\n/**\n * @name differenceInBusinessDays\n * @category Day Helpers\n * @summary Get the number of business days between the given dates.\n *\n * @description\n * Get the number of business day periods between the given dates.\n * Business days being days that arent in the weekend.\n * Like `differenceInCalendarDays`, the function removes the times from\n * the dates before calculating the difference.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of business days\n *\n * @example\n * // How many business days are between\n * // 10 January 2014 and 20 July 2014?\n * const result = differenceInBusinessDays(\n *   new Date(2014, 6, 20),\n *   new Date(2014, 0, 10)\n * )\n * //=> 136\n *\n * // How many business days are between\n * // 30 November 2021 and 1 November 2021?\n * const result = differenceInBusinessDays(\n *   new Date(2021, 10, 30),\n *   new Date(2021, 10, 1)\n * )\n * //=> 21\n *\n * // How many business days are between\n * // 1 November 2021 and 1 December 2021?\n * const result = differenceInBusinessDays(\n *   new Date(2021, 10, 1),\n *   new Date(2021, 11, 1)\n * )\n * //=> -22\n *\n * // How many business days are between\n * // 1 November 2021 and 1 November 2021 ?\n * const result = differenceInBusinessDays(\n *   new Date(2021, 10, 1),\n *   new Date(2021, 10, 1)\n * )\n * //=> 0\n */\nfunction differenceInBusinessDays(dateLeft, dateRight) {\n  const _dateLeft = (0, _index6.toDate)(dateLeft);\n  let _dateRight = (0, _index6.toDate)(dateRight);\n\n  if (!(0, _index4.isValid)(_dateLeft) || !(0, _index4.isValid)(_dateRight))\n    return NaN;\n\n  const calendarDifference = (0, _index2.differenceInCalendarDays)(\n    _dateLeft,\n    _dateRight,\n  );\n  const sign = calendarDifference < 0 ? -1 : 1;\n\n  const weeks = Math.trunc(calendarDifference / 7);\n\n  let result = weeks * 5;\n  _dateRight = (0, _index.addDays)(_dateRight, weeks * 7);\n\n  // the loop below will run at most 6 times to account for the remaining days that don't makeup a full week\n  while (!(0, _index3.isSameDay)(_dateLeft, _dateRight)) {\n    // sign is used to account for both negative and positive differences\n    result += (0, _index5.isWeekend)(_dateRight) ? 0 : sign;\n    _dateRight = (0, _index.addDays)(_dateRight, sign);\n  }\n\n  // Prevent negative zero\n  return result === 0 ? 0 : result;\n}\n"]},"metadata":{},"sourceType":"script"}