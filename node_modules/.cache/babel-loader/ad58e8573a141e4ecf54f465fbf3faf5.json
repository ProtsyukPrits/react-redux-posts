{"ast":null,"code":"import _classCallCheck from \"/home/dmytro/react-redux-posts/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/dmytro/react-redux-posts/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/home/dmytro/react-redux-posts/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/home/dmytro/react-redux-posts/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/dmytro/react-redux-posts/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"/home/dmytro/react-redux-posts/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { Parser } from \"../Parser.mjs\";\nimport { mapValue, normalizeTwoDigitYear, parseNDigits } from \"../utils.mjs\"; // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns\n// | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n// |----------|-------|----|-------|-------|-------|\n// | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n// | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n// | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n// | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n// | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n\nexport var YearParser = /*#__PURE__*/function (_Parser) {\n  _inherits(YearParser, _Parser);\n\n  var _super = _createSuper(YearParser);\n\n  function YearParser() {\n    var _this;\n\n    _classCallCheck(this, YearParser);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"priority\", 130);\n\n    _defineProperty(_assertThisInitialized(_this), \"incompatibleTokens\", [\"Y\", \"R\", \"u\", \"w\", \"I\", \"i\", \"e\", \"c\", \"t\", \"T\"]);\n\n    return _this;\n  }\n\n  _createClass(YearParser, [{\n    key: \"parse\",\n    value: function parse(dateString, token, match) {\n      var valueCallback = function valueCallback(year) {\n        return {\n          year: year,\n          isTwoDigitYear: token === \"yy\"\n        };\n      };\n\n      switch (token) {\n        case \"y\":\n          return mapValue(parseNDigits(4, dateString), valueCallback);\n\n        case \"yo\":\n          return mapValue(match.ordinalNumber(dateString, {\n            unit: \"year\"\n          }), valueCallback);\n\n        default:\n          return mapValue(parseNDigits(token.length, dateString), valueCallback);\n      }\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(_date, value) {\n      return value.isTwoDigitYear || value.year > 0;\n    }\n  }, {\n    key: \"set\",\n    value: function set(date, flags, value) {\n      var currentYear = date.getFullYear();\n\n      if (value.isTwoDigitYear) {\n        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);\n        date.setFullYear(normalizedTwoDigitYear, 0, 1);\n        date.setHours(0, 0, 0, 0);\n        return date;\n      }\n\n      var year = !(\"era\" in flags) || flags.era === 1 ? value.year : 1 - value.year;\n      date.setFullYear(year, 0, 1);\n      date.setHours(0, 0, 0, 0);\n      return date;\n    }\n  }]);\n\n  return YearParser;\n}(Parser);","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/node_modules/date-fns/parse/_lib/parsers/YearParser.mjs"],"names":["Parser","mapValue","normalizeTwoDigitYear","parseNDigits","YearParser","dateString","token","match","valueCallback","year","isTwoDigitYear","ordinalNumber","unit","length","_date","value","date","flags","currentYear","getFullYear","normalizedTwoDigitYear","setFullYear","setHours","era"],"mappings":";;;;;;AAAA,SAASA,MAAT,QAAuB,eAAvB;AACA,SAASC,QAAT,EAAmBC,qBAAnB,EAA0CC,YAA1C,QAA8D,cAA9D,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,WAAaC,UAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,+DACa,GADb;;AAAA,yEAEuB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,EAAyC,GAAzC,EAA8C,GAA9C,CAFvB;;AAAA;AAAA;;AAAA;AAAA;AAAA,WAIE,eAAMC,UAAN,EAAkBC,KAAlB,EAAyBC,KAAzB,EAAgC;AAC9B,UAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,IAAD;AAAA,eAAW;AAC/BA,UAAAA,IAAI,EAAJA,IAD+B;AAE/BC,UAAAA,cAAc,EAAEJ,KAAK,KAAK;AAFK,SAAX;AAAA,OAAtB;;AAKA,cAAQA,KAAR;AACE,aAAK,GAAL;AACE,iBAAOL,QAAQ,CAACE,YAAY,CAAC,CAAD,EAAIE,UAAJ,CAAb,EAA8BG,aAA9B,CAAf;;AACF,aAAK,IAAL;AACE,iBAAOP,QAAQ,CACbM,KAAK,CAACI,aAAN,CAAoBN,UAApB,EAAgC;AAC9BO,YAAAA,IAAI,EAAE;AADwB,WAAhC,CADa,EAIbJ,aAJa,CAAf;;AAMF;AACE,iBAAOP,QAAQ,CAACE,YAAY,CAACG,KAAK,CAACO,MAAP,EAAeR,UAAf,CAAb,EAAyCG,aAAzC,CAAf;AAXJ;AAaD;AAvBH;AAAA;AAAA,WAyBE,kBAASM,KAAT,EAAgBC,KAAhB,EAAuB;AACrB,aAAOA,KAAK,CAACL,cAAN,IAAwBK,KAAK,CAACN,IAAN,GAAa,CAA5C;AACD;AA3BH;AAAA;AAAA,WA6BE,aAAIO,IAAJ,EAAUC,KAAV,EAAiBF,KAAjB,EAAwB;AACtB,UAAMG,WAAW,GAAGF,IAAI,CAACG,WAAL,EAApB;;AAEA,UAAIJ,KAAK,CAACL,cAAV,EAA0B;AACxB,YAAMU,sBAAsB,GAAGlB,qBAAqB,CAClDa,KAAK,CAACN,IAD4C,EAElDS,WAFkD,CAApD;AAIAF,QAAAA,IAAI,CAACK,WAAL,CAAiBD,sBAAjB,EAAyC,CAAzC,EAA4C,CAA5C;AACAJ,QAAAA,IAAI,CAACM,QAAL,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB;AACA,eAAON,IAAP;AACD;;AAED,UAAMP,IAAI,GACR,EAAE,SAASQ,KAAX,KAAqBA,KAAK,CAACM,GAAN,KAAc,CAAnC,GAAuCR,KAAK,CAACN,IAA7C,GAAoD,IAAIM,KAAK,CAACN,IADhE;AAEAO,MAAAA,IAAI,CAACK,WAAL,CAAiBZ,IAAjB,EAAuB,CAAvB,EAA0B,CAA1B;AACAO,MAAAA,IAAI,CAACM,QAAL,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB;AACA,aAAON,IAAP;AACD;AA/CH;;AAAA;AAAA,EAAgChB,MAAhC","sourcesContent":["import { Parser } from \"../Parser.mjs\";\nimport { mapValue, normalizeTwoDigitYear, parseNDigits } from \"../utils.mjs\";\n\n// From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns\n// | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n// |----------|-------|----|-------|-------|-------|\n// | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n// | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n// | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n// | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n// | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\nexport class YearParser extends Parser {\n  priority = 130;\n  incompatibleTokens = [\"Y\", \"R\", \"u\", \"w\", \"I\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n\n  parse(dateString, token, match) {\n    const valueCallback = (year) => ({\n      year,\n      isTwoDigitYear: token === \"yy\",\n    });\n\n    switch (token) {\n      case \"y\":\n        return mapValue(parseNDigits(4, dateString), valueCallback);\n      case \"yo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"year\",\n          }),\n          valueCallback,\n        );\n      default:\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n    }\n  }\n\n  validate(_date, value) {\n    return value.isTwoDigitYear || value.year > 0;\n  }\n\n  set(date, flags, value) {\n    const currentYear = date.getFullYear();\n\n    if (value.isTwoDigitYear) {\n      const normalizedTwoDigitYear = normalizeTwoDigitYear(\n        value.year,\n        currentYear,\n      );\n      date.setFullYear(normalizedTwoDigitYear, 0, 1);\n      date.setHours(0, 0, 0, 0);\n      return date;\n    }\n\n    const year =\n      !(\"era\" in flags) || flags.era === 1 ? value.year : 1 - value.year;\n    date.setFullYear(year, 0, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}