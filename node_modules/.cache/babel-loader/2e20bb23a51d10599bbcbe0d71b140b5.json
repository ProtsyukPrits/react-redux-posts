{"ast":null,"code":"import { Parser } from \"../Parser.mjs\";\nexport class EraParser extends Parser {\n  priority = 140;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // AD, BC\n      case \"G\":\n      case \"GG\":\n      case \"GGG\":\n        return match.era(dateString, {\n          width: \"abbreviated\"\n        }) || match.era(dateString, {\n          width: \"narrow\"\n        });\n      // A, B\n\n      case \"GGGGG\":\n        return match.era(dateString, {\n          width: \"narrow\"\n        });\n      // Anno Domini, Before Christ\n\n      case \"GGGG\":\n      default:\n        return match.era(dateString, {\n          width: \"wide\"\n        }) || match.era(dateString, {\n          width: \"abbreviated\"\n        }) || match.era(dateString, {\n          width: \"narrow\"\n        });\n    }\n  }\n\n  set(date, flags, value) {\n    flags.era = value;\n    date.setFullYear(value, 0, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"R\", \"u\", \"t\", \"T\"];\n}","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/node_modules/date-fns/parse/_lib/parsers/EraParser.mjs"],"names":["Parser","EraParser","priority","parse","dateString","token","match","era","width","set","date","flags","value","setFullYear","setHours","incompatibleTokens"],"mappings":"AAAA,SAASA,MAAT,QAAuB,eAAvB;AAEA,OAAO,MAAMC,SAAN,SAAwBD,MAAxB,CAA+B;AACpCE,EAAAA,QAAQ,GAAG,GAAH;;AAERC,EAAAA,KAAK,CAACC,UAAD,EAAaC,KAAb,EAAoBC,KAApB,EAA2B;AAC9B,YAAQD,KAAR;AACE;AACA,WAAK,GAAL;AACA,WAAK,IAAL;AACA,WAAK,KAAL;AACE,eACEC,KAAK,CAACC,GAAN,CAAUH,UAAV,EAAsB;AAAEI,UAAAA,KAAK,EAAE;AAAT,SAAtB,KACAF,KAAK,CAACC,GAAN,CAAUH,UAAV,EAAsB;AAAEI,UAAAA,KAAK,EAAE;AAAT,SAAtB,CAFF;AAKF;;AACA,WAAK,OAAL;AACE,eAAOF,KAAK,CAACC,GAAN,CAAUH,UAAV,EAAsB;AAAEI,UAAAA,KAAK,EAAE;AAAT,SAAtB,CAAP;AACF;;AACA,WAAK,MAAL;AACA;AACE,eACEF,KAAK,CAACC,GAAN,CAAUH,UAAV,EAAsB;AAAEI,UAAAA,KAAK,EAAE;AAAT,SAAtB,KACAF,KAAK,CAACC,GAAN,CAAUH,UAAV,EAAsB;AAAEI,UAAAA,KAAK,EAAE;AAAT,SAAtB,CADA,IAEAF,KAAK,CAACC,GAAN,CAAUH,UAAV,EAAsB;AAAEI,UAAAA,KAAK,EAAE;AAAT,SAAtB,CAHF;AAhBJ;AAsBD;;AAEDC,EAAAA,GAAG,CAACC,IAAD,EAAOC,KAAP,EAAcC,KAAd,EAAqB;AACtBD,IAAAA,KAAK,CAACJ,GAAN,GAAYK,KAAZ;AACAF,IAAAA,IAAI,CAACG,WAAL,CAAiBD,KAAjB,EAAwB,CAAxB,EAA2B,CAA3B;AACAF,IAAAA,IAAI,CAACI,QAAL,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB;AACA,WAAOJ,IAAP;AACD;;AAEDK,EAAAA,kBAAkB,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CAAH;AAnCkB","sourcesContent":["import { Parser } from \"../Parser.mjs\";\n\nexport class EraParser extends Parser {\n  priority = 140;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // AD, BC\n      case \"G\":\n      case \"GG\":\n      case \"GGG\":\n        return (\n          match.era(dateString, { width: \"abbreviated\" }) ||\n          match.era(dateString, { width: \"narrow\" })\n        );\n\n      // A, B\n      case \"GGGGG\":\n        return match.era(dateString, { width: \"narrow\" });\n      // Anno Domini, Before Christ\n      case \"GGGG\":\n      default:\n        return (\n          match.era(dateString, { width: \"wide\" }) ||\n          match.era(dateString, { width: \"abbreviated\" }) ||\n          match.era(dateString, { width: \"narrow\" })\n        );\n    }\n  }\n\n  set(date, flags, value) {\n    flags.era = value;\n    date.setFullYear(value, 0, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"R\", \"u\", \"t\", \"T\"];\n}\n"]},"metadata":{},"sourceType":"module"}