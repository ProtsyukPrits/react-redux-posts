{"ast":null,"code":"\"use strict\";\n\nexports.getISOWeeksInYear = getISOWeeksInYear;\n\nvar _index = require(\"./addWeeks.js\");\n\nvar _index2 = require(\"./constants.js\");\n\nvar _index3 = require(\"./startOfISOWeekYear.js\");\n/**\n * @name getISOWeeksInYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the number of weeks in an ISO week-numbering year of the given date.\n *\n * @description\n * Get the number of weeks in an ISO week-numbering year of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The number of ISO weeks in a year\n *\n * @example\n * // How many weeks are in ISO week-numbering year 2015?\n * const result = getISOWeeksInYear(new Date(2015, 1, 11))\n * //=> 53\n */\n\n\nfunction getISOWeeksInYear(date) {\n  const thisYear = (0, _index3.startOfISOWeekYear)(date);\n  const nextYear = (0, _index3.startOfISOWeekYear)((0, _index.addWeeks)(thisYear, 60));\n  const diff = +nextYear - +thisYear; // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n\n  return Math.round(diff / _index2.millisecondsInWeek);\n}","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/node_modules/date-fns/getISOWeeksInYear.js"],"names":["exports","getISOWeeksInYear","_index","require","_index2","_index3","date","thisYear","startOfISOWeekYear","nextYear","addWeeks","diff","Math","round","millisecondsInWeek"],"mappings":"AAAA;;AACAA,OAAO,CAACC,iBAAR,GAA4BA,iBAA5B;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,eAAD,CAApB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,gBAAD,CAArB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,yBAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,iBAAT,CAA2BK,IAA3B,EAAiC;AAC/B,QAAMC,QAAQ,GAAG,CAAC,GAAGF,OAAO,CAACG,kBAAZ,EAAgCF,IAAhC,CAAjB;AACA,QAAMG,QAAQ,GAAG,CAAC,GAAGJ,OAAO,CAACG,kBAAZ,EACf,CAAC,GAAGN,MAAM,CAACQ,QAAX,EAAqBH,QAArB,EAA+B,EAA/B,CADe,CAAjB;AAGA,QAAMI,IAAI,GAAG,CAACF,QAAD,GAAY,CAACF,QAA1B,CAL+B,CAO/B;AACA;AACA;;AACA,SAAOK,IAAI,CAACC,KAAL,CAAWF,IAAI,GAAGP,OAAO,CAACU,kBAA1B,CAAP;AACD","sourcesContent":["\"use strict\";\nexports.getISOWeeksInYear = getISOWeeksInYear;\nvar _index = require(\"./addWeeks.js\");\nvar _index2 = require(\"./constants.js\");\nvar _index3 = require(\"./startOfISOWeekYear.js\");\n\n/**\n * @name getISOWeeksInYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the number of weeks in an ISO week-numbering year of the given date.\n *\n * @description\n * Get the number of weeks in an ISO week-numbering year of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The number of ISO weeks in a year\n *\n * @example\n * // How many weeks are in ISO week-numbering year 2015?\n * const result = getISOWeeksInYear(new Date(2015, 1, 11))\n * //=> 53\n */\nfunction getISOWeeksInYear(date) {\n  const thisYear = (0, _index3.startOfISOWeekYear)(date);\n  const nextYear = (0, _index3.startOfISOWeekYear)(\n    (0, _index.addWeeks)(thisYear, 60),\n  );\n  const diff = +nextYear - +thisYear;\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / _index2.millisecondsInWeek);\n}\n"]},"metadata":{},"sourceType":"script"}