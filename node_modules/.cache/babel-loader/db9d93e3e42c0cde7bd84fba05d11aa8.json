{"ast":null,"code":"\"use strict\";\n\nexports.isTomorrow = isTomorrow;\n\nvar _index = require(\"./addDays.js\");\n\nvar _index2 = require(\"./constructNow.js\");\n\nvar _index3 = require(\"./isSameDay.js\");\n/**\n * @name isTomorrow\n * @category Day Helpers\n * @summary Is the given date tomorrow?\n * @pure false\n *\n * @description\n * Is the given date tomorrow?\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n *\n * @returns The date is tomorrow\n *\n * @example\n * // If today is 6 October 2014, is 7 October 14:00:00 tomorrow?\n * const result = isTomorrow(new Date(2014, 9, 7, 14, 0))\n * //=> true\n */\n\n\nfunction isTomorrow(date) {\n  return (0, _index3.isSameDay)(date, (0, _index.addDays)((0, _index2.constructNow)(date), 1));\n}","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/node_modules/date-fns/isTomorrow.js"],"names":["exports","isTomorrow","_index","require","_index2","_index3","date","isSameDay","addDays","constructNow"],"mappings":"AAAA;;AACAA,OAAO,CAACC,UAAR,GAAqBA,UAArB;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,cAAD,CAApB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,mBAAD,CAArB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,gBAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,UAAT,CAAoBK,IAApB,EAA0B;AACxB,SAAO,CAAC,GAAGD,OAAO,CAACE,SAAZ,EACLD,IADK,EAEL,CAAC,GAAGJ,MAAM,CAACM,OAAX,EAAoB,CAAC,GAAGJ,OAAO,CAACK,YAAZ,EAA0BH,IAA1B,CAApB,EAAqD,CAArD,CAFK,CAAP;AAID","sourcesContent":["\"use strict\";\nexports.isTomorrow = isTomorrow;\nvar _index = require(\"./addDays.js\");\nvar _index2 = require(\"./constructNow.js\");\nvar _index3 = require(\"./isSameDay.js\");\n\n/**\n * @name isTomorrow\n * @category Day Helpers\n * @summary Is the given date tomorrow?\n * @pure false\n *\n * @description\n * Is the given date tomorrow?\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n *\n * @returns The date is tomorrow\n *\n * @example\n * // If today is 6 October 2014, is 7 October 14:00:00 tomorrow?\n * const result = isTomorrow(new Date(2014, 9, 7, 14, 0))\n * //=> true\n */\nfunction isTomorrow(date) {\n  return (0, _index3.isSameDay)(\n    date,\n    (0, _index.addDays)((0, _index2.constructNow)(date), 1),\n  );\n}\n"]},"metadata":{},"sourceType":"script"}