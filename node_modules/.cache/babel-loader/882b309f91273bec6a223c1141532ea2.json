{"ast":null,"code":"import _objectSpread from \"/home/dmytro/react-redux-posts/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/home/dmytro/react-redux-posts/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _classCallCheck from \"/home/dmytro/react-redux-posts/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/dmytro/react-redux-posts/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/dmytro/react-redux-posts/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/dmytro/react-redux-posts/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar _excluded = [\"transition\", \"transitionEnd\"];\nimport { getOrigin, checkTargetForNewValues } from '../utils/setters.mjs';\nimport { parseDomVariant } from './utils/parse-dom-variant.mjs';\nimport { VisualElement } from '../VisualElement.mjs';\n\nvar DOMVisualElement = /*#__PURE__*/function (_VisualElement) {\n  _inherits(DOMVisualElement, _VisualElement);\n\n  var _super = _createSuper(DOMVisualElement);\n\n  function DOMVisualElement() {\n    _classCallCheck(this, DOMVisualElement);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(DOMVisualElement, [{\n    key: \"sortInstanceNodePosition\",\n    value: function sortInstanceNodePosition(a, b) {\n      /**\n       * compareDocumentPosition returns a bitmask, by using the bitwise &\n       * we're returning true if 2 in that bitmask is set to true. 2 is set\n       * to true if b preceeds a.\n       */\n      return a.compareDocumentPosition(b) & 2 ? 1 : -1;\n    }\n  }, {\n    key: \"getBaseTargetFromProps\",\n    value: function getBaseTargetFromProps(props, key) {\n      var _a;\n\n      return (_a = props.style) === null || _a === void 0 ? void 0 : _a[key];\n    }\n  }, {\n    key: \"removeValueFromRenderState\",\n    value: function removeValueFromRenderState(key, _ref) {\n      var vars = _ref.vars,\n          style = _ref.style;\n      delete vars[key];\n      delete style[key];\n    }\n  }, {\n    key: \"makeTargetAnimatableFromInstance\",\n    value: function makeTargetAnimatableFromInstance(_ref2, _ref3, isMounted) {\n      var transition = _ref2.transition,\n          transitionEnd = _ref2.transitionEnd,\n          target = _objectWithoutProperties(_ref2, _excluded);\n\n      var transformValues = _ref3.transformValues;\n      var origin = getOrigin(target, transition || {}, this);\n      /**\n       * If Framer has provided a function to convert `Color` etc value types, convert them\n       */\n\n      if (transformValues) {\n        if (transitionEnd) transitionEnd = transformValues(transitionEnd);\n        if (target) target = transformValues(target);\n        if (origin) origin = transformValues(origin);\n      }\n\n      if (isMounted) {\n        checkTargetForNewValues(this, target, origin);\n        var parsed = parseDomVariant(this, target, origin, transitionEnd);\n        transitionEnd = parsed.transitionEnd;\n        target = parsed.target;\n      }\n\n      return _objectSpread({\n        transition: transition,\n        transitionEnd: transitionEnd\n      }, target);\n    }\n  }]);\n\n  return DOMVisualElement;\n}(VisualElement);\n\nexport { DOMVisualElement };","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/node_modules/framer-motion/dist/es/render/dom/DOMVisualElement.mjs"],"names":["getOrigin","checkTargetForNewValues","parseDomVariant","VisualElement","DOMVisualElement","a","b","compareDocumentPosition","props","key","_a","style","vars","isMounted","transition","transitionEnd","target","transformValues","origin","parsed"],"mappings":";;;;;;;AAAA,SAASA,SAAT,EAAoBC,uBAApB,QAAmD,sBAAnD;AACA,SAASC,eAAT,QAAgC,+BAAhC;AACA,SAASC,aAAT,QAA8B,sBAA9B;;IAEMC,gB;;;;;;;;;;;;;WACF,kCAAyBC,CAAzB,EAA4BC,CAA5B,EAA+B;AAC3B;AACR;AACA;AACA;AACA;AACQ,aAAOD,CAAC,CAACE,uBAAF,CAA0BD,CAA1B,IAA+B,CAA/B,GAAmC,CAAnC,GAAuC,CAAC,CAA/C;AACH;;;WACD,gCAAuBE,KAAvB,EAA8BC,GAA9B,EAAmC;AAC/B,UAAIC,EAAJ;;AACA,aAAO,CAACA,EAAE,GAAGF,KAAK,CAACG,KAAZ,MAAuB,IAAvB,IAA+BD,EAAE,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,EAAE,CAACD,GAAD,CAAjE;AACH;;;WACD,oCAA2BA,GAA3B,QAAiD;AAAA,UAAfG,IAAe,QAAfA,IAAe;AAAA,UAATD,KAAS,QAATA,KAAS;AAC7C,aAAOC,IAAI,CAACH,GAAD,CAAX;AACA,aAAOE,KAAK,CAACF,GAAD,CAAZ;AACH;;;WACD,wDAAgGI,SAAhG,EAA2G;AAAA,UAAxEC,UAAwE,SAAxEA,UAAwE;AAAA,UAA5DC,aAA4D,SAA5DA,aAA4D;AAAA,UAA1CC,MAA0C;;AAAA,UAA9BC,eAA8B,SAA9BA,eAA8B;AACvG,UAAIC,MAAM,GAAGlB,SAAS,CAACgB,MAAD,EAASF,UAAU,IAAI,EAAvB,EAA2B,IAA3B,CAAtB;AACA;AACR;AACA;;AACQ,UAAIG,eAAJ,EAAqB;AACjB,YAAIF,aAAJ,EACIA,aAAa,GAAGE,eAAe,CAACF,aAAD,CAA/B;AACJ,YAAIC,MAAJ,EACIA,MAAM,GAAGC,eAAe,CAACD,MAAD,CAAxB;AACJ,YAAIE,MAAJ,EACIA,MAAM,GAAGD,eAAe,CAACC,MAAD,CAAxB;AACP;;AACD,UAAIL,SAAJ,EAAe;AACXZ,QAAAA,uBAAuB,CAAC,IAAD,EAAOe,MAAP,EAAeE,MAAf,CAAvB;AACA,YAAMC,MAAM,GAAGjB,eAAe,CAAC,IAAD,EAAOc,MAAP,EAAeE,MAAf,EAAuBH,aAAvB,CAA9B;AACAA,QAAAA,aAAa,GAAGI,MAAM,CAACJ,aAAvB;AACAC,QAAAA,MAAM,GAAGG,MAAM,CAACH,MAAhB;AACH;;AACD;AACIF,QAAAA,UAAU,EAAVA,UADJ;AAEIC,QAAAA,aAAa,EAAbA;AAFJ,SAGOC,MAHP;AAKH;;;;EAzC0Bb,a;;AA4C/B,SAASC,gBAAT","sourcesContent":["import { getOrigin, checkTargetForNewValues } from '../utils/setters.mjs';\nimport { parseDomVariant } from './utils/parse-dom-variant.mjs';\nimport { VisualElement } from '../VisualElement.mjs';\n\nclass DOMVisualElement extends VisualElement {\n    sortInstanceNodePosition(a, b) {\n        /**\n         * compareDocumentPosition returns a bitmask, by using the bitwise &\n         * we're returning true if 2 in that bitmask is set to true. 2 is set\n         * to true if b preceeds a.\n         */\n        return a.compareDocumentPosition(b) & 2 ? 1 : -1;\n    }\n    getBaseTargetFromProps(props, key) {\n        var _a;\n        return (_a = props.style) === null || _a === void 0 ? void 0 : _a[key];\n    }\n    removeValueFromRenderState(key, { vars, style }) {\n        delete vars[key];\n        delete style[key];\n    }\n    makeTargetAnimatableFromInstance({ transition, transitionEnd, ...target }, { transformValues }, isMounted) {\n        let origin = getOrigin(target, transition || {}, this);\n        /**\n         * If Framer has provided a function to convert `Color` etc value types, convert them\n         */\n        if (transformValues) {\n            if (transitionEnd)\n                transitionEnd = transformValues(transitionEnd);\n            if (target)\n                target = transformValues(target);\n            if (origin)\n                origin = transformValues(origin);\n        }\n        if (isMounted) {\n            checkTargetForNewValues(this, target, origin);\n            const parsed = parseDomVariant(this, target, origin, transitionEnd);\n            transitionEnd = parsed.transitionEnd;\n            target = parsed.target;\n        }\n        return {\n            transition,\n            transitionEnd,\n            ...target,\n        };\n    }\n}\n\nexport { DOMVisualElement };\n"]},"metadata":{},"sourceType":"module"}