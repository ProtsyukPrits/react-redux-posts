{"ast":null,"code":"\"use strict\";\n\nexports.eachMinuteOfInterval = eachMinuteOfInterval;\n\nvar _index = require(\"./addMinutes.js\");\n\nvar _index2 = require(\"./startOfMinute.js\");\n\nvar _index3 = require(\"./toDate.js\");\n/**\n * The {@link eachMinuteOfInterval} function options.\n */\n\n/**\n * @name eachMinuteOfInterval\n * @category Interval Helpers\n * @summary Return the array of minutes within the specified time interval.\n *\n * @description\n * Returns the array of minutes within the specified time interval.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param interval - The interval.\n * @param options - An object with options.\n *\n * @returns The array with starts of minutes from the minute of the interval start to the minute of the interval end\n *\n * @example\n * // Each minute between 14 October 2020, 13:00 and 14 October 2020, 13:03\n * const result = eachMinuteOfInterval({\n *   start: new Date(2014, 9, 14, 13),\n *   end: new Date(2014, 9, 14, 13, 3)\n * })\n * //=> [\n * //   Wed Oct 14 2014 13:00:00,\n * //   Wed Oct 14 2014 13:01:00,\n * //   Wed Oct 14 2014 13:02:00,\n * //   Wed Oct 14 2014 13:03:00\n * // ]\n */\n\n\nfunction eachMinuteOfInterval(interval, options) {\n  const startDate = (0, _index2.startOfMinute)((0, _index3.toDate)(interval.start));\n  const endDate = (0, _index3.toDate)(interval.end);\n  let reversed = +startDate > +endDate;\n  const endTime = reversed ? +startDate : +endDate;\n  let currentDate = reversed ? endDate : startDate;\n  let step = options?.step ?? 1;\n  if (!step) return [];\n\n  if (step < 0) {\n    step = -step;\n    reversed = !reversed;\n  }\n\n  const dates = [];\n\n  while (+currentDate <= endTime) {\n    dates.push((0, _index3.toDate)(currentDate));\n    currentDate = (0, _index.addMinutes)(currentDate, step);\n  }\n\n  return reversed ? dates.reverse() : dates;\n}","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/node_modules/date-fns/eachMinuteOfInterval.js"],"names":["exports","eachMinuteOfInterval","_index","require","_index2","_index3","interval","options","startDate","startOfMinute","toDate","start","endDate","end","reversed","endTime","currentDate","step","dates","push","addMinutes","reverse"],"mappings":"AAAA;;AACAA,OAAO,CAACC,oBAAR,GAA+BA,oBAA/B;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,iBAAD,CAApB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,oBAAD,CAArB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,aAAD,CAArB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,oBAAT,CAA8BK,QAA9B,EAAwCC,OAAxC,EAAiD;AAC/C,QAAMC,SAAS,GAAG,CAAC,GAAGJ,OAAO,CAACK,aAAZ,EAChB,CAAC,GAAGJ,OAAO,CAACK,MAAZ,EAAoBJ,QAAQ,CAACK,KAA7B,CADgB,CAAlB;AAGA,QAAMC,OAAO,GAAG,CAAC,GAAGP,OAAO,CAACK,MAAZ,EAAoBJ,QAAQ,CAACO,GAA7B,CAAhB;AAEA,MAAIC,QAAQ,GAAG,CAACN,SAAD,GAAa,CAACI,OAA7B;AACA,QAAMG,OAAO,GAAGD,QAAQ,GAAG,CAACN,SAAJ,GAAgB,CAACI,OAAzC;AACA,MAAII,WAAW,GAAGF,QAAQ,GAAGF,OAAH,GAAaJ,SAAvC;AAEA,MAAIS,IAAI,GAAGV,OAAO,EAAEU,IAAT,IAAiB,CAA5B;AACA,MAAI,CAACA,IAAL,EAAW,OAAO,EAAP;;AACX,MAAIA,IAAI,GAAG,CAAX,EAAc;AACZA,IAAAA,IAAI,GAAG,CAACA,IAAR;AACAH,IAAAA,QAAQ,GAAG,CAACA,QAAZ;AACD;;AAED,QAAMI,KAAK,GAAG,EAAd;;AAEA,SAAO,CAACF,WAAD,IAAgBD,OAAvB,EAAgC;AAC9BG,IAAAA,KAAK,CAACC,IAAN,CAAW,CAAC,GAAGd,OAAO,CAACK,MAAZ,EAAoBM,WAApB,CAAX;AACAA,IAAAA,WAAW,GAAG,CAAC,GAAGd,MAAM,CAACkB,UAAX,EAAuBJ,WAAvB,EAAoCC,IAApC,CAAd;AACD;;AAED,SAAOH,QAAQ,GAAGI,KAAK,CAACG,OAAN,EAAH,GAAqBH,KAApC;AACD","sourcesContent":["\"use strict\";\nexports.eachMinuteOfInterval = eachMinuteOfInterval;\nvar _index = require(\"./addMinutes.js\");\nvar _index2 = require(\"./startOfMinute.js\");\nvar _index3 = require(\"./toDate.js\");\n\n/**\n * The {@link eachMinuteOfInterval} function options.\n */\n\n/**\n * @name eachMinuteOfInterval\n * @category Interval Helpers\n * @summary Return the array of minutes within the specified time interval.\n *\n * @description\n * Returns the array of minutes within the specified time interval.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param interval - The interval.\n * @param options - An object with options.\n *\n * @returns The array with starts of minutes from the minute of the interval start to the minute of the interval end\n *\n * @example\n * // Each minute between 14 October 2020, 13:00 and 14 October 2020, 13:03\n * const result = eachMinuteOfInterval({\n *   start: new Date(2014, 9, 14, 13),\n *   end: new Date(2014, 9, 14, 13, 3)\n * })\n * //=> [\n * //   Wed Oct 14 2014 13:00:00,\n * //   Wed Oct 14 2014 13:01:00,\n * //   Wed Oct 14 2014 13:02:00,\n * //   Wed Oct 14 2014 13:03:00\n * // ]\n */\nfunction eachMinuteOfInterval(interval, options) {\n  const startDate = (0, _index2.startOfMinute)(\n    (0, _index3.toDate)(interval.start),\n  );\n  const endDate = (0, _index3.toDate)(interval.end);\n\n  let reversed = +startDate > +endDate;\n  const endTime = reversed ? +startDate : +endDate;\n  let currentDate = reversed ? endDate : startDate;\n\n  let step = options?.step ?? 1;\n  if (!step) return [];\n  if (step < 0) {\n    step = -step;\n    reversed = !reversed;\n  }\n\n  const dates = [];\n\n  while (+currentDate <= endTime) {\n    dates.push((0, _index3.toDate)(currentDate));\n    currentDate = (0, _index.addMinutes)(currentDate, step);\n  }\n\n  return reversed ? dates.reverse() : dates;\n}\n"]},"metadata":{},"sourceType":"script"}