{"ast":null,"code":"\"use strict\";\n\nexports.getISOWeekYear = getISOWeekYear;\n\nvar _index = require(\"./constructFrom.js\");\n\nvar _index2 = require(\"./startOfISOWeek.js\");\n\nvar _index3 = require(\"./toDate.js\");\n/**\n * @name getISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the ISO week-numbering year of the given date.\n *\n * @description\n * Get the ISO week-numbering year of the given date,\n * which always starts 3 days before the year's first Thursday.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The ISO week-numbering year\n *\n * @example\n * // Which ISO-week numbering year is 2 January 2005?\n * const result = getISOWeekYear(new Date(2005, 0, 2))\n * //=> 2004\n */\n\n\nfunction getISOWeekYear(date) {\n  const _date = (0, _index3.toDate)(date);\n\n  const year = _date.getFullYear();\n\n  const fourthOfJanuaryOfNextYear = (0, _index.constructFrom)(date, 0);\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = (0, _index2.startOfISOWeek)(fourthOfJanuaryOfNextYear);\n  const fourthOfJanuaryOfThisYear = (0, _index.constructFrom)(date, 0);\n  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = (0, _index2.startOfISOWeek)(fourthOfJanuaryOfThisYear);\n\n  if (_date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/node_modules/date-fns/getISOWeekYear.js"],"names":["exports","getISOWeekYear","_index","require","_index2","_index3","date","_date","toDate","year","getFullYear","fourthOfJanuaryOfNextYear","constructFrom","setFullYear","setHours","startOfNextYear","startOfISOWeek","fourthOfJanuaryOfThisYear","startOfThisYear","getTime"],"mappings":"AAAA;;AACAA,OAAO,CAACC,cAAR,GAAyBA,cAAzB;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,oBAAD,CAApB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,qBAAD,CAArB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,aAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,cAAT,CAAwBK,IAAxB,EAA8B;AAC5B,QAAMC,KAAK,GAAG,CAAC,GAAGF,OAAO,CAACG,MAAZ,EAAoBF,IAApB,CAAd;;AACA,QAAMG,IAAI,GAAGF,KAAK,CAACG,WAAN,EAAb;;AAEA,QAAMC,yBAAyB,GAAG,CAAC,GAAGT,MAAM,CAACU,aAAX,EAA0BN,IAA1B,EAAgC,CAAhC,CAAlC;AACAK,EAAAA,yBAAyB,CAACE,WAA1B,CAAsCJ,IAAI,GAAG,CAA7C,EAAgD,CAAhD,EAAmD,CAAnD;AACAE,EAAAA,yBAAyB,CAACG,QAA1B,CAAmC,CAAnC,EAAsC,CAAtC,EAAyC,CAAzC,EAA4C,CAA5C;AACA,QAAMC,eAAe,GAAG,CAAC,GAAGX,OAAO,CAACY,cAAZ,EACtBL,yBADsB,CAAxB;AAIA,QAAMM,yBAAyB,GAAG,CAAC,GAAGf,MAAM,CAACU,aAAX,EAA0BN,IAA1B,EAAgC,CAAhC,CAAlC;AACAW,EAAAA,yBAAyB,CAACJ,WAA1B,CAAsCJ,IAAtC,EAA4C,CAA5C,EAA+C,CAA/C;AACAQ,EAAAA,yBAAyB,CAACH,QAA1B,CAAmC,CAAnC,EAAsC,CAAtC,EAAyC,CAAzC,EAA4C,CAA5C;AACA,QAAMI,eAAe,GAAG,CAAC,GAAGd,OAAO,CAACY,cAAZ,EACtBC,yBADsB,CAAxB;;AAIA,MAAIV,KAAK,CAACY,OAAN,MAAmBJ,eAAe,CAACI,OAAhB,EAAvB,EAAkD;AAChD,WAAOV,IAAI,GAAG,CAAd;AACD,GAFD,MAEO,IAAIF,KAAK,CAACY,OAAN,MAAmBD,eAAe,CAACC,OAAhB,EAAvB,EAAkD;AACvD,WAAOV,IAAP;AACD,GAFM,MAEA;AACL,WAAOA,IAAI,GAAG,CAAd;AACD;AACF","sourcesContent":["\"use strict\";\nexports.getISOWeekYear = getISOWeekYear;\nvar _index = require(\"./constructFrom.js\");\nvar _index2 = require(\"./startOfISOWeek.js\");\nvar _index3 = require(\"./toDate.js\");\n\n/**\n * @name getISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the ISO week-numbering year of the given date.\n *\n * @description\n * Get the ISO week-numbering year of the given date,\n * which always starts 3 days before the year's first Thursday.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The ISO week-numbering year\n *\n * @example\n * // Which ISO-week numbering year is 2 January 2005?\n * const result = getISOWeekYear(new Date(2005, 0, 2))\n * //=> 2004\n */\nfunction getISOWeekYear(date) {\n  const _date = (0, _index3.toDate)(date);\n  const year = _date.getFullYear();\n\n  const fourthOfJanuaryOfNextYear = (0, _index.constructFrom)(date, 0);\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = (0, _index2.startOfISOWeek)(\n    fourthOfJanuaryOfNextYear,\n  );\n\n  const fourthOfJanuaryOfThisYear = (0, _index.constructFrom)(date, 0);\n  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = (0, _index2.startOfISOWeek)(\n    fourthOfJanuaryOfThisYear,\n  );\n\n  if (_date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}