{"ast":null,"code":"import { daysInYear } from \"./constants.mjs\";\n/**\n * @name milliseconds\n * @category Millisecond Helpers\n * @summary\n * Returns the number of milliseconds in the specified, years, months, weeks, days, hours, minutes and seconds.\n *\n * @description\n * Returns the number of milliseconds in the specified, years, months, weeks, days, hours, minutes and seconds.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occures every 4 years, except for years that are divisable by 100 and not divisable by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n *\n * One month is a year divided by 12.\n *\n * @param duration - The object with years, months, weeks, days, hours, minutes and seconds to be added.\n *\n * @returns The milliseconds\n *\n * @example\n * // 1 year in milliseconds\n * milliseconds({ years: 1 })\n * //=> 31556952000\n *\n * // 3 months in milliseconds\n * milliseconds({ months: 3 })\n * //=> 7889238000\n */\n\nexport function milliseconds(_ref) {\n  let {\n    years,\n    months,\n    weeks,\n    days,\n    hours,\n    minutes,\n    seconds\n  } = _ref;\n  let totalDays = 0;\n  if (years) totalDays += years * daysInYear;\n  if (months) totalDays += months * (daysInYear / 12);\n  if (weeks) totalDays += weeks * 7;\n  if (days) totalDays += days;\n  let totalSeconds = totalDays * 24 * 60 * 60;\n  if (hours) totalSeconds += hours * 60 * 60;\n  if (minutes) totalSeconds += minutes * 60;\n  if (seconds) totalSeconds += seconds;\n  return Math.trunc(totalSeconds * 1000);\n} // Fallback for modularized imports:\n\nexport default milliseconds;","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/node_modules/date-fns/milliseconds.mjs"],"names":["daysInYear","milliseconds","years","months","weeks","days","hours","minutes","seconds","totalDays","totalSeconds","Math","trunc"],"mappings":"AAAA,SAASA,UAAT,QAA2B,iBAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,YAAT,OAQJ;AAAA,MAR0B;AAC3BC,IAAAA,KAD2B;AAE3BC,IAAAA,MAF2B;AAG3BC,IAAAA,KAH2B;AAI3BC,IAAAA,IAJ2B;AAK3BC,IAAAA,KAL2B;AAM3BC,IAAAA,OAN2B;AAO3BC,IAAAA;AAP2B,GAQ1B;AACD,MAAIC,SAAS,GAAG,CAAhB;AAEA,MAAIP,KAAJ,EAAWO,SAAS,IAAIP,KAAK,GAAGF,UAArB;AACX,MAAIG,MAAJ,EAAYM,SAAS,IAAIN,MAAM,IAAIH,UAAU,GAAG,EAAjB,CAAnB;AACZ,MAAII,KAAJ,EAAWK,SAAS,IAAIL,KAAK,GAAG,CAArB;AACX,MAAIC,IAAJ,EAAUI,SAAS,IAAIJ,IAAb;AAEV,MAAIK,YAAY,GAAGD,SAAS,GAAG,EAAZ,GAAiB,EAAjB,GAAsB,EAAzC;AAEA,MAAIH,KAAJ,EAAWI,YAAY,IAAIJ,KAAK,GAAG,EAAR,GAAa,EAA7B;AACX,MAAIC,OAAJ,EAAaG,YAAY,IAAIH,OAAO,GAAG,EAA1B;AACb,MAAIC,OAAJ,EAAaE,YAAY,IAAIF,OAAhB;AAEb,SAAOG,IAAI,CAACC,KAAL,CAAWF,YAAY,GAAG,IAA1B,CAAP;AACD,C,CAED;;AACA,eAAeT,YAAf","sourcesContent":["import { daysInYear } from \"./constants.mjs\";\n\n/**\n * @name milliseconds\n * @category Millisecond Helpers\n * @summary\n * Returns the number of milliseconds in the specified, years, months, weeks, days, hours, minutes and seconds.\n *\n * @description\n * Returns the number of milliseconds in the specified, years, months, weeks, days, hours, minutes and seconds.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occures every 4 years, except for years that are divisable by 100 and not divisable by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n *\n * One month is a year divided by 12.\n *\n * @param duration - The object with years, months, weeks, days, hours, minutes and seconds to be added.\n *\n * @returns The milliseconds\n *\n * @example\n * // 1 year in milliseconds\n * milliseconds({ years: 1 })\n * //=> 31556952000\n *\n * // 3 months in milliseconds\n * milliseconds({ months: 3 })\n * //=> 7889238000\n */\nexport function milliseconds({\n  years,\n  months,\n  weeks,\n  days,\n  hours,\n  minutes,\n  seconds,\n}) {\n  let totalDays = 0;\n\n  if (years) totalDays += years * daysInYear;\n  if (months) totalDays += months * (daysInYear / 12);\n  if (weeks) totalDays += weeks * 7;\n  if (days) totalDays += days;\n\n  let totalSeconds = totalDays * 24 * 60 * 60;\n\n  if (hours) totalSeconds += hours * 60 * 60;\n  if (minutes) totalSeconds += minutes * 60;\n  if (seconds) totalSeconds += seconds;\n\n  return Math.trunc(totalSeconds * 1000);\n}\n\n// Fallback for modularized imports:\nexport default milliseconds;\n"]},"metadata":{},"sourceType":"module"}