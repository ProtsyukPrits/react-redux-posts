{"ast":null,"code":"\"use strict\";\n\nexports.formatDistance = formatDistance;\n\nvar _index = require(\"./compareAsc.js\");\n\nvar _index2 = require(\"./constants.js\");\n\nvar _index3 = require(\"./differenceInMonths.js\");\n\nvar _index4 = require(\"./differenceInSeconds.js\");\n\nvar _index5 = require(\"./toDate.js\");\n\nvar _index6 = require(\"./_lib/defaultLocale.js\");\n\nvar _index7 = require(\"./_lib/defaultOptions.js\");\n\nvar _index8 = require(\"./_lib/getTimezoneOffsetInMilliseconds.js\");\n/**\n * The {@link formatDistance} function options.\n */\n\n/**\n * @name formatDistance\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words.\n *\n * | Distance between dates                                            | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance between dates | Result               |\n * |------------------------|----------------------|\n * | 0 secs ... 5 secs      | less than 5 seconds  |\n * | 5 secs ... 10 secs     | less than 10 seconds |\n * | 10 secs ... 20 secs    | less than 20 seconds |\n * | 20 secs ... 40 secs    | half a minute        |\n * | 40 secs ... 60 secs    | less than a minute   |\n * | 60 secs ... 90 secs    | 1 minute             |\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date\n * @param baseDate - The date to compare with\n * @param options - An object with options\n *\n * @returns The distance in words\n *\n * @throws `date` must not be Invalid Date\n * @throws `baseDate` must not be Invalid Date\n * @throws `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * const result = formatDistance(new Date(2014, 6, 2), new Date(2015, 0, 1))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00, including seconds?\n * const result = formatDistance(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0),\n *   { includeSeconds: true }\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * const result = formatDistance(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> 'about 1 year ago'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = formatDistance(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> 'pli ol 1 jaro'\n */\n\n\nfunction formatDistance(date, baseDate, options) {\n  const defaultOptions = (0, _index7.getDefaultOptions)();\n  const locale = options?.locale ?? defaultOptions.locale ?? _index6.defaultLocale;\n  const minutesInAlmostTwoDays = 2520;\n  const comparison = (0, _index.compareAsc)(date, baseDate);\n\n  if (isNaN(comparison)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  const localizeOptions = Object.assign({}, options, {\n    addSuffix: options?.addSuffix,\n    comparison: comparison\n  });\n  let dateLeft;\n  let dateRight;\n\n  if (comparison > 0) {\n    dateLeft = (0, _index5.toDate)(baseDate);\n    dateRight = (0, _index5.toDate)(date);\n  } else {\n    dateLeft = (0, _index5.toDate)(date);\n    dateRight = (0, _index5.toDate)(baseDate);\n  }\n\n  const seconds = (0, _index4.differenceInSeconds)(dateRight, dateLeft);\n  const offsetInSeconds = ((0, _index8.getTimezoneOffsetInMilliseconds)(dateRight) - (0, _index8.getTimezoneOffsetInMilliseconds)(dateLeft)) / 1000;\n  const minutes = Math.round((seconds - offsetInSeconds) / 60);\n  let months; // 0 up to 2 mins\n\n  if (minutes < 2) {\n    if (options?.includeSeconds) {\n      if (seconds < 5) {\n        return locale.formatDistance(\"lessThanXSeconds\", 5, localizeOptions);\n      } else if (seconds < 10) {\n        return locale.formatDistance(\"lessThanXSeconds\", 10, localizeOptions);\n      } else if (seconds < 20) {\n        return locale.formatDistance(\"lessThanXSeconds\", 20, localizeOptions);\n      } else if (seconds < 40) {\n        return locale.formatDistance(\"halfAMinute\", 0, localizeOptions);\n      } else if (seconds < 60) {\n        return locale.formatDistance(\"lessThanXMinutes\", 1, localizeOptions);\n      } else {\n        return locale.formatDistance(\"xMinutes\", 1, localizeOptions);\n      }\n    } else {\n      if (minutes === 0) {\n        return locale.formatDistance(\"lessThanXMinutes\", 1, localizeOptions);\n      } else {\n        return locale.formatDistance(\"xMinutes\", minutes, localizeOptions);\n      }\n    } // 2 mins up to 0.75 hrs\n\n  } else if (minutes < 45) {\n    return locale.formatDistance(\"xMinutes\", minutes, localizeOptions); // 0.75 hrs up to 1.5 hrs\n  } else if (minutes < 90) {\n    return locale.formatDistance(\"aboutXHours\", 1, localizeOptions); // 1.5 hrs up to 24 hrs\n  } else if (minutes < _index2.minutesInDay) {\n    const hours = Math.round(minutes / 60);\n    return locale.formatDistance(\"aboutXHours\", hours, localizeOptions); // 1 day up to 1.75 days\n  } else if (minutes < minutesInAlmostTwoDays) {\n    return locale.formatDistance(\"xDays\", 1, localizeOptions); // 1.75 days up to 30 days\n  } else if (minutes < _index2.minutesInMonth) {\n    const days = Math.round(minutes / _index2.minutesInDay);\n    return locale.formatDistance(\"xDays\", days, localizeOptions); // 1 month up to 2 months\n  } else if (minutes < _index2.minutesInMonth * 2) {\n    months = Math.round(minutes / _index2.minutesInMonth);\n    return locale.formatDistance(\"aboutXMonths\", months, localizeOptions);\n  }\n\n  months = (0, _index3.differenceInMonths)(dateRight, dateLeft); // 2 months up to 12 months\n\n  if (months < 12) {\n    const nearestMonth = Math.round(minutes / _index2.minutesInMonth);\n    return locale.formatDistance(\"xMonths\", nearestMonth, localizeOptions); // 1 year up to max Date\n  } else {\n    const monthsSinceStartOfYear = months % 12;\n    const years = Math.trunc(months / 12); // N years up to 1 years 3 months\n\n    if (monthsSinceStartOfYear < 3) {\n      return locale.formatDistance(\"aboutXYears\", years, localizeOptions); // N years 3 months up to N years 9 months\n    } else if (monthsSinceStartOfYear < 9) {\n      return locale.formatDistance(\"overXYears\", years, localizeOptions); // N years 9 months up to N year 12 months\n    } else {\n      return locale.formatDistance(\"almostXYears\", years + 1, localizeOptions);\n    }\n  }\n}","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/node_modules/date-fns/formatDistance.js"],"names":["exports","formatDistance","_index","require","_index2","_index3","_index4","_index5","_index6","_index7","_index8","date","baseDate","options","defaultOptions","getDefaultOptions","locale","defaultLocale","minutesInAlmostTwoDays","comparison","compareAsc","isNaN","RangeError","localizeOptions","Object","assign","addSuffix","dateLeft","dateRight","toDate","seconds","differenceInSeconds","offsetInSeconds","getTimezoneOffsetInMilliseconds","minutes","Math","round","months","includeSeconds","minutesInDay","hours","minutesInMonth","days","differenceInMonths","nearestMonth","monthsSinceStartOfYear","years","trunc"],"mappings":"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","sourcesContent":["\"use strict\";\nexports.formatDistance = formatDistance;\nvar _index = require(\"./compareAsc.js\");\nvar _index2 = require(\"./constants.js\");\nvar _index3 = require(\"./differenceInMonths.js\");\nvar _index4 = require(\"./differenceInSeconds.js\");\nvar _index5 = require(\"./toDate.js\");\n\nvar _index6 = require(\"./_lib/defaultLocale.js\");\nvar _index7 = require(\"./_lib/defaultOptions.js\");\nvar _index8 = require(\"./_lib/getTimezoneOffsetInMilliseconds.js\");\n\n/**\n * The {@link formatDistance} function options.\n */\n\n/**\n * @name formatDistance\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words.\n *\n * | Distance between dates                                            | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance between dates | Result               |\n * |------------------------|----------------------|\n * | 0 secs ... 5 secs      | less than 5 seconds  |\n * | 5 secs ... 10 secs     | less than 10 seconds |\n * | 10 secs ... 20 secs    | less than 20 seconds |\n * | 20 secs ... 40 secs    | half a minute        |\n * | 40 secs ... 60 secs    | less than a minute   |\n * | 60 secs ... 90 secs    | 1 minute             |\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date\n * @param baseDate - The date to compare with\n * @param options - An object with options\n *\n * @returns The distance in words\n *\n * @throws `date` must not be Invalid Date\n * @throws `baseDate` must not be Invalid Date\n * @throws `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * const result = formatDistance(new Date(2014, 6, 2), new Date(2015, 0, 1))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00, including seconds?\n * const result = formatDistance(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0),\n *   { includeSeconds: true }\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * const result = formatDistance(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> 'about 1 year ago'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = formatDistance(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> 'pli ol 1 jaro'\n */\n\nfunction formatDistance(date, baseDate, options) {\n  const defaultOptions = (0, _index7.getDefaultOptions)();\n  const locale =\n    options?.locale ?? defaultOptions.locale ?? _index6.defaultLocale;\n  const minutesInAlmostTwoDays = 2520;\n\n  const comparison = (0, _index.compareAsc)(date, baseDate);\n\n  if (isNaN(comparison)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  const localizeOptions = Object.assign({}, options, {\n    addSuffix: options?.addSuffix,\n    comparison: comparison,\n  });\n\n  let dateLeft;\n  let dateRight;\n  if (comparison > 0) {\n    dateLeft = (0, _index5.toDate)(baseDate);\n    dateRight = (0, _index5.toDate)(date);\n  } else {\n    dateLeft = (0, _index5.toDate)(date);\n    dateRight = (0, _index5.toDate)(baseDate);\n  }\n\n  const seconds = (0, _index4.differenceInSeconds)(dateRight, dateLeft);\n  const offsetInSeconds =\n    ((0, _index8.getTimezoneOffsetInMilliseconds)(dateRight) -\n      (0, _index8.getTimezoneOffsetInMilliseconds)(dateLeft)) /\n    1000;\n  const minutes = Math.round((seconds - offsetInSeconds) / 60);\n  let months;\n\n  // 0 up to 2 mins\n  if (minutes < 2) {\n    if (options?.includeSeconds) {\n      if (seconds < 5) {\n        return locale.formatDistance(\"lessThanXSeconds\", 5, localizeOptions);\n      } else if (seconds < 10) {\n        return locale.formatDistance(\"lessThanXSeconds\", 10, localizeOptions);\n      } else if (seconds < 20) {\n        return locale.formatDistance(\"lessThanXSeconds\", 20, localizeOptions);\n      } else if (seconds < 40) {\n        return locale.formatDistance(\"halfAMinute\", 0, localizeOptions);\n      } else if (seconds < 60) {\n        return locale.formatDistance(\"lessThanXMinutes\", 1, localizeOptions);\n      } else {\n        return locale.formatDistance(\"xMinutes\", 1, localizeOptions);\n      }\n    } else {\n      if (minutes === 0) {\n        return locale.formatDistance(\"lessThanXMinutes\", 1, localizeOptions);\n      } else {\n        return locale.formatDistance(\"xMinutes\", minutes, localizeOptions);\n      }\n    }\n\n    // 2 mins up to 0.75 hrs\n  } else if (minutes < 45) {\n    return locale.formatDistance(\"xMinutes\", minutes, localizeOptions);\n\n    // 0.75 hrs up to 1.5 hrs\n  } else if (minutes < 90) {\n    return locale.formatDistance(\"aboutXHours\", 1, localizeOptions);\n\n    // 1.5 hrs up to 24 hrs\n  } else if (minutes < _index2.minutesInDay) {\n    const hours = Math.round(minutes / 60);\n    return locale.formatDistance(\"aboutXHours\", hours, localizeOptions);\n\n    // 1 day up to 1.75 days\n  } else if (minutes < minutesInAlmostTwoDays) {\n    return locale.formatDistance(\"xDays\", 1, localizeOptions);\n\n    // 1.75 days up to 30 days\n  } else if (minutes < _index2.minutesInMonth) {\n    const days = Math.round(minutes / _index2.minutesInDay);\n    return locale.formatDistance(\"xDays\", days, localizeOptions);\n\n    // 1 month up to 2 months\n  } else if (minutes < _index2.minutesInMonth * 2) {\n    months = Math.round(minutes / _index2.minutesInMonth);\n    return locale.formatDistance(\"aboutXMonths\", months, localizeOptions);\n  }\n\n  months = (0, _index3.differenceInMonths)(dateRight, dateLeft);\n\n  // 2 months up to 12 months\n  if (months < 12) {\n    const nearestMonth = Math.round(minutes / _index2.minutesInMonth);\n    return locale.formatDistance(\"xMonths\", nearestMonth, localizeOptions);\n\n    // 1 year up to max Date\n  } else {\n    const monthsSinceStartOfYear = months % 12;\n    const years = Math.trunc(months / 12);\n\n    // N years up to 1 years 3 months\n    if (monthsSinceStartOfYear < 3) {\n      return locale.formatDistance(\"aboutXYears\", years, localizeOptions);\n\n      // N years 3 months up to N years 9 months\n    } else if (monthsSinceStartOfYear < 9) {\n      return locale.formatDistance(\"overXYears\", years, localizeOptions);\n\n      // N years 9 months up to N year 12 months\n    } else {\n      return locale.formatDistance(\"almostXYears\", years + 1, localizeOptions);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}