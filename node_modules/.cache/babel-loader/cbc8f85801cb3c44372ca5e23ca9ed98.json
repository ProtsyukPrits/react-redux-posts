{"ast":null,"code":"\"use strict\";\n\nexports.differenceInMonths = differenceInMonths;\n\nvar _index = require(\"./compareAsc.js\");\n\nvar _index2 = require(\"./differenceInCalendarMonths.js\");\n\nvar _index3 = require(\"./isLastDayOfMonth.js\");\n\nvar _index4 = require(\"./toDate.js\");\n/**\n * @name differenceInMonths\n * @category Month Helpers\n * @summary Get the number of full months between the given dates.\n *\n * @description\n * Get the number of full months between the given dates using trunc as a default rounding method.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of full months\n *\n * @example\n * // How many full months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))\n * //=> 7\n */\n\n\nfunction differenceInMonths(dateLeft, dateRight) {\n  const _dateLeft = (0, _index4.toDate)(dateLeft);\n\n  const _dateRight = (0, _index4.toDate)(dateRight);\n\n  const sign = (0, _index.compareAsc)(_dateLeft, _dateRight);\n  const difference = Math.abs((0, _index2.differenceInCalendarMonths)(_dateLeft, _dateRight));\n  let result; // Check for the difference of less than month\n\n  if (difference < 1) {\n    result = 0;\n  } else {\n    if (_dateLeft.getMonth() === 1 && _dateLeft.getDate() > 27) {\n      // This will check if the date is end of Feb and assign a higher end of month date\n      // to compare it with Jan\n      _dateLeft.setDate(30);\n    }\n\n    _dateLeft.setMonth(_dateLeft.getMonth() - sign * difference); // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full\n    // If so, result must be decreased by 1 in absolute value\n\n\n    let isLastMonthNotFull = (0, _index.compareAsc)(_dateLeft, _dateRight) === -sign; // Check for cases of one full calendar month\n\n    if ((0, _index3.isLastDayOfMonth)((0, _index4.toDate)(dateLeft)) && difference === 1 && (0, _index.compareAsc)(dateLeft, _dateRight) === 1) {\n      isLastMonthNotFull = false;\n    }\n\n    result = sign * (difference - Number(isLastMonthNotFull));\n  } // Prevent negative zero\n\n\n  return result === 0 ? 0 : result;\n}","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/node_modules/date-fns/differenceInMonths.js"],"names":["exports","differenceInMonths","_index","require","_index2","_index3","_index4","dateLeft","dateRight","_dateLeft","toDate","_dateRight","sign","compareAsc","difference","Math","abs","differenceInCalendarMonths","result","getMonth","getDate","setDate","setMonth","isLastMonthNotFull","isLastDayOfMonth","Number"],"mappings":"AAAA;;AACAA,OAAO,CAACC,kBAAR,GAA6BA,kBAA7B;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,iBAAD,CAApB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,iCAAD,CAArB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,uBAAD,CAArB;;AACA,IAAIG,OAAO,GAAGH,OAAO,CAAC,aAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,kBAAT,CAA4BM,QAA5B,EAAsCC,SAAtC,EAAiD;AAC/C,QAAMC,SAAS,GAAG,CAAC,GAAGH,OAAO,CAACI,MAAZ,EAAoBH,QAApB,CAAlB;;AACA,QAAMI,UAAU,GAAG,CAAC,GAAGL,OAAO,CAACI,MAAZ,EAAoBF,SAApB,CAAnB;;AAEA,QAAMI,IAAI,GAAG,CAAC,GAAGV,MAAM,CAACW,UAAX,EAAuBJ,SAAvB,EAAkCE,UAAlC,CAAb;AACA,QAAMG,UAAU,GAAGC,IAAI,CAACC,GAAL,CACjB,CAAC,GAAGZ,OAAO,CAACa,0BAAZ,EAAwCR,SAAxC,EAAmDE,UAAnD,CADiB,CAAnB;AAGA,MAAIO,MAAJ,CAR+C,CAU/C;;AACA,MAAIJ,UAAU,GAAG,CAAjB,EAAoB;AAClBI,IAAAA,MAAM,GAAG,CAAT;AACD,GAFD,MAEO;AACL,QAAIT,SAAS,CAACU,QAAV,OAAyB,CAAzB,IAA8BV,SAAS,CAACW,OAAV,KAAsB,EAAxD,EAA4D;AAC1D;AACA;AACAX,MAAAA,SAAS,CAACY,OAAV,CAAkB,EAAlB;AACD;;AAEDZ,IAAAA,SAAS,CAACa,QAAV,CAAmBb,SAAS,CAACU,QAAV,KAAuBP,IAAI,GAAGE,UAAjD,EAPK,CASL;AACA;;;AACA,QAAIS,kBAAkB,GACpB,CAAC,GAAGrB,MAAM,CAACW,UAAX,EAAuBJ,SAAvB,EAAkCE,UAAlC,MAAkD,CAACC,IADrD,CAXK,CAcL;;AACA,QACE,CAAC,GAAGP,OAAO,CAACmB,gBAAZ,EAA8B,CAAC,GAAGlB,OAAO,CAACI,MAAZ,EAAoBH,QAApB,CAA9B,KACAO,UAAU,KAAK,CADf,IAEA,CAAC,GAAGZ,MAAM,CAACW,UAAX,EAAuBN,QAAvB,EAAiCI,UAAjC,MAAiD,CAHnD,EAIE;AACAY,MAAAA,kBAAkB,GAAG,KAArB;AACD;;AAEDL,IAAAA,MAAM,GAAGN,IAAI,IAAIE,UAAU,GAAGW,MAAM,CAACF,kBAAD,CAAvB,CAAb;AACD,GArC8C,CAuC/C;;;AACA,SAAOL,MAAM,KAAK,CAAX,GAAe,CAAf,GAAmBA,MAA1B;AACD","sourcesContent":["\"use strict\";\nexports.differenceInMonths = differenceInMonths;\nvar _index = require(\"./compareAsc.js\");\nvar _index2 = require(\"./differenceInCalendarMonths.js\");\nvar _index3 = require(\"./isLastDayOfMonth.js\");\nvar _index4 = require(\"./toDate.js\");\n\n/**\n * @name differenceInMonths\n * @category Month Helpers\n * @summary Get the number of full months between the given dates.\n *\n * @description\n * Get the number of full months between the given dates using trunc as a default rounding method.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of full months\n *\n * @example\n * // How many full months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))\n * //=> 7\n */\nfunction differenceInMonths(dateLeft, dateRight) {\n  const _dateLeft = (0, _index4.toDate)(dateLeft);\n  const _dateRight = (0, _index4.toDate)(dateRight);\n\n  const sign = (0, _index.compareAsc)(_dateLeft, _dateRight);\n  const difference = Math.abs(\n    (0, _index2.differenceInCalendarMonths)(_dateLeft, _dateRight),\n  );\n  let result;\n\n  // Check for the difference of less than month\n  if (difference < 1) {\n    result = 0;\n  } else {\n    if (_dateLeft.getMonth() === 1 && _dateLeft.getDate() > 27) {\n      // This will check if the date is end of Feb and assign a higher end of month date\n      // to compare it with Jan\n      _dateLeft.setDate(30);\n    }\n\n    _dateLeft.setMonth(_dateLeft.getMonth() - sign * difference);\n\n    // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full\n    // If so, result must be decreased by 1 in absolute value\n    let isLastMonthNotFull =\n      (0, _index.compareAsc)(_dateLeft, _dateRight) === -sign;\n\n    // Check for cases of one full calendar month\n    if (\n      (0, _index3.isLastDayOfMonth)((0, _index4.toDate)(dateLeft)) &&\n      difference === 1 &&\n      (0, _index.compareAsc)(dateLeft, _dateRight) === 1\n    ) {\n      isLastMonthNotFull = false;\n    }\n\n    result = sign * (difference - Number(isLastMonthNotFull));\n  }\n\n  // Prevent negative zero\n  return result === 0 ? 0 : result;\n}\n"]},"metadata":{},"sourceType":"script"}