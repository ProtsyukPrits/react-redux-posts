{"ast":null,"code":"import _classCallCheck from \"/home/dmytro/react-redux-posts/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/dmytro/react-redux-posts/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/home/dmytro/react-redux-posts/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/home/dmytro/react-redux-posts/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/dmytro/react-redux-posts/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"/home/dmytro/react-redux-posts/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { Parser } from \"../Parser.mjs\";\nimport { parseNDigits } from \"../utils.mjs\";\nexport var QuarterParser = /*#__PURE__*/function (_Parser) {\n  _inherits(QuarterParser, _Parser);\n\n  var _super = _createSuper(QuarterParser);\n\n  function QuarterParser() {\n    var _this;\n\n    _classCallCheck(this, QuarterParser);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"priority\", 120);\n\n    _defineProperty(_assertThisInitialized(_this), \"incompatibleTokens\", [\"Y\", \"R\", \"q\", \"M\", \"L\", \"w\", \"I\", \"d\", \"D\", \"i\", \"e\", \"c\", \"t\", \"T\"]);\n\n    return _this;\n  }\n\n  _createClass(QuarterParser, [{\n    key: \"parse\",\n    value: function parse(dateString, token, match) {\n      switch (token) {\n        // 1, 2, 3, 4\n        case \"Q\":\n        case \"QQ\":\n          // 01, 02, 03, 04\n          return parseNDigits(token.length, dateString);\n        // 1st, 2nd, 3rd, 4th\n\n        case \"Qo\":\n          return match.ordinalNumber(dateString, {\n            unit: \"quarter\"\n          });\n        // Q1, Q2, Q3, Q4\n\n        case \"QQQ\":\n          return match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\"\n          }) || match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"formatting\"\n          });\n        // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n        case \"QQQQQ\":\n          return match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"formatting\"\n          });\n        // 1st quarter, 2nd quarter, ...\n\n        case \"QQQQ\":\n        default:\n          return match.quarter(dateString, {\n            width: \"wide\",\n            context: \"formatting\"\n          }) || match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\"\n          }) || match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"formatting\"\n          });\n      }\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(_date, value) {\n      return value >= 1 && value <= 4;\n    }\n  }, {\n    key: \"set\",\n    value: function set(date, _flags, value) {\n      date.setMonth((value - 1) * 3, 1);\n      date.setHours(0, 0, 0, 0);\n      return date;\n    }\n  }]);\n\n  return QuarterParser;\n}(Parser);","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/node_modules/date-fns/parse/_lib/parsers/QuarterParser.mjs"],"names":["Parser","parseNDigits","QuarterParser","dateString","token","match","length","ordinalNumber","unit","quarter","width","context","_date","value","date","_flags","setMonth","setHours"],"mappings":";;;;;;AAAA,SAASA,MAAT,QAAuB,eAAvB;AACA,SAASC,YAAT,QAA6B,cAA7B;AAEA,WAAaC,aAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,+DACa,GADb;;AAAA,yEA6DuB,CACnB,GADmB,EAEnB,GAFmB,EAGnB,GAHmB,EAInB,GAJmB,EAKnB,GALmB,EAMnB,GANmB,EAOnB,GAPmB,EAQnB,GARmB,EASnB,GATmB,EAUnB,GAVmB,EAWnB,GAXmB,EAYnB,GAZmB,EAanB,GAbmB,EAcnB,GAdmB,CA7DvB;;AAAA;AAAA;;AAAA;AAAA;AAAA,WAGE,eAAMC,UAAN,EAAkBC,KAAlB,EAAyBC,KAAzB,EAAgC;AAC9B,cAAQD,KAAR;AACE;AACA,aAAK,GAAL;AACA,aAAK,IAAL;AAAW;AACT,iBAAOH,YAAY,CAACG,KAAK,CAACE,MAAP,EAAeH,UAAf,CAAnB;AACF;;AACA,aAAK,IAAL;AACE,iBAAOE,KAAK,CAACE,aAAN,CAAoBJ,UAApB,EAAgC;AAAEK,YAAAA,IAAI,EAAE;AAAR,WAAhC,CAAP;AACF;;AACA,aAAK,KAAL;AACE,iBACEH,KAAK,CAACI,OAAN,CAAcN,UAAd,EAA0B;AACxBO,YAAAA,KAAK,EAAE,aADiB;AAExBC,YAAAA,OAAO,EAAE;AAFe,WAA1B,KAIAN,KAAK,CAACI,OAAN,CAAcN,UAAd,EAA0B;AACxBO,YAAAA,KAAK,EAAE,QADiB;AAExBC,YAAAA,OAAO,EAAE;AAFe,WAA1B,CALF;AAWF;;AACA,aAAK,OAAL;AACE,iBAAON,KAAK,CAACI,OAAN,CAAcN,UAAd,EAA0B;AAC/BO,YAAAA,KAAK,EAAE,QADwB;AAE/BC,YAAAA,OAAO,EAAE;AAFsB,WAA1B,CAAP;AAIF;;AACA,aAAK,MAAL;AACA;AACE,iBACEN,KAAK,CAACI,OAAN,CAAcN,UAAd,EAA0B;AACxBO,YAAAA,KAAK,EAAE,MADiB;AAExBC,YAAAA,OAAO,EAAE;AAFe,WAA1B,KAIAN,KAAK,CAACI,OAAN,CAAcN,UAAd,EAA0B;AACxBO,YAAAA,KAAK,EAAE,aADiB;AAExBC,YAAAA,OAAO,EAAE;AAFe,WAA1B,CAJA,IAQAN,KAAK,CAACI,OAAN,CAAcN,UAAd,EAA0B;AACxBO,YAAAA,KAAK,EAAE,QADiB;AAExBC,YAAAA,OAAO,EAAE;AAFe,WAA1B,CATF;AA9BJ;AA6CD;AAjDH;AAAA;AAAA,WAmDE,kBAASC,KAAT,EAAgBC,KAAhB,EAAuB;AACrB,aAAOA,KAAK,IAAI,CAAT,IAAcA,KAAK,IAAI,CAA9B;AACD;AArDH;AAAA;AAAA,WAuDE,aAAIC,IAAJ,EAAUC,MAAV,EAAkBF,KAAlB,EAAyB;AACvBC,MAAAA,IAAI,CAACE,QAAL,CAAc,CAACH,KAAK,GAAG,CAAT,IAAc,CAA5B,EAA+B,CAA/B;AACAC,MAAAA,IAAI,CAACG,QAAL,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB;AACA,aAAOH,IAAP;AACD;AA3DH;;AAAA;AAAA,EAAmCd,MAAnC","sourcesContent":["import { Parser } from \"../Parser.mjs\";\nimport { parseNDigits } from \"../utils.mjs\";\n\nexport class QuarterParser extends Parser {\n  priority = 120;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"Q\":\n      case \"QQ\": // 01, 02, 03, 04\n        return parseNDigits(token.length, dateString);\n      // 1st, 2nd, 3rd, 4th\n      case \"Qo\":\n        return match.ordinalNumber(dateString, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"QQQ\":\n        return (\n          match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"QQQQQ\":\n        return match.quarter(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"QQQQ\":\n      default:\n        return (\n          match.quarter(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 4;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth((value - 1) * 3, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n"]},"metadata":{},"sourceType":"module"}