{"ast":null,"code":"\"use strict\";\n\nexports.ISODayParser = void 0;\n\nvar _index = require(\"../../../setISODay.js\");\n\nvar _Parser = require(\"../Parser.js\");\n\nvar _utils = require(\"../utils.js\"); // ISO day of week\n\n\nclass ISODayParser extends _Parser.Parser {\n  priority = 90;\n\n  parse(dateString, token, match) {\n    const valueCallback = value => {\n      if (value === 0) {\n        return 7;\n      }\n\n      return value;\n    };\n\n    switch (token) {\n      // 2\n      case \"i\":\n      case \"ii\":\n        // 02\n        return (0, _utils.parseNDigits)(token.length, dateString);\n      // 2nd\n\n      case \"io\":\n        return match.ordinalNumber(dateString, {\n          unit: \"day\"\n        });\n      // Tue\n\n      case \"iii\":\n        return (0, _utils.mapValue)(match.day(dateString, {\n          width: \"abbreviated\",\n          context: \"formatting\"\n        }) || match.day(dateString, {\n          width: \"short\",\n          context: \"formatting\"\n        }) || match.day(dateString, {\n          width: \"narrow\",\n          context: \"formatting\"\n        }), valueCallback);\n      // T\n\n      case \"iiiii\":\n        return (0, _utils.mapValue)(match.day(dateString, {\n          width: \"narrow\",\n          context: \"formatting\"\n        }), valueCallback);\n      // Tu\n\n      case \"iiiiii\":\n        return (0, _utils.mapValue)(match.day(dateString, {\n          width: \"short\",\n          context: \"formatting\"\n        }) || match.day(dateString, {\n          width: \"narrow\",\n          context: \"formatting\"\n        }), valueCallback);\n      // Tuesday\n\n      case \"iiii\":\n      default:\n        return (0, _utils.mapValue)(match.day(dateString, {\n          width: \"wide\",\n          context: \"formatting\"\n        }) || match.day(dateString, {\n          width: \"abbreviated\",\n          context: \"formatting\"\n        }) || match.day(dateString, {\n          width: \"short\",\n          context: \"formatting\"\n        }) || match.day(dateString, {\n          width: \"narrow\",\n          context: \"formatting\"\n        }), valueCallback);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 7;\n  }\n\n  set(date, _flags, value) {\n    date = (0, _index.setISODay)(date, value);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"y\", \"Y\", \"u\", \"q\", \"Q\", \"M\", \"L\", \"w\", \"d\", \"D\", \"E\", \"e\", \"c\", \"t\", \"T\"];\n}\n\nexports.ISODayParser = ISODayParser;","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/node_modules/date-fns/parse/_lib/parsers/ISODayParser.js"],"names":["exports","ISODayParser","_index","require","_Parser","_utils","Parser","priority","parse","dateString","token","match","valueCallback","value","parseNDigits","length","ordinalNumber","unit","mapValue","day","width","context","validate","_date","set","date","_flags","setISODay","setHours","incompatibleTokens"],"mappings":"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","sourcesContent":["\"use strict\";\nexports.ISODayParser = void 0;\nvar _index = require(\"../../../setISODay.js\");\nvar _Parser = require(\"../Parser.js\");\n\nvar _utils = require(\"../utils.js\");\n\n// ISO day of week\nclass ISODayParser extends _Parser.Parser {\n  priority = 90;\n\n  parse(dateString, token, match) {\n    const valueCallback = (value) => {\n      if (value === 0) {\n        return 7;\n      }\n      return value;\n    };\n\n    switch (token) {\n      // 2\n      case \"i\":\n      case \"ii\": // 02\n        return (0, _utils.parseNDigits)(token.length, dateString);\n      // 2nd\n      case \"io\":\n        return match.ordinalNumber(dateString, { unit: \"day\" });\n      // Tue\n      case \"iii\":\n        return (0, _utils.mapValue)(\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n            match.day(dateString, {\n              width: \"short\",\n              context: \"formatting\",\n            }) ||\n            match.day(dateString, {\n              width: \"narrow\",\n              context: \"formatting\",\n            }),\n          valueCallback,\n        );\n      // T\n      case \"iiiii\":\n        return (0, _utils.mapValue)(\n          match.day(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          }),\n          valueCallback,\n        );\n      // Tu\n      case \"iiiiii\":\n        return (0, _utils.mapValue)(\n          match.day(dateString, {\n            width: \"short\",\n            context: \"formatting\",\n          }) ||\n            match.day(dateString, {\n              width: \"narrow\",\n              context: \"formatting\",\n            }),\n          valueCallback,\n        );\n      // Tuesday\n      case \"iiii\":\n      default:\n        return (0, _utils.mapValue)(\n          match.day(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n            match.day(dateString, {\n              width: \"abbreviated\",\n              context: \"formatting\",\n            }) ||\n            match.day(dateString, {\n              width: \"short\",\n              context: \"formatting\",\n            }) ||\n            match.day(dateString, {\n              width: \"narrow\",\n              context: \"formatting\",\n            }),\n          valueCallback,\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 7;\n  }\n\n  set(date, _flags, value) {\n    date = (0, _index.setISODay)(date, value);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"Y\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"d\",\n    \"D\",\n    \"E\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\nexports.ISODayParser = ISODayParser;\n"]},"metadata":{},"sourceType":"script"}