{"ast":null,"code":"\"use strict\";\n\nexports.formatISO9075 = formatISO9075;\n\nvar _index = require(\"./isValid.js\");\n\nvar _index2 = require(\"./toDate.js\");\n\nvar _index3 = require(\"./_lib/addLeadingZeros.js\");\n/**\n * The {@link formatISO9075} function options.\n */\n\n/**\n * @name formatISO9075\n * @category Common Helpers\n * @summary Format the date according to the ISO 9075 standard (https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html#function_get-format).\n *\n * @description\n * Return the formatted date string in ISO 9075 format. Options may be passed to control the parts and notations of the date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param options - An object with options.\n *\n * @returns The formatted date string\n *\n * @throws `date` must not be Invalid Date\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075 format:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18 19:00:52'\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075, short format:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\n * //=> '20190918 190052'\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075 format, date only:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\n * //=> '2019-09-18'\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075 format, time only:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\n * //=> '19:00:52'\n */\n\n\nfunction formatISO9075(date, options) {\n  const _date = (0, _index2.toDate)(date);\n\n  if (!(0, _index.isValid)(_date)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  const format = options?.format ?? \"extended\";\n  const representation = options?.representation ?? \"complete\";\n  let result = \"\";\n  const dateDelimiter = format === \"extended\" ? \"-\" : \"\";\n  const timeDelimiter = format === \"extended\" ? \":\" : \"\"; // Representation is either 'date' or 'complete'\n\n  if (representation !== \"time\") {\n    const day = (0, _index3.addLeadingZeros)(_date.getDate(), 2);\n    const month = (0, _index3.addLeadingZeros)(_date.getMonth() + 1, 2);\n    const year = (0, _index3.addLeadingZeros)(_date.getFullYear(), 4); // yyyyMMdd or yyyy-MM-dd.\n\n    result = `${year}${dateDelimiter}${month}${dateDelimiter}${day}`;\n  } // Representation is either 'time' or 'complete'\n\n\n  if (representation !== \"date\") {\n    const hour = (0, _index3.addLeadingZeros)(_date.getHours(), 2);\n    const minute = (0, _index3.addLeadingZeros)(_date.getMinutes(), 2);\n    const second = (0, _index3.addLeadingZeros)(_date.getSeconds(), 2); // If there's also date, separate it with time with a space\n\n    const separator = result === \"\" ? \"\" : \" \"; // HHmmss or HH:mm:ss.\n\n    result = `${result}${separator}${hour}${timeDelimiter}${minute}${timeDelimiter}${second}`;\n  }\n\n  return result;\n}","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/node_modules/date-fns/formatISO9075.js"],"names":["exports","formatISO9075","_index","require","_index2","_index3","date","options","_date","toDate","isValid","RangeError","format","representation","result","dateDelimiter","timeDelimiter","day","addLeadingZeros","getDate","month","getMonth","year","getFullYear","hour","getHours","minute","getMinutes","second","getSeconds","separator"],"mappings":"AAAA;;AACAA,OAAO,CAACC,aAAR,GAAwBA,aAAxB;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,cAAD,CAApB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,aAAD,CAArB;;AAEA,IAAIE,OAAO,GAAGF,OAAO,CAAC,2BAAD,CAArB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,aAAT,CAAuBK,IAAvB,EAA6BC,OAA7B,EAAsC;AACpC,QAAMC,KAAK,GAAG,CAAC,GAAGJ,OAAO,CAACK,MAAZ,EAAoBH,IAApB,CAAd;;AAEA,MAAI,CAAC,CAAC,GAAGJ,MAAM,CAACQ,OAAX,EAAoBF,KAApB,CAAL,EAAiC;AAC/B,UAAM,IAAIG,UAAJ,CAAe,oBAAf,CAAN;AACD;;AAED,QAAMC,MAAM,GAAGL,OAAO,EAAEK,MAAT,IAAmB,UAAlC;AACA,QAAMC,cAAc,GAAGN,OAAO,EAAEM,cAAT,IAA2B,UAAlD;AAEA,MAAIC,MAAM,GAAG,EAAb;AAEA,QAAMC,aAAa,GAAGH,MAAM,KAAK,UAAX,GAAwB,GAAxB,GAA8B,EAApD;AACA,QAAMI,aAAa,GAAGJ,MAAM,KAAK,UAAX,GAAwB,GAAxB,GAA8B,EAApD,CAboC,CAepC;;AACA,MAAIC,cAAc,KAAK,MAAvB,EAA+B;AAC7B,UAAMI,GAAG,GAAG,CAAC,GAAGZ,OAAO,CAACa,eAAZ,EAA6BV,KAAK,CAACW,OAAN,EAA7B,EAA8C,CAA9C,CAAZ;AACA,UAAMC,KAAK,GAAG,CAAC,GAAGf,OAAO,CAACa,eAAZ,EAA6BV,KAAK,CAACa,QAAN,KAAmB,CAAhD,EAAmD,CAAnD,CAAd;AACA,UAAMC,IAAI,GAAG,CAAC,GAAGjB,OAAO,CAACa,eAAZ,EAA6BV,KAAK,CAACe,WAAN,EAA7B,EAAkD,CAAlD,CAAb,CAH6B,CAK7B;;AACAT,IAAAA,MAAM,GAAI,GAAEQ,IAAK,GAAEP,aAAc,GAAEK,KAAM,GAAEL,aAAc,GAAEE,GAAI,EAA/D;AACD,GAvBmC,CAyBpC;;;AACA,MAAIJ,cAAc,KAAK,MAAvB,EAA+B;AAC7B,UAAMW,IAAI,GAAG,CAAC,GAAGnB,OAAO,CAACa,eAAZ,EAA6BV,KAAK,CAACiB,QAAN,EAA7B,EAA+C,CAA/C,CAAb;AACA,UAAMC,MAAM,GAAG,CAAC,GAAGrB,OAAO,CAACa,eAAZ,EAA6BV,KAAK,CAACmB,UAAN,EAA7B,EAAiD,CAAjD,CAAf;AACA,UAAMC,MAAM,GAAG,CAAC,GAAGvB,OAAO,CAACa,eAAZ,EAA6BV,KAAK,CAACqB,UAAN,EAA7B,EAAiD,CAAjD,CAAf,CAH6B,CAK7B;;AACA,UAAMC,SAAS,GAAGhB,MAAM,KAAK,EAAX,GAAgB,EAAhB,GAAqB,GAAvC,CAN6B,CAQ7B;;AACAA,IAAAA,MAAM,GAAI,GAAEA,MAAO,GAAEgB,SAAU,GAAEN,IAAK,GAAER,aAAc,GAAEU,MAAO,GAAEV,aAAc,GAAEY,MAAO,EAAxF;AACD;;AAED,SAAOd,MAAP;AACD","sourcesContent":["\"use strict\";\nexports.formatISO9075 = formatISO9075;\nvar _index = require(\"./isValid.js\");\nvar _index2 = require(\"./toDate.js\");\n\nvar _index3 = require(\"./_lib/addLeadingZeros.js\");\n\n/**\n * The {@link formatISO9075} function options.\n */\n\n/**\n * @name formatISO9075\n * @category Common Helpers\n * @summary Format the date according to the ISO 9075 standard (https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html#function_get-format).\n *\n * @description\n * Return the formatted date string in ISO 9075 format. Options may be passed to control the parts and notations of the date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param options - An object with options.\n *\n * @returns The formatted date string\n *\n * @throws `date` must not be Invalid Date\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075 format:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18 19:00:52'\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075, short format:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\n * //=> '20190918 190052'\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075 format, date only:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\n * //=> '2019-09-18'\n *\n * @example\n * // Represent 18 September 2019 in ISO 9075 format, time only:\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\n * //=> '19:00:52'\n */\nfunction formatISO9075(date, options) {\n  const _date = (0, _index2.toDate)(date);\n\n  if (!(0, _index.isValid)(_date)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  const format = options?.format ?? \"extended\";\n  const representation = options?.representation ?? \"complete\";\n\n  let result = \"\";\n\n  const dateDelimiter = format === \"extended\" ? \"-\" : \"\";\n  const timeDelimiter = format === \"extended\" ? \":\" : \"\";\n\n  // Representation is either 'date' or 'complete'\n  if (representation !== \"time\") {\n    const day = (0, _index3.addLeadingZeros)(_date.getDate(), 2);\n    const month = (0, _index3.addLeadingZeros)(_date.getMonth() + 1, 2);\n    const year = (0, _index3.addLeadingZeros)(_date.getFullYear(), 4);\n\n    // yyyyMMdd or yyyy-MM-dd.\n    result = `${year}${dateDelimiter}${month}${dateDelimiter}${day}`;\n  }\n\n  // Representation is either 'time' or 'complete'\n  if (representation !== \"date\") {\n    const hour = (0, _index3.addLeadingZeros)(_date.getHours(), 2);\n    const minute = (0, _index3.addLeadingZeros)(_date.getMinutes(), 2);\n    const second = (0, _index3.addLeadingZeros)(_date.getSeconds(), 2);\n\n    // If there's also date, separate it with time with a space\n    const separator = result === \"\" ? \"\" : \" \";\n\n    // HHmmss or HH:mm:ss.\n    result = `${result}${separator}${hour}${timeDelimiter}${minute}${timeDelimiter}${second}`;\n  }\n\n  return result;\n}\n"]},"metadata":{},"sourceType":"script"}