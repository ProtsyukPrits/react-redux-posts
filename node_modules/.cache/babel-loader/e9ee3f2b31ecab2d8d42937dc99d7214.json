{"ast":null,"code":"\"use strict\";\n\nexports.addBusinessDays = addBusinessDays;\n\nvar _index = require(\"./constructFrom.js\");\n\nvar _index2 = require(\"./isSaturday.js\");\n\nvar _index3 = require(\"./isSunday.js\");\n\nvar _index4 = require(\"./isWeekend.js\");\n\nvar _index5 = require(\"./toDate.js\");\n/**\n * @name addBusinessDays\n * @category Date Extension Helpers\n * @summary Add the specified number of business days (mon - fri) to the given date.\n *\n * @description\n * Add the specified number of business days (mon - fri) to the given date, ignoring weekends.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of business days to be added.\n *\n * @returns The new date with the business days added\n *\n * @example\n * // Add 10 business days to 1 September 2014:\n * const result = addBusinessDays(new Date(2014, 8, 1), 10)\n * //=> Mon Sep 15 2014 00:00:00 (skipped weekend days)\n */\n\n\nfunction addBusinessDays(date, amount) {\n  const _date = (0, _index5.toDate)(date);\n\n  const startedOnWeekend = (0, _index4.isWeekend)(_date);\n  if (isNaN(amount)) return (0, _index.constructFrom)(date, NaN);\n\n  const hours = _date.getHours();\n\n  const sign = amount < 0 ? -1 : 1;\n  const fullWeeks = Math.trunc(amount / 5);\n\n  _date.setDate(_date.getDate() + fullWeeks * 7); // Get remaining days not part of a full week\n\n\n  let restDays = Math.abs(amount % 5); // Loops over remaining days\n\n  while (restDays > 0) {\n    _date.setDate(_date.getDate() + sign);\n\n    if (!(0, _index4.isWeekend)(_date)) restDays -= 1;\n  } // If the date is a weekend day and we reduce a dividable of\n  // 5 from it, we land on a weekend date.\n  // To counter this, we add days accordingly to land on the next business day\n\n\n  if (startedOnWeekend && (0, _index4.isWeekend)(_date) && amount !== 0) {\n    // If we're reducing days, we want to add days until we land on a weekday\n    // If we're adding days we want to reduce days until we land on a weekday\n    if ((0, _index2.isSaturday)(_date)) _date.setDate(_date.getDate() + (sign < 0 ? 2 : -1));\n    if ((0, _index3.isSunday)(_date)) _date.setDate(_date.getDate() + (sign < 0 ? 1 : -2));\n  } // Restore hours to avoid DST lag\n\n\n  _date.setHours(hours);\n\n  return _date;\n}","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/node_modules/date-fns/addBusinessDays.js"],"names":["exports","addBusinessDays","_index","require","_index2","_index3","_index4","_index5","date","amount","_date","toDate","startedOnWeekend","isWeekend","isNaN","constructFrom","NaN","hours","getHours","sign","fullWeeks","Math","trunc","setDate","getDate","restDays","abs","isSaturday","isSunday","setHours"],"mappings":"AAAA;;AACAA,OAAO,CAACC,eAAR,GAA0BA,eAA1B;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,oBAAD,CAApB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,iBAAD,CAArB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,eAAD,CAArB;;AACA,IAAIG,OAAO,GAAGH,OAAO,CAAC,gBAAD,CAArB;;AACA,IAAII,OAAO,GAAGJ,OAAO,CAAC,aAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,eAAT,CAAyBO,IAAzB,EAA+BC,MAA/B,EAAuC;AACrC,QAAMC,KAAK,GAAG,CAAC,GAAGH,OAAO,CAACI,MAAZ,EAAoBH,IAApB,CAAd;;AACA,QAAMI,gBAAgB,GAAG,CAAC,GAAGN,OAAO,CAACO,SAAZ,EAAuBH,KAAvB,CAAzB;AAEA,MAAII,KAAK,CAACL,MAAD,CAAT,EAAmB,OAAO,CAAC,GAAGP,MAAM,CAACa,aAAX,EAA0BP,IAA1B,EAAgCQ,GAAhC,CAAP;;AAEnB,QAAMC,KAAK,GAAGP,KAAK,CAACQ,QAAN,EAAd;;AACA,QAAMC,IAAI,GAAGV,MAAM,GAAG,CAAT,GAAa,CAAC,CAAd,GAAkB,CAA/B;AACA,QAAMW,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWb,MAAM,GAAG,CAApB,CAAlB;;AAEAC,EAAAA,KAAK,CAACa,OAAN,CAAcb,KAAK,CAACc,OAAN,KAAkBJ,SAAS,GAAG,CAA5C,EAVqC,CAYrC;;;AACA,MAAIK,QAAQ,GAAGJ,IAAI,CAACK,GAAL,CAASjB,MAAM,GAAG,CAAlB,CAAf,CAbqC,CAerC;;AACA,SAAOgB,QAAQ,GAAG,CAAlB,EAAqB;AACnBf,IAAAA,KAAK,CAACa,OAAN,CAAcb,KAAK,CAACc,OAAN,KAAkBL,IAAhC;;AACA,QAAI,CAAC,CAAC,GAAGb,OAAO,CAACO,SAAZ,EAAuBH,KAAvB,CAAL,EAAoCe,QAAQ,IAAI,CAAZ;AACrC,GAnBoC,CAqBrC;AACA;AACA;;;AACA,MAAIb,gBAAgB,IAAI,CAAC,GAAGN,OAAO,CAACO,SAAZ,EAAuBH,KAAvB,CAApB,IAAqDD,MAAM,KAAK,CAApE,EAAuE;AACrE;AACA;AACA,QAAI,CAAC,GAAGL,OAAO,CAACuB,UAAZ,EAAwBjB,KAAxB,CAAJ,EACEA,KAAK,CAACa,OAAN,CAAcb,KAAK,CAACc,OAAN,MAAmBL,IAAI,GAAG,CAAP,GAAW,CAAX,GAAe,CAAC,CAAnC,CAAd;AACF,QAAI,CAAC,GAAGd,OAAO,CAACuB,QAAZ,EAAsBlB,KAAtB,CAAJ,EACEA,KAAK,CAACa,OAAN,CAAcb,KAAK,CAACc,OAAN,MAAmBL,IAAI,GAAG,CAAP,GAAW,CAAX,GAAe,CAAC,CAAnC,CAAd;AACH,GA/BoC,CAiCrC;;;AACAT,EAAAA,KAAK,CAACmB,QAAN,CAAeZ,KAAf;;AAEA,SAAOP,KAAP;AACD","sourcesContent":["\"use strict\";\nexports.addBusinessDays = addBusinessDays;\nvar _index = require(\"./constructFrom.js\");\nvar _index2 = require(\"./isSaturday.js\");\nvar _index3 = require(\"./isSunday.js\");\nvar _index4 = require(\"./isWeekend.js\");\nvar _index5 = require(\"./toDate.js\");\n\n/**\n * @name addBusinessDays\n * @category Date Extension Helpers\n * @summary Add the specified number of business days (mon - fri) to the given date.\n *\n * @description\n * Add the specified number of business days (mon - fri) to the given date, ignoring weekends.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of business days to be added.\n *\n * @returns The new date with the business days added\n *\n * @example\n * // Add 10 business days to 1 September 2014:\n * const result = addBusinessDays(new Date(2014, 8, 1), 10)\n * //=> Mon Sep 15 2014 00:00:00 (skipped weekend days)\n */\nfunction addBusinessDays(date, amount) {\n  const _date = (0, _index5.toDate)(date);\n  const startedOnWeekend = (0, _index4.isWeekend)(_date);\n\n  if (isNaN(amount)) return (0, _index.constructFrom)(date, NaN);\n\n  const hours = _date.getHours();\n  const sign = amount < 0 ? -1 : 1;\n  const fullWeeks = Math.trunc(amount / 5);\n\n  _date.setDate(_date.getDate() + fullWeeks * 7);\n\n  // Get remaining days not part of a full week\n  let restDays = Math.abs(amount % 5);\n\n  // Loops over remaining days\n  while (restDays > 0) {\n    _date.setDate(_date.getDate() + sign);\n    if (!(0, _index4.isWeekend)(_date)) restDays -= 1;\n  }\n\n  // If the date is a weekend day and we reduce a dividable of\n  // 5 from it, we land on a weekend date.\n  // To counter this, we add days accordingly to land on the next business day\n  if (startedOnWeekend && (0, _index4.isWeekend)(_date) && amount !== 0) {\n    // If we're reducing days, we want to add days until we land on a weekday\n    // If we're adding days we want to reduce days until we land on a weekday\n    if ((0, _index2.isSaturday)(_date))\n      _date.setDate(_date.getDate() + (sign < 0 ? 2 : -1));\n    if ((0, _index3.isSunday)(_date))\n      _date.setDate(_date.getDate() + (sign < 0 ? 1 : -2));\n  }\n\n  // Restore hours to avoid DST lag\n  _date.setHours(hours);\n\n  return _date;\n}\n"]},"metadata":{},"sourceType":"script"}