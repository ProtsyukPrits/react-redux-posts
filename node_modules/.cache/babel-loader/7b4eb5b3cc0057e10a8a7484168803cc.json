{"ast":null,"code":"\"use strict\";\n\nexports.DayPeriodParser = void 0;\n\nvar _Parser = require(\"../Parser.js\");\n\nvar _utils = require(\"../utils.js\"); // in the morning, in the afternoon, in the evening, at night\n\n\nclass DayPeriodParser extends _Parser.Parser {\n  priority = 80;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"B\":\n      case \"BB\":\n      case \"BBB\":\n        return match.dayPeriod(dateString, {\n          width: \"abbreviated\",\n          context: \"formatting\"\n        }) || match.dayPeriod(dateString, {\n          width: \"narrow\",\n          context: \"formatting\"\n        });\n\n      case \"BBBBB\":\n        return match.dayPeriod(dateString, {\n          width: \"narrow\",\n          context: \"formatting\"\n        });\n\n      case \"BBBB\":\n      default:\n        return match.dayPeriod(dateString, {\n          width: \"wide\",\n          context: \"formatting\"\n        }) || match.dayPeriod(dateString, {\n          width: \"abbreviated\",\n          context: \"formatting\"\n        }) || match.dayPeriod(dateString, {\n          width: \"narrow\",\n          context: \"formatting\"\n        });\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setHours((0, _utils.dayPeriodEnumToHours)(value), 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"a\", \"b\", \"t\", \"T\"];\n}\n\nexports.DayPeriodParser = DayPeriodParser;","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/node_modules/date-fns/parse/_lib/parsers/DayPeriodParser.js"],"names":["exports","DayPeriodParser","_Parser","require","_utils","Parser","priority","parse","dateString","token","match","dayPeriod","width","context","set","date","_flags","value","setHours","dayPeriodEnumToHours","incompatibleTokens"],"mappings":"AAAA;;AACAA,OAAO,CAACC,eAAR,GAA0B,KAAK,CAA/B;;AACA,IAAIC,OAAO,GAAGC,OAAO,CAAC,cAAD,CAArB;;AAEA,IAAIC,MAAM,GAAGD,OAAO,CAAC,aAAD,CAApB,C,CAEA;;;AACA,MAAMF,eAAN,SAA8BC,OAAO,CAACG,MAAtC,CAA6C;AAC3CC,EAAAA,QAAQ,GAAG,EAAH;;AAERC,EAAAA,KAAK,CAACC,UAAD,EAAaC,KAAb,EAAoBC,KAApB,EAA2B;AAC9B,YAAQD,KAAR;AACE,WAAK,GAAL;AACA,WAAK,IAAL;AACA,WAAK,KAAL;AACE,eACEC,KAAK,CAACC,SAAN,CAAgBH,UAAhB,EAA4B;AAC1BI,UAAAA,KAAK,EAAE,aADmB;AAE1BC,UAAAA,OAAO,EAAE;AAFiB,SAA5B,KAIAH,KAAK,CAACC,SAAN,CAAgBH,UAAhB,EAA4B;AAC1BI,UAAAA,KAAK,EAAE,QADmB;AAE1BC,UAAAA,OAAO,EAAE;AAFiB,SAA5B,CALF;;AAWF,WAAK,OAAL;AACE,eAAOH,KAAK,CAACC,SAAN,CAAgBH,UAAhB,EAA4B;AACjCI,UAAAA,KAAK,EAAE,QAD0B;AAEjCC,UAAAA,OAAO,EAAE;AAFwB,SAA5B,CAAP;;AAIF,WAAK,MAAL;AACA;AACE,eACEH,KAAK,CAACC,SAAN,CAAgBH,UAAhB,EAA4B;AAC1BI,UAAAA,KAAK,EAAE,MADmB;AAE1BC,UAAAA,OAAO,EAAE;AAFiB,SAA5B,KAIAH,KAAK,CAACC,SAAN,CAAgBH,UAAhB,EAA4B;AAC1BI,UAAAA,KAAK,EAAE,aADmB;AAE1BC,UAAAA,OAAO,EAAE;AAFiB,SAA5B,CAJA,IAQAH,KAAK,CAACC,SAAN,CAAgBH,UAAhB,EAA4B;AAC1BI,UAAAA,KAAK,EAAE,QADmB;AAE1BC,UAAAA,OAAO,EAAE;AAFiB,SAA5B,CATF;AAtBJ;AAqCD;;AAEDC,EAAAA,GAAG,CAACC,IAAD,EAAOC,MAAP,EAAeC,KAAf,EAAsB;AACvBF,IAAAA,IAAI,CAACG,QAAL,CAAc,CAAC,GAAGd,MAAM,CAACe,oBAAX,EAAiCF,KAAjC,CAAd,EAAuD,CAAvD,EAA0D,CAA1D,EAA6D,CAA7D;AACA,WAAOF,IAAP;AACD;;AAEDK,EAAAA,kBAAkB,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CAAH;AAhDyB;;AAkD7CpB,OAAO,CAACC,eAAR,GAA0BA,eAA1B","sourcesContent":["\"use strict\";\nexports.DayPeriodParser = void 0;\nvar _Parser = require(\"../Parser.js\");\n\nvar _utils = require(\"../utils.js\");\n\n// in the morning, in the afternoon, in the evening, at night\nclass DayPeriodParser extends _Parser.Parser {\n  priority = 80;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"B\":\n      case \"BB\":\n      case \"BBB\":\n        return (\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n\n      case \"BBBBB\":\n        return match.dayPeriod(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"BBBB\":\n      default:\n        return (\n          match.dayPeriod(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setHours((0, _utils.dayPeriodEnumToHours)(value), 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"a\", \"b\", \"t\", \"T\"];\n}\nexports.DayPeriodParser = DayPeriodParser;\n"]},"metadata":{},"sourceType":"script"}