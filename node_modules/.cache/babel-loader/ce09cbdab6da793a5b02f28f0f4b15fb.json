{"ast":null,"code":"\"use strict\";\n\nexports.intlFormatDistance = intlFormatDistance;\n\nvar _index = require(\"./constants.js\");\n\nvar _index2 = require(\"./differenceInCalendarDays.js\");\n\nvar _index3 = require(\"./differenceInCalendarMonths.js\");\n\nvar _index4 = require(\"./differenceInCalendarQuarters.js\");\n\nvar _index5 = require(\"./differenceInCalendarWeeks.js\");\n\nvar _index6 = require(\"./differenceInCalendarYears.js\");\n\nvar _index7 = require(\"./differenceInHours.js\");\n\nvar _index8 = require(\"./differenceInMinutes.js\");\n\nvar _index9 = require(\"./differenceInSeconds.js\");\n\nvar _index10 = require(\"./toDate.js\");\n/**\n * The {@link intlFormatDistance} function options.\n */\n\n/**\n * The unit used to format the distance in {@link intlFormatDistance}.\n */\n\n/**\n * @name intlFormatDistance\n * @category Common Helpers\n * @summary Formats distance between two dates in a human-readable format\n * @description\n * The function calculates the difference between two dates and formats it as a human-readable string.\n *\n * The function will pick the most appropriate unit depending on the distance between dates. For example, if the distance is a few hours, it might return `x hours`. If the distance is a few months, it might return `x months`.\n *\n * You can also specify a unit to force using it regardless of the distance to get a result like `123456 hours`.\n *\n * See the table below for the unit picking logic:\n *\n * | Distance between dates | Result (past)  | Result (future) |\n * | ---------------------- | -------------- | --------------- |\n * | 0 seconds              | now            | now             |\n * | 1-59 seconds           | X seconds ago  | in X seconds    |\n * | 1-59 minutes           | X minutes ago  | in X minutes    |\n * | 1-23 hours             | X hours ago    | in X hours      |\n * | 1 day                  | yesterday      | tomorrow        |\n * | 2-6 days               | X days ago     | in X days       |\n * | 7 days                 | last week      | next week       |\n * | 8 days-1 month         | X weeks ago    | in X weeks      |\n * | 1 month                | last month     | next month      |\n * | 2-3 months             | X months ago   | in X months     |\n * | 1 quarter              | last quarter   | next quarter    |\n * | 2-3 quarters           | X quarters ago | in X quarters   |\n * | 1 year                 | last year      | next year       |\n * | 2+ years               | X years ago    | in X years      |\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date\n * @param baseDate - The date to compare with.\n * @param options - An object with options.\n * See MDN for details [Locale identification and negotiation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation)\n * The narrow one could be similar to the short one for some locales.\n *\n * @returns The distance in words according to language-sensitive relative time formatting.\n *\n * @throws `date` must not be Invalid Date\n * @throws `baseDate` must not be Invalid Date\n * @throws `options.unit` must not be invalid Unit\n * @throws `options.locale` must not be invalid locale\n * @throws `options.localeMatcher` must not be invalid localeMatcher\n * @throws `options.numeric` must not be invalid numeric\n * @throws `options.style` must not be invalid style\n *\n * @example\n * // What is the distance between the dates when the fist date is after the second?\n * intlFormatDistance(\n *   new Date(1986, 3, 4, 11, 30, 0),\n *   new Date(1986, 3, 4, 10, 30, 0)\n * )\n * //=> 'in 1 hour'\n *\n * // What is the distance between the dates when the fist date is before the second?\n * intlFormatDistance(\n *   new Date(1986, 3, 4, 10, 30, 0),\n *   new Date(1986, 3, 4, 11, 30, 0)\n * )\n * //=> '1 hour ago'\n *\n * @example\n * // Use the unit option to force the function to output the result in quarters. Without setting it, the example would return \"next year\"\n * intlFormatDistance(\n *   new Date(1987, 6, 4, 10, 30, 0),\n *   new Date(1986, 3, 4, 10, 30, 0),\n *   { unit: 'quarter' }\n * )\n * //=> 'in 5 quarters'\n *\n * @example\n * // Use the locale option to get the result in Spanish. Without setting it, the example would return \"in 1 hour\".\n * intlFormatDistance(\n *   new Date(1986, 3, 4, 11, 30, 0),\n *   new Date(1986, 3, 4, 10, 30, 0),\n *   { locale: 'es' }\n * )\n * //=> 'dentro de 1 hora'\n *\n * @example\n * // Use the numeric option to force the function to use numeric values. Without setting it, the example would return \"tomorrow\".\n * intlFormatDistance(\n *   new Date(1986, 3, 5, 11, 30, 0),\n *   new Date(1986, 3, 4, 11, 30, 0),\n *   { numeric: 'always' }\n * )\n * //=> 'in 1 day'\n *\n * @example\n * // Use the style option to force the function to use short values. Without setting it, the example would return \"in 2 years\".\n * intlFormatDistance(\n *   new Date(1988, 3, 4, 11, 30, 0),\n *   new Date(1986, 3, 4, 11, 30, 0),\n *   { style: 'short' }\n * )\n * //=> 'in 2 yr'\n */\n\n\nfunction intlFormatDistance(date, baseDate, options) {\n  let value = 0;\n  let unit;\n  const dateLeft = (0, _index10.toDate)(date);\n  const dateRight = (0, _index10.toDate)(baseDate);\n\n  if (!options?.unit) {\n    // Get the unit based on diffInSeconds calculations if no unit is specified\n    const diffInSeconds = (0, _index9.differenceInSeconds)(dateLeft, dateRight); // The smallest unit\n\n    if (Math.abs(diffInSeconds) < _index.secondsInMinute) {\n      value = (0, _index9.differenceInSeconds)(dateLeft, dateRight);\n      unit = \"second\";\n    } else if (Math.abs(diffInSeconds) < _index.secondsInHour) {\n      value = (0, _index8.differenceInMinutes)(dateLeft, dateRight);\n      unit = \"minute\";\n    } else if (Math.abs(diffInSeconds) < _index.secondsInDay && Math.abs((0, _index2.differenceInCalendarDays)(dateLeft, dateRight)) < 1) {\n      value = (0, _index7.differenceInHours)(dateLeft, dateRight);\n      unit = \"hour\";\n    } else if (Math.abs(diffInSeconds) < _index.secondsInWeek && (value = (0, _index2.differenceInCalendarDays)(dateLeft, dateRight)) && Math.abs(value) < 7) {\n      unit = \"day\";\n    } else if (Math.abs(diffInSeconds) < _index.secondsInMonth) {\n      value = (0, _index5.differenceInCalendarWeeks)(dateLeft, dateRight);\n      unit = \"week\";\n    } else if (Math.abs(diffInSeconds) < _index.secondsInQuarter) {\n      value = (0, _index3.differenceInCalendarMonths)(dateLeft, dateRight);\n      unit = \"month\";\n    } else if (Math.abs(diffInSeconds) < _index.secondsInYear) {\n      if ((0, _index4.differenceInCalendarQuarters)(dateLeft, dateRight) < 4) {\n        // To filter out cases that are less than a year but match 4 quarters\n        value = (0, _index4.differenceInCalendarQuarters)(dateLeft, dateRight);\n        unit = \"quarter\";\n      } else {\n        value = (0, _index6.differenceInCalendarYears)(dateLeft, dateRight);\n        unit = \"year\";\n      }\n    } else {\n      value = (0, _index6.differenceInCalendarYears)(dateLeft, dateRight);\n      unit = \"year\";\n    }\n  } else {\n    // Get the value if unit is specified\n    unit = options?.unit;\n\n    if (unit === \"second\") {\n      value = (0, _index9.differenceInSeconds)(dateLeft, dateRight);\n    } else if (unit === \"minute\") {\n      value = (0, _index8.differenceInMinutes)(dateLeft, dateRight);\n    } else if (unit === \"hour\") {\n      value = (0, _index7.differenceInHours)(dateLeft, dateRight);\n    } else if (unit === \"day\") {\n      value = (0, _index2.differenceInCalendarDays)(dateLeft, dateRight);\n    } else if (unit === \"week\") {\n      value = (0, _index5.differenceInCalendarWeeks)(dateLeft, dateRight);\n    } else if (unit === \"month\") {\n      value = (0, _index3.differenceInCalendarMonths)(dateLeft, dateRight);\n    } else if (unit === \"quarter\") {\n      value = (0, _index4.differenceInCalendarQuarters)(dateLeft, dateRight);\n    } else if (unit === \"year\") {\n      value = (0, _index6.differenceInCalendarYears)(dateLeft, dateRight);\n    }\n  }\n\n  const rtf = new Intl.RelativeTimeFormat(options?.locale, {\n    localeMatcher: options?.localeMatcher,\n    numeric: options?.numeric || \"auto\",\n    style: options?.style\n  });\n  return rtf.format(value, unit);\n}","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/node_modules/date-fns/intlFormatDistance.js"],"names":["exports","intlFormatDistance","_index","require","_index2","_index3","_index4","_index5","_index6","_index7","_index8","_index9","_index10","date","baseDate","options","value","unit","dateLeft","toDate","dateRight","diffInSeconds","differenceInSeconds","Math","abs","secondsInMinute","secondsInHour","differenceInMinutes","secondsInDay","differenceInCalendarDays","differenceInHours","secondsInWeek","secondsInMonth","differenceInCalendarWeeks","secondsInQuarter","differenceInCalendarMonths","secondsInYear","differenceInCalendarQuarters","differenceInCalendarYears","rtf","Intl","RelativeTimeFormat","locale","localeMatcher","numeric","style","format"],"mappings":"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","sourcesContent":["\"use strict\";\nexports.intlFormatDistance = intlFormatDistance;\nvar _index = require(\"./constants.js\");\n\nvar _index2 = require(\"./differenceInCalendarDays.js\");\nvar _index3 = require(\"./differenceInCalendarMonths.js\");\nvar _index4 = require(\"./differenceInCalendarQuarters.js\");\nvar _index5 = require(\"./differenceInCalendarWeeks.js\");\nvar _index6 = require(\"./differenceInCalendarYears.js\");\nvar _index7 = require(\"./differenceInHours.js\");\nvar _index8 = require(\"./differenceInMinutes.js\");\nvar _index9 = require(\"./differenceInSeconds.js\");\nvar _index10 = require(\"./toDate.js\");\n\n/**\n * The {@link intlFormatDistance} function options.\n */\n\n/**\n * The unit used to format the distance in {@link intlFormatDistance}.\n */\n\n/**\n * @name intlFormatDistance\n * @category Common Helpers\n * @summary Formats distance between two dates in a human-readable format\n * @description\n * The function calculates the difference between two dates and formats it as a human-readable string.\n *\n * The function will pick the most appropriate unit depending on the distance between dates. For example, if the distance is a few hours, it might return `x hours`. If the distance is a few months, it might return `x months`.\n *\n * You can also specify a unit to force using it regardless of the distance to get a result like `123456 hours`.\n *\n * See the table below for the unit picking logic:\n *\n * | Distance between dates | Result (past)  | Result (future) |\n * | ---------------------- | -------------- | --------------- |\n * | 0 seconds              | now            | now             |\n * | 1-59 seconds           | X seconds ago  | in X seconds    |\n * | 1-59 minutes           | X minutes ago  | in X minutes    |\n * | 1-23 hours             | X hours ago    | in X hours      |\n * | 1 day                  | yesterday      | tomorrow        |\n * | 2-6 days               | X days ago     | in X days       |\n * | 7 days                 | last week      | next week       |\n * | 8 days-1 month         | X weeks ago    | in X weeks      |\n * | 1 month                | last month     | next month      |\n * | 2-3 months             | X months ago   | in X months     |\n * | 1 quarter              | last quarter   | next quarter    |\n * | 2-3 quarters           | X quarters ago | in X quarters   |\n * | 1 year                 | last year      | next year       |\n * | 2+ years               | X years ago    | in X years      |\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date\n * @param baseDate - The date to compare with.\n * @param options - An object with options.\n * See MDN for details [Locale identification and negotiation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation)\n * The narrow one could be similar to the short one for some locales.\n *\n * @returns The distance in words according to language-sensitive relative time formatting.\n *\n * @throws `date` must not be Invalid Date\n * @throws `baseDate` must not be Invalid Date\n * @throws `options.unit` must not be invalid Unit\n * @throws `options.locale` must not be invalid locale\n * @throws `options.localeMatcher` must not be invalid localeMatcher\n * @throws `options.numeric` must not be invalid numeric\n * @throws `options.style` must not be invalid style\n *\n * @example\n * // What is the distance between the dates when the fist date is after the second?\n * intlFormatDistance(\n *   new Date(1986, 3, 4, 11, 30, 0),\n *   new Date(1986, 3, 4, 10, 30, 0)\n * )\n * //=> 'in 1 hour'\n *\n * // What is the distance between the dates when the fist date is before the second?\n * intlFormatDistance(\n *   new Date(1986, 3, 4, 10, 30, 0),\n *   new Date(1986, 3, 4, 11, 30, 0)\n * )\n * //=> '1 hour ago'\n *\n * @example\n * // Use the unit option to force the function to output the result in quarters. Without setting it, the example would return \"next year\"\n * intlFormatDistance(\n *   new Date(1987, 6, 4, 10, 30, 0),\n *   new Date(1986, 3, 4, 10, 30, 0),\n *   { unit: 'quarter' }\n * )\n * //=> 'in 5 quarters'\n *\n * @example\n * // Use the locale option to get the result in Spanish. Without setting it, the example would return \"in 1 hour\".\n * intlFormatDistance(\n *   new Date(1986, 3, 4, 11, 30, 0),\n *   new Date(1986, 3, 4, 10, 30, 0),\n *   { locale: 'es' }\n * )\n * //=> 'dentro de 1 hora'\n *\n * @example\n * // Use the numeric option to force the function to use numeric values. Without setting it, the example would return \"tomorrow\".\n * intlFormatDistance(\n *   new Date(1986, 3, 5, 11, 30, 0),\n *   new Date(1986, 3, 4, 11, 30, 0),\n *   { numeric: 'always' }\n * )\n * //=> 'in 1 day'\n *\n * @example\n * // Use the style option to force the function to use short values. Without setting it, the example would return \"in 2 years\".\n * intlFormatDistance(\n *   new Date(1988, 3, 4, 11, 30, 0),\n *   new Date(1986, 3, 4, 11, 30, 0),\n *   { style: 'short' }\n * )\n * //=> 'in 2 yr'\n */\nfunction intlFormatDistance(date, baseDate, options) {\n  let value = 0;\n  let unit;\n  const dateLeft = (0, _index10.toDate)(date);\n  const dateRight = (0, _index10.toDate)(baseDate);\n\n  if (!options?.unit) {\n    // Get the unit based on diffInSeconds calculations if no unit is specified\n    const diffInSeconds = (0, _index9.differenceInSeconds)(dateLeft, dateRight); // The smallest unit\n\n    if (Math.abs(diffInSeconds) < _index.secondsInMinute) {\n      value = (0, _index9.differenceInSeconds)(dateLeft, dateRight);\n      unit = \"second\";\n    } else if (Math.abs(diffInSeconds) < _index.secondsInHour) {\n      value = (0, _index8.differenceInMinutes)(dateLeft, dateRight);\n      unit = \"minute\";\n    } else if (\n      Math.abs(diffInSeconds) < _index.secondsInDay &&\n      Math.abs((0, _index2.differenceInCalendarDays)(dateLeft, dateRight)) < 1\n    ) {\n      value = (0, _index7.differenceInHours)(dateLeft, dateRight);\n      unit = \"hour\";\n    } else if (\n      Math.abs(diffInSeconds) < _index.secondsInWeek &&\n      (value = (0, _index2.differenceInCalendarDays)(dateLeft, dateRight)) &&\n      Math.abs(value) < 7\n    ) {\n      unit = \"day\";\n    } else if (Math.abs(diffInSeconds) < _index.secondsInMonth) {\n      value = (0, _index5.differenceInCalendarWeeks)(dateLeft, dateRight);\n      unit = \"week\";\n    } else if (Math.abs(diffInSeconds) < _index.secondsInQuarter) {\n      value = (0, _index3.differenceInCalendarMonths)(dateLeft, dateRight);\n      unit = \"month\";\n    } else if (Math.abs(diffInSeconds) < _index.secondsInYear) {\n      if ((0, _index4.differenceInCalendarQuarters)(dateLeft, dateRight) < 4) {\n        // To filter out cases that are less than a year but match 4 quarters\n        value = (0, _index4.differenceInCalendarQuarters)(dateLeft, dateRight);\n        unit = \"quarter\";\n      } else {\n        value = (0, _index6.differenceInCalendarYears)(dateLeft, dateRight);\n        unit = \"year\";\n      }\n    } else {\n      value = (0, _index6.differenceInCalendarYears)(dateLeft, dateRight);\n      unit = \"year\";\n    }\n  } else {\n    // Get the value if unit is specified\n    unit = options?.unit;\n    if (unit === \"second\") {\n      value = (0, _index9.differenceInSeconds)(dateLeft, dateRight);\n    } else if (unit === \"minute\") {\n      value = (0, _index8.differenceInMinutes)(dateLeft, dateRight);\n    } else if (unit === \"hour\") {\n      value = (0, _index7.differenceInHours)(dateLeft, dateRight);\n    } else if (unit === \"day\") {\n      value = (0, _index2.differenceInCalendarDays)(dateLeft, dateRight);\n    } else if (unit === \"week\") {\n      value = (0, _index5.differenceInCalendarWeeks)(dateLeft, dateRight);\n    } else if (unit === \"month\") {\n      value = (0, _index3.differenceInCalendarMonths)(dateLeft, dateRight);\n    } else if (unit === \"quarter\") {\n      value = (0, _index4.differenceInCalendarQuarters)(dateLeft, dateRight);\n    } else if (unit === \"year\") {\n      value = (0, _index6.differenceInCalendarYears)(dateLeft, dateRight);\n    }\n  }\n\n  const rtf = new Intl.RelativeTimeFormat(options?.locale, {\n    localeMatcher: options?.localeMatcher,\n    numeric: options?.numeric || \"auto\",\n    style: options?.style,\n  });\n\n  return rtf.format(value, unit);\n}\n"]},"metadata":{},"sourceType":"script"}