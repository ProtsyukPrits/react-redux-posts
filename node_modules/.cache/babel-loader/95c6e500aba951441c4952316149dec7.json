{"ast":null,"code":"import _slicedToArray from \"/home/dmytro/react-redux-posts/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n// src/index.ts\nimport { useMemo, useState } from \"react\";\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\n\nfunction useControllableProp(prop, state) {\n  var controlled = typeof prop !== \"undefined\";\n  var value = controlled ? prop : state;\n  return useMemo(function () {\n    return [controlled, value];\n  }, [controlled, value]);\n}\n\nfunction useControllableState(props) {\n  var valueProp = props.value,\n      defaultValue = props.defaultValue,\n      onChange = props.onChange,\n      _props$shouldUpdate = props.shouldUpdate,\n      shouldUpdate = _props$shouldUpdate === void 0 ? function (prev, next) {\n    return prev !== next;\n  } : _props$shouldUpdate;\n  var onChangeProp = useCallbackRef(onChange);\n  var shouldUpdateProp = useCallbackRef(shouldUpdate);\n\n  var _useState = useState(defaultValue),\n      _useState2 = _slicedToArray(_useState, 2),\n      uncontrolledState = _useState2[0],\n      setUncontrolledState = _useState2[1];\n\n  var controlled = valueProp !== void 0;\n  var value = controlled ? valueProp : uncontrolledState;\n  var setValue = useCallbackRef(function (next) {\n    var setter = next;\n    var nextValue = typeof next === \"function\" ? setter(value) : next;\n\n    if (!shouldUpdateProp(value, nextValue)) {\n      return;\n    }\n\n    if (!controlled) {\n      setUncontrolledState(nextValue);\n    }\n\n    onChangeProp(nextValue);\n  }, [controlled, onChangeProp, value, shouldUpdateProp]);\n  return [value, setValue];\n}\n\nexport { useControllableProp, useControllableState };","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/node_modules/@chakra-ui/react-use-controllable-state/dist/index.esm.js"],"names":["useMemo","useState","useCallbackRef","useControllableProp","prop","state","controlled","value","useControllableState","props","valueProp","defaultValue","onChange","shouldUpdate","prev","next","onChangeProp","shouldUpdateProp","uncontrolledState","setUncontrolledState","setValue","setter","nextValue"],"mappings":";AAAA;AACA,SAASA,OAAT,EAAkBC,QAAlB,QAAkC,OAAlC;AACA,SAASC,cAAT,QAA+B,mCAA/B;;AACA,SAASC,mBAAT,CAA6BC,IAA7B,EAAmCC,KAAnC,EAA0C;AACxC,MAAMC,UAAU,GAAG,OAAOF,IAAP,KAAgB,WAAnC;AACA,MAAMG,KAAK,GAAGD,UAAU,GAAGF,IAAH,GAAUC,KAAlC;AACA,SAAOL,OAAO,CAAC;AAAA,WAAM,CAACM,UAAD,EAAaC,KAAb,CAAN;AAAA,GAAD,EAA4B,CAACD,UAAD,EAAaC,KAAb,CAA5B,CAAd;AACD;;AACD,SAASC,oBAAT,CAA8BC,KAA9B,EAAqC;AACnC,MACSC,SADT,GAKID,KALJ,CACEF,KADF;AAAA,MAEEI,YAFF,GAKIF,KALJ,CAEEE,YAFF;AAAA,MAGEC,QAHF,GAKIH,KALJ,CAGEG,QAHF;AAAA,4BAKIH,KALJ,CAIEI,YAJF;AAAA,MAIEA,YAJF,oCAIiB,UAACC,IAAD,EAAOC,IAAP;AAAA,WAAgBD,IAAI,KAAKC,IAAzB;AAAA,GAJjB;AAMA,MAAMC,YAAY,GAAGd,cAAc,CAACU,QAAD,CAAnC;AACA,MAAMK,gBAAgB,GAAGf,cAAc,CAACW,YAAD,CAAvC;;AACA,kBAAkDZ,QAAQ,CAACU,YAAD,CAA1D;AAAA;AAAA,MAAOO,iBAAP;AAAA,MAA0BC,oBAA1B;;AACA,MAAMb,UAAU,GAAGI,SAAS,KAAK,KAAK,CAAtC;AACA,MAAMH,KAAK,GAAGD,UAAU,GAAGI,SAAH,GAAeQ,iBAAvC;AACA,MAAME,QAAQ,GAAGlB,cAAc,CAAC,UAACa,IAAD,EAAU;AACxC,QAAMM,MAAM,GAAGN,IAAf;AACA,QAAMO,SAAS,GAAG,OAAOP,IAAP,KAAgB,UAAhB,GAA6BM,MAAM,CAACd,KAAD,CAAnC,GAA6CQ,IAA/D;;AACA,QAAI,CAACE,gBAAgB,CAACV,KAAD,EAAQe,SAAR,CAArB,EAAyC;AACvC;AACD;;AACD,QAAI,CAAChB,UAAL,EAAiB;AACfa,MAAAA,oBAAoB,CAACG,SAAD,CAApB;AACD;;AACDN,IAAAA,YAAY,CAACM,SAAD,CAAZ;AACD,GAV8B,EAU5B,CAAChB,UAAD,EAAaU,YAAb,EAA2BT,KAA3B,EAAkCU,gBAAlC,CAV4B,CAA/B;AAWA,SAAO,CAACV,KAAD,EAAQa,QAAR,CAAP;AACD;;AACD,SACEjB,mBADF,EAEEK,oBAFF","sourcesContent":["// src/index.ts\nimport { useMemo, useState } from \"react\";\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nfunction useControllableProp(prop, state) {\n  const controlled = typeof prop !== \"undefined\";\n  const value = controlled ? prop : state;\n  return useMemo(() => [controlled, value], [controlled, value]);\n}\nfunction useControllableState(props) {\n  const {\n    value: valueProp,\n    defaultValue,\n    onChange,\n    shouldUpdate = (prev, next) => prev !== next\n  } = props;\n  const onChangeProp = useCallbackRef(onChange);\n  const shouldUpdateProp = useCallbackRef(shouldUpdate);\n  const [uncontrolledState, setUncontrolledState] = useState(defaultValue);\n  const controlled = valueProp !== void 0;\n  const value = controlled ? valueProp : uncontrolledState;\n  const setValue = useCallbackRef((next) => {\n    const setter = next;\n    const nextValue = typeof next === \"function\" ? setter(value) : next;\n    if (!shouldUpdateProp(value, nextValue)) {\n      return;\n    }\n    if (!controlled) {\n      setUncontrolledState(nextValue);\n    }\n    onChangeProp(nextValue);\n  }, [controlled, onChangeProp, value, shouldUpdateProp]);\n  return [value, setValue];\n}\nexport {\n  useControllableProp,\n  useControllableState\n};\n"]},"metadata":{},"sourceType":"module"}