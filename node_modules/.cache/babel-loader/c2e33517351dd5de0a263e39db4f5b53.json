{"ast":null,"code":"import{createSlice,nanoid}from\"@reduxjs/toolkit\";import{sub}from\"date-fns\";var initialState=[{id:\"1\",title:\"Bitcoin\",content:\"Why I didn't buy bitcoin in 2010\",date:sub(new Date(),{minutes:10}).toISOString(),reactions:{thumbsUp:0,wow:0,heart:0,rocket:0,coffee:0}},{id:\"2\",title:\"Love my cat\",content:\"Why do cats poop in slippers and not in the tray?\",date:sub(new Date(),{minutes:5}).toISOString(),reactions:{thumbsUp:0,wow:0,heart:0,rocket:0,coffee:0}}];var postsSlice=createSlice({name:\"posts\",initialState:initialState,reducers:{postAdded:{reducer:function reducer(state,action){state.push(action.payload);},prepare:function prepare(title,content,userId){return{payload:{id:nanoid(),title:title,content:content,date:new Date().toISOString(),userId:userId,reactions:{thumbsUp:0,wow:0,heart:0,rocket:0,coffee:0}}};}},reactionAdded:function reactionAdded(state,action){var _action$payload=action.payload,postId=_action$payload.postId,reaction=_action$payload.reaction;var existingPost=state.find(function(post){return post.id===postId;});if(existingPost){existingPost.reactions[reaction]++;}}}});export var selectAllPosts=function selectAllPosts(state){return state.posts;};var _postsSlice$actions=postsSlice.actions,postAdded=_postsSlice$actions.postAdded,reactionAdded=_postsSlice$actions.reactionAdded;export{postAdded,reactionAdded};export default postsSlice.reducer;","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/src/features/posts/postsSlice.js"],"names":["createSlice","nanoid","sub","initialState","id","title","content","date","Date","minutes","toISOString","reactions","thumbsUp","wow","heart","rocket","coffee","postsSlice","name","reducers","postAdded","reducer","state","action","push","payload","prepare","userId","reactionAdded","postId","reaction","existingPost","find","post","selectAllPosts","posts","actions"],"mappings":"AAAA,OAASA,WAAT,CAAsBC,MAAtB,KAAoC,kBAApC,CACA,OAASC,GAAT,KAAoB,UAApB,CAEA,GAAMC,CAAAA,YAAY,CAAG,CACnB,CACEC,EAAE,CAAE,GADN,CAEEC,KAAK,CAAE,SAFT,CAGEC,OAAO,CAAE,kCAHX,CAIEC,IAAI,CAAEL,GAAG,CAAC,GAAIM,CAAAA,IAAJ,EAAD,CAAa,CAAEC,OAAO,CAAE,EAAX,CAAb,CAAH,CAAiCC,WAAjC,EAJR,CAKEC,SAAS,CAAE,CACTC,QAAQ,CAAE,CADD,CAETC,GAAG,CAAE,CAFI,CAGTC,KAAK,CAAE,CAHE,CAITC,MAAM,CAAE,CAJC,CAKTC,MAAM,CAAE,CALC,CALb,CADmB,CAcnB,CACEZ,EAAE,CAAE,GADN,CAEEC,KAAK,CAAE,aAFT,CAGEC,OAAO,CAAE,mDAHX,CAIEC,IAAI,CAAEL,GAAG,CAAC,GAAIM,CAAAA,IAAJ,EAAD,CAAa,CAAEC,OAAO,CAAE,CAAX,CAAb,CAAH,CAAgCC,WAAhC,EAJR,CAKEC,SAAS,CAAE,CACTC,QAAQ,CAAE,CADD,CAETC,GAAG,CAAE,CAFI,CAGTC,KAAK,CAAE,CAHE,CAITC,MAAM,CAAE,CAJC,CAKTC,MAAM,CAAE,CALC,CALb,CAdmB,CAArB,CA6BA,GAAMC,CAAAA,UAAU,CAAGjB,WAAW,CAAC,CAC7BkB,IAAI,CAAE,OADuB,CAE7Bf,YAAY,CAAZA,YAF6B,CAG7BgB,QAAQ,CAAE,CACRC,SAAS,CAAE,CACTC,OADS,kBACDC,KADC,CACMC,MADN,CACc,CACrBD,KAAK,CAACE,IAAN,CAAWD,MAAM,CAACE,OAAlB,EACD,CAHQ,CAITC,OAJS,kBAIDrB,KAJC,CAIMC,OAJN,CAIeqB,MAJf,CAIuB,CAC9B,MAAO,CACLF,OAAO,CAAE,CACPrB,EAAE,CAAEH,MAAM,EADH,CAEPI,KAAK,CAALA,KAFO,CAGPC,OAAO,CAAPA,OAHO,CAIPC,IAAI,CAAE,GAAIC,CAAAA,IAAJ,GAAWE,WAAX,EAJC,CAKPiB,MAAM,CAANA,MALO,CAMPhB,SAAS,CAAE,CACTC,QAAQ,CAAE,CADD,CAETC,GAAG,CAAE,CAFI,CAGTC,KAAK,CAAE,CAHE,CAITC,MAAM,CAAE,CAJC,CAKTC,MAAM,CAAE,CALC,CANJ,CADJ,CAAP,CAgBD,CArBQ,CADH,CAwBRY,aAxBQ,wBAwBMN,KAxBN,CAwBaC,MAxBb,CAwBqB,CAC3B,oBAA6BA,MAAM,CAACE,OAApC,CAAQI,MAAR,iBAAQA,MAAR,CAAgBC,QAAhB,iBAAgBA,QAAhB,CACA,GAAMC,CAAAA,YAAY,CAAGT,KAAK,CAACU,IAAN,CAAW,SAACC,IAAD,QAAUA,CAAAA,IAAI,CAAC7B,EAAL,GAAYyB,MAAtB,EAAX,CAArB,CACA,GAAIE,YAAJ,CAAkB,CAChBA,YAAY,CAACpB,SAAb,CAAuBmB,QAAvB,IACD,CACF,CA9BO,CAHmB,CAAD,CAA9B,CAqCA,MAAO,IAAMI,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACZ,KAAD,QAAWA,CAAAA,KAAK,CAACa,KAAjB,EAAvB,CACA,wBAAqClB,UAAU,CAACmB,OAAhD,CAAQhB,SAAR,qBAAQA,SAAR,CAAmBQ,aAAnB,qBAAmBA,aAAnB,C,gCACP,cAAeX,CAAAA,UAAU,CAACI,OAA1B","sourcesContent":["import { createSlice, nanoid } from \"@reduxjs/toolkit\";\nimport { sub } from \"date-fns\";\n\nconst initialState = [\n  {\n    id: \"1\",\n    title: \"Bitcoin\",\n    content: \"Why I didn't buy bitcoin in 2010\",\n    date: sub(new Date(), { minutes: 10 }).toISOString(),\n    reactions: {\n      thumbsUp: 0,\n      wow: 0,\n      heart: 0,\n      rocket: 0,\n      coffee: 0,\n    },\n  },\n  {\n    id: \"2\",\n    title: \"Love my cat\",\n    content: \"Why do cats poop in slippers and not in the tray?\",\n    date: sub(new Date(), { minutes: 5 }).toISOString(),\n    reactions: {\n      thumbsUp: 0,\n      wow: 0,\n      heart: 0,\n      rocket: 0,\n      coffee: 0,\n    },\n  },\n];\n\nconst postsSlice = createSlice({\n  name: \"posts\",\n  initialState,\n  reducers: {\n    postAdded: {\n      reducer(state, action) {\n        state.push(action.payload);\n      },\n      prepare(title, content, userId) {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content,\n            date: new Date().toISOString(),\n            userId,\n            reactions: {\n              thumbsUp: 0,\n              wow: 0,\n              heart: 0,\n              rocket: 0,\n              coffee: 0,\n            },\n          },\n        };\n      },\n    },\n    reactionAdded(state, action) {\n      const { postId, reaction } = action.payload;\n      const existingPost = state.find((post) => post.id === postId);\n      if (existingPost) {\n        existingPost.reactions[reaction]++;\n      }\n    },\n  },\n});\n\nexport const selectAllPosts = (state) => state.posts;\nexport const { postAdded, reactionAdded } = postsSlice.actions;\nexport default postsSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}