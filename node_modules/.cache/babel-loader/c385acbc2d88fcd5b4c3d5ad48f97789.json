{"ast":null,"code":"\"use strict\";\n\nexports.differenceInCalendarWeeks = differenceInCalendarWeeks;\n\nvar _index = require(\"./constants.js\");\n\nvar _index2 = require(\"./startOfWeek.js\");\n\nvar _index3 = require(\"./_lib/getTimezoneOffsetInMilliseconds.js\");\n/**\n * The {@link differenceInCalendarWeeks} function options.\n */\n\n/**\n * @name differenceInCalendarWeeks\n * @category Week Helpers\n * @summary Get the number of calendar weeks between the given dates.\n *\n * @description\n * Get the number of calendar weeks between the given dates.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n * @param options - An object with options.\n *\n * @returns The number of calendar weeks\n *\n * @example\n * // How many calendar weeks are between 5 July 2014 and 20 July 2014?\n * const result = differenceInCalendarWeeks(\n *   new Date(2014, 6, 20),\n *   new Date(2014, 6, 5)\n * )\n * //=> 3\n *\n * @example\n * // If the week starts on Monday,\n * // how many calendar weeks are between 5 July 2014 and 20 July 2014?\n * const result = differenceInCalendarWeeks(\n *   new Date(2014, 6, 20),\n *   new Date(2014, 6, 5),\n *   { weekStartsOn: 1 }\n * )\n * //=> 2\n */\n\n\nfunction differenceInCalendarWeeks(dateLeft, dateRight, options) {\n  const startOfWeekLeft = (0, _index2.startOfWeek)(dateLeft, options);\n  const startOfWeekRight = (0, _index2.startOfWeek)(dateRight, options);\n  const timestampLeft = +startOfWeekLeft - (0, _index3.getTimezoneOffsetInMilliseconds)(startOfWeekLeft);\n  const timestampRight = +startOfWeekRight - (0, _index3.getTimezoneOffsetInMilliseconds)(startOfWeekRight); // Round the number of days to the nearest integer because the number of\n  // milliseconds in a days is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n\n  return Math.round((timestampLeft - timestampRight) / _index.millisecondsInWeek);\n}","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/node_modules/date-fns/differenceInCalendarWeeks.js"],"names":["exports","differenceInCalendarWeeks","_index","require","_index2","_index3","dateLeft","dateRight","options","startOfWeekLeft","startOfWeek","startOfWeekRight","timestampLeft","getTimezoneOffsetInMilliseconds","timestampRight","Math","round","millisecondsInWeek"],"mappings":"AAAA;;AACAA,OAAO,CAACC,yBAAR,GAAoCA,yBAApC;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,gBAAD,CAApB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,kBAAD,CAArB;;AAEA,IAAIE,OAAO,GAAGF,OAAO,CAAC,2CAAD,CAArB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,yBAAT,CAAmCK,QAAnC,EAA6CC,SAA7C,EAAwDC,OAAxD,EAAiE;AAC/D,QAAMC,eAAe,GAAG,CAAC,GAAGL,OAAO,CAACM,WAAZ,EAAyBJ,QAAzB,EAAmCE,OAAnC,CAAxB;AACA,QAAMG,gBAAgB,GAAG,CAAC,GAAGP,OAAO,CAACM,WAAZ,EAAyBH,SAAzB,EAAoCC,OAApC,CAAzB;AAEA,QAAMI,aAAa,GACjB,CAACH,eAAD,GACA,CAAC,GAAGJ,OAAO,CAACQ,+BAAZ,EAA6CJ,eAA7C,CAFF;AAGA,QAAMK,cAAc,GAClB,CAACH,gBAAD,GACA,CAAC,GAAGN,OAAO,CAACQ,+BAAZ,EAA6CF,gBAA7C,CAFF,CAP+D,CAW/D;AACA;AACA;;AACA,SAAOI,IAAI,CAACC,KAAL,CACL,CAACJ,aAAa,GAAGE,cAAjB,IAAmCZ,MAAM,CAACe,kBADrC,CAAP;AAGD","sourcesContent":["\"use strict\";\nexports.differenceInCalendarWeeks = differenceInCalendarWeeks;\nvar _index = require(\"./constants.js\");\nvar _index2 = require(\"./startOfWeek.js\");\n\nvar _index3 = require(\"./_lib/getTimezoneOffsetInMilliseconds.js\");\n\n/**\n * The {@link differenceInCalendarWeeks} function options.\n */\n\n/**\n * @name differenceInCalendarWeeks\n * @category Week Helpers\n * @summary Get the number of calendar weeks between the given dates.\n *\n * @description\n * Get the number of calendar weeks between the given dates.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n * @param options - An object with options.\n *\n * @returns The number of calendar weeks\n *\n * @example\n * // How many calendar weeks are between 5 July 2014 and 20 July 2014?\n * const result = differenceInCalendarWeeks(\n *   new Date(2014, 6, 20),\n *   new Date(2014, 6, 5)\n * )\n * //=> 3\n *\n * @example\n * // If the week starts on Monday,\n * // how many calendar weeks are between 5 July 2014 and 20 July 2014?\n * const result = differenceInCalendarWeeks(\n *   new Date(2014, 6, 20),\n *   new Date(2014, 6, 5),\n *   { weekStartsOn: 1 }\n * )\n * //=> 2\n */\nfunction differenceInCalendarWeeks(dateLeft, dateRight, options) {\n  const startOfWeekLeft = (0, _index2.startOfWeek)(dateLeft, options);\n  const startOfWeekRight = (0, _index2.startOfWeek)(dateRight, options);\n\n  const timestampLeft =\n    +startOfWeekLeft -\n    (0, _index3.getTimezoneOffsetInMilliseconds)(startOfWeekLeft);\n  const timestampRight =\n    +startOfWeekRight -\n    (0, _index3.getTimezoneOffsetInMilliseconds)(startOfWeekRight);\n\n  // Round the number of days to the nearest integer because the number of\n  // milliseconds in a days is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(\n    (timestampLeft - timestampRight) / _index.millisecondsInWeek,\n  );\n}\n"]},"metadata":{},"sourceType":"script"}