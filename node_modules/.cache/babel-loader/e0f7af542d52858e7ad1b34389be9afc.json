{"ast":null,"code":"\"use strict\";\n\nexports.eachMonthOfInterval = eachMonthOfInterval;\n\nvar _index = require(\"./toDate.js\");\n/**\n * The {@link eachMonthOfInterval} function options.\n */\n\n/**\n * @name eachMonthOfInterval\n * @category Interval Helpers\n * @summary Return the array of months within the specified time interval.\n *\n * @description\n * Return the array of months within the specified time interval.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param interval - The interval\n *\n * @returns The array with starts of months from the month of the interval start to the month of the interval end\n *\n * @example\n * // Each month between 6 February 2014 and 10 August 2014:\n * const result = eachMonthOfInterval({\n *   start: new Date(2014, 1, 6),\n *   end: new Date(2014, 7, 10)\n * })\n * //=> [\n * //   Sat Feb 01 2014 00:00:00,\n * //   Sat Mar 01 2014 00:00:00,\n * //   Tue Apr 01 2014 00:00:00,\n * //   Thu May 01 2014 00:00:00,\n * //   Sun Jun 01 2014 00:00:00,\n * //   Tue Jul 01 2014 00:00:00,\n * //   Fri Aug 01 2014 00:00:00\n * // ]\n */\n\n\nfunction eachMonthOfInterval(interval, options) {\n  const startDate = (0, _index.toDate)(interval.start);\n  const endDate = (0, _index.toDate)(interval.end);\n  let reversed = +startDate > +endDate;\n  const endTime = reversed ? +startDate : +endDate;\n  const currentDate = reversed ? endDate : startDate;\n  currentDate.setHours(0, 0, 0, 0);\n  currentDate.setDate(1);\n  let step = options?.step ?? 1;\n  if (!step) return [];\n\n  if (step < 0) {\n    step = -step;\n    reversed = !reversed;\n  }\n\n  const dates = [];\n\n  while (+currentDate <= endTime) {\n    dates.push((0, _index.toDate)(currentDate));\n    currentDate.setMonth(currentDate.getMonth() + step);\n  }\n\n  return reversed ? dates.reverse() : dates;\n}","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/node_modules/date-fns/eachMonthOfInterval.js"],"names":["exports","eachMonthOfInterval","_index","require","interval","options","startDate","toDate","start","endDate","end","reversed","endTime","currentDate","setHours","setDate","step","dates","push","setMonth","getMonth","reverse"],"mappings":"AAAA;;AACAA,OAAO,CAACC,mBAAR,GAA8BA,mBAA9B;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,aAAD,CAApB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,mBAAT,CAA6BG,QAA7B,EAAuCC,OAAvC,EAAgD;AAC9C,QAAMC,SAAS,GAAG,CAAC,GAAGJ,MAAM,CAACK,MAAX,EAAmBH,QAAQ,CAACI,KAA5B,CAAlB;AACA,QAAMC,OAAO,GAAG,CAAC,GAAGP,MAAM,CAACK,MAAX,EAAmBH,QAAQ,CAACM,GAA5B,CAAhB;AAEA,MAAIC,QAAQ,GAAG,CAACL,SAAD,GAAa,CAACG,OAA7B;AACA,QAAMG,OAAO,GAAGD,QAAQ,GAAG,CAACL,SAAJ,GAAgB,CAACG,OAAzC;AACA,QAAMI,WAAW,GAAGF,QAAQ,GAAGF,OAAH,GAAaH,SAAzC;AACAO,EAAAA,WAAW,CAACC,QAAZ,CAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B;AACAD,EAAAA,WAAW,CAACE,OAAZ,CAAoB,CAApB;AAEA,MAAIC,IAAI,GAAGX,OAAO,EAAEW,IAAT,IAAiB,CAA5B;AACA,MAAI,CAACA,IAAL,EAAW,OAAO,EAAP;;AACX,MAAIA,IAAI,GAAG,CAAX,EAAc;AACZA,IAAAA,IAAI,GAAG,CAACA,IAAR;AACAL,IAAAA,QAAQ,GAAG,CAACA,QAAZ;AACD;;AAED,QAAMM,KAAK,GAAG,EAAd;;AAEA,SAAO,CAACJ,WAAD,IAAgBD,OAAvB,EAAgC;AAC9BK,IAAAA,KAAK,CAACC,IAAN,CAAW,CAAC,GAAGhB,MAAM,CAACK,MAAX,EAAmBM,WAAnB,CAAX;AACAA,IAAAA,WAAW,CAACM,QAAZ,CAAqBN,WAAW,CAACO,QAAZ,KAAyBJ,IAA9C;AACD;;AAED,SAAOL,QAAQ,GAAGM,KAAK,CAACI,OAAN,EAAH,GAAqBJ,KAApC;AACD","sourcesContent":["\"use strict\";\nexports.eachMonthOfInterval = eachMonthOfInterval;\nvar _index = require(\"./toDate.js\");\n\n/**\n * The {@link eachMonthOfInterval} function options.\n */\n\n/**\n * @name eachMonthOfInterval\n * @category Interval Helpers\n * @summary Return the array of months within the specified time interval.\n *\n * @description\n * Return the array of months within the specified time interval.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param interval - The interval\n *\n * @returns The array with starts of months from the month of the interval start to the month of the interval end\n *\n * @example\n * // Each month between 6 February 2014 and 10 August 2014:\n * const result = eachMonthOfInterval({\n *   start: new Date(2014, 1, 6),\n *   end: new Date(2014, 7, 10)\n * })\n * //=> [\n * //   Sat Feb 01 2014 00:00:00,\n * //   Sat Mar 01 2014 00:00:00,\n * //   Tue Apr 01 2014 00:00:00,\n * //   Thu May 01 2014 00:00:00,\n * //   Sun Jun 01 2014 00:00:00,\n * //   Tue Jul 01 2014 00:00:00,\n * //   Fri Aug 01 2014 00:00:00\n * // ]\n */\nfunction eachMonthOfInterval(interval, options) {\n  const startDate = (0, _index.toDate)(interval.start);\n  const endDate = (0, _index.toDate)(interval.end);\n\n  let reversed = +startDate > +endDate;\n  const endTime = reversed ? +startDate : +endDate;\n  const currentDate = reversed ? endDate : startDate;\n  currentDate.setHours(0, 0, 0, 0);\n  currentDate.setDate(1);\n\n  let step = options?.step ?? 1;\n  if (!step) return [];\n  if (step < 0) {\n    step = -step;\n    reversed = !reversed;\n  }\n\n  const dates = [];\n\n  while (+currentDate <= endTime) {\n    dates.push((0, _index.toDate)(currentDate));\n    currentDate.setMonth(currentDate.getMonth() + step);\n  }\n\n  return reversed ? dates.reverse() : dates;\n}\n"]},"metadata":{},"sourceType":"script"}