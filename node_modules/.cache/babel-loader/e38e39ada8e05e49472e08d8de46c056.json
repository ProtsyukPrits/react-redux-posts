{"ast":null,"code":"import{FormList,Label}from'./ContactForm.styled';import{Formik,Field,ErrorMessage}from'formik';import*as yup from'yup';import Notiflix from'notiflix';import{useDispatch,useSelector}from'react-redux';import{addContact}from'redux/contacts/operations';import{selectContacts}from'redux/contacts/selectors';import{Button,Input}from'@chakra-ui/react';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var initialValues={name:'',number:''};var nameRegex=/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/;var numberRegex=/^\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/;var schema=yup.object().shape({name:yup.string().matches(nameRegex,\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\").required(),number:yup.string().matches(numberRegex,'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +').required()});var ContactForm=function ContactForm(){var dispatch=useDispatch();var contacts=useSelector(selectContacts);var handleSubmit=function handleSubmit(values,_ref){var resetForm=_ref.resetForm;var name=values.name;if(contacts.some(function(contact){return contact.name===name;})){return Notiflix.Notify.info(\"\".concat(name,\" is already in contacts!\"));}resetForm();dispatch(addContact(values));};return/*#__PURE__*/_jsx(Formik,{initialValues:initialValues,onSubmit:handleSubmit,validationSchema:schema,children:/*#__PURE__*/_jsxs(FormList,{autoComplete:\"off\",children:[/*#__PURE__*/_jsxs(Label,{htmlFor:\"name\",children:[\"Name:\",/*#__PURE__*/_jsx(Field,{type:\"text\",name:\"name\",as:Input}),/*#__PURE__*/_jsx(ErrorMessage,{name:\"name\",component:\"div\"})]}),/*#__PURE__*/_jsxs(Label,{htmlFor:\"number\",children:[\"Number:\",/*#__PURE__*/_jsx(Field,{type:\"tel\",name:\"number\",as:Input}),/*#__PURE__*/_jsx(ErrorMessage,{name:\"number\",component:\"div\"})]}),/*#__PURE__*/_jsx(Button,{type:\"submit\",children:\"Add contacts\"})]})});};export default ContactForm;","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/src/components/ContactForm/ContactForm.jsx"],"names":["FormList","Label","Formik","Field","ErrorMessage","yup","Notiflix","useDispatch","useSelector","addContact","selectContacts","Button","Input","initialValues","name","number","nameRegex","numberRegex","schema","object","shape","string","matches","required","ContactForm","dispatch","contacts","handleSubmit","values","resetForm","some","contact","Notify","info"],"mappings":"AAAA,OAASA,QAAT,CAAmBC,KAAnB,KAA+B,sBAA/B,CACA,OAASC,MAAT,CAAiBC,KAAjB,CAAwBC,YAAxB,KAA4C,QAA5C,CACA,MAAO,GAAKC,CAAAA,GAAZ,KAAqB,KAArB,CACA,MAAOC,CAAAA,QAAP,KAAqB,UAArB,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CACA,OAASC,UAAT,KAA2B,2BAA3B,CACA,OAASC,cAAT,KAA+B,0BAA/B,CACA,OAASC,MAAT,CAAiBC,KAAjB,KAA8B,kBAA9B,C,wFAEA,GAAMC,CAAAA,aAAa,CAAG,CACpBC,IAAI,CAAE,EADc,CAEpBC,MAAM,CAAE,EAFY,CAAtB,CAKA,GAAMC,CAAAA,SAAS,CAAG,4DAAlB,CACA,GAAMC,CAAAA,WAAW,CACf,8EADF,CAGA,GAAMC,CAAAA,MAAM,CAAGb,GAAG,CAACc,MAAJ,GAAaC,KAAb,CAAmB,CAChCN,IAAI,CAAET,GAAG,CACNgB,MADG,GAEHC,OAFG,CAGFN,SAHE,CAIF,wIAJE,EAMHO,QANG,EAD0B,CAQhCR,MAAM,CAAEV,GAAG,CACRgB,MADK,GAELC,OAFK,CAGJL,WAHI,CAIJ,8FAJI,EAMLM,QANK,EARwB,CAAnB,CAAf,CAiBA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAAM,CACxB,GAAMC,CAAAA,QAAQ,CAAGlB,WAAW,EAA5B,CACA,GAAMmB,CAAAA,QAAQ,CAAGlB,WAAW,CAACE,cAAD,CAA5B,CAEA,GAAMiB,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,MAAD,MAA2B,IAAhBC,CAAAA,SAAgB,MAAhBA,SAAgB,CAC9C,GAAQf,CAAAA,IAAR,CAAiBc,MAAjB,CAAQd,IAAR,CAEA,GAAIY,QAAQ,CAACI,IAAT,CAAc,SAAAC,OAAO,QAAIA,CAAAA,OAAO,CAACjB,IAAR,GAAiBA,IAArB,EAArB,CAAJ,CAAqD,CACnD,MAAOR,CAAAA,QAAQ,CAAC0B,MAAT,CAAgBC,IAAhB,WAAwBnB,IAAxB,6BAAP,CACD,CAEDe,SAAS,GACTJ,QAAQ,CAAChB,UAAU,CAACmB,MAAD,CAAX,CAAR,CACD,CATD,CAWA,mBACI,KAAC,MAAD,EACE,aAAa,CAAEf,aADjB,CAEE,QAAQ,CAAEc,YAFZ,CAGE,gBAAgB,CAAET,MAHpB,uBAKE,MAAC,QAAD,EAAU,YAAY,CAAC,KAAvB,wBACE,MAAC,KAAD,EAAO,OAAO,CAAC,MAAf,gCAEE,KAAC,KAAD,EAAO,IAAI,CAAC,MAAZ,CAAmB,IAAI,CAAC,MAAxB,CAA+B,EAAE,CAAEN,KAAnC,EAFF,cAGE,KAAC,YAAD,EAAc,IAAI,CAAC,MAAnB,CAA0B,SAAS,CAAC,KAApC,EAHF,GADF,cAOE,MAAC,KAAD,EAAO,OAAO,CAAC,QAAf,kCAEE,KAAC,KAAD,EAAO,IAAI,CAAC,KAAZ,CAAkB,IAAI,CAAC,QAAvB,CAAgC,EAAE,CAAEA,KAApC,EAFF,cAGE,KAAC,YAAD,EAAc,IAAI,CAAC,QAAnB,CAA4B,SAAS,CAAC,KAAtC,EAHF,GAPF,cAaE,KAAC,MAAD,EAAQ,IAAI,CAAC,QAAb,0BAbF,GALF,EADJ,CAuBD,CAtCD,CAwCA,cAAeY,CAAAA,WAAf","sourcesContent":["import { FormList, Label} from './ContactForm.styled';\nimport { Formik, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport Notiflix from 'notiflix';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { Button, Input } from '@chakra-ui/react';\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nconst nameRegex = /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/;\nconst numberRegex =\n  /^\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/;\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(\n      nameRegex,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required(),\n  number: yup\n    .string()\n    .matches(\n      numberRegex,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required(),\n});\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = (values, { resetForm }) => {\n    const { name } = values;\n\n    if (contacts.some(contact => contact.name === name)) {\n      return Notiflix.Notify.info(`${name} is already in contacts!`);\n    }\n\n    resetForm();\n    dispatch(addContact(values));\n  };\n\n  return (\n      <Formik\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n        validationSchema={schema}\n      >\n        <FormList autoComplete=\"off\">\n          <Label htmlFor=\"name\">\n            Name:\n            <Field type=\"text\" name=\"name\" as={Input} />\n            <ErrorMessage name=\"name\" component=\"div\" />\n          </Label>\n\n          <Label htmlFor=\"number\">\n            Number:\n            <Field type=\"tel\" name=\"number\" as={Input} />\n            <ErrorMessage name=\"number\" component=\"div\" />\n          </Label>\n\n          <Button type=\"submit\">Add contacts</Button>\n        </FormList>\n      </Formik>\n  );\n};\n\nexport default ContactForm;\n"]},"metadata":{},"sourceType":"module"}