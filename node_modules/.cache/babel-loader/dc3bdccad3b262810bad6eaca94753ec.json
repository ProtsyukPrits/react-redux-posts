{"ast":null,"code":"\"use strict\";\n\nexports.ISOTimezoneWithZParser = void 0;\n\nvar _index = require(\"../../../constructFrom.js\");\n\nvar _index2 = require(\"../../../_lib/getTimezoneOffsetInMilliseconds.js\");\n\nvar _constants = require(\"../constants.js\");\n\nvar _Parser = require(\"../Parser.js\");\n\nvar _utils = require(\"../utils.js\"); // Timezone (ISO-8601. +00:00 is `'Z'`)\n\n\nclass ISOTimezoneWithZParser extends _Parser.Parser {\n  priority = 10;\n\n  parse(dateString, token) {\n    switch (token) {\n      case \"X\":\n        return (0, _utils.parseTimezonePattern)(_constants.timezonePatterns.basicOptionalMinutes, dateString);\n\n      case \"XX\":\n        return (0, _utils.parseTimezonePattern)(_constants.timezonePatterns.basic, dateString);\n\n      case \"XXXX\":\n        return (0, _utils.parseTimezonePattern)(_constants.timezonePatterns.basicOptionalSeconds, dateString);\n\n      case \"XXXXX\":\n        return (0, _utils.parseTimezonePattern)(_constants.timezonePatterns.extendedOptionalSeconds, dateString);\n\n      case \"XXX\":\n      default:\n        return (0, _utils.parseTimezonePattern)(_constants.timezonePatterns.extended, dateString);\n    }\n  }\n\n  set(date, flags, value) {\n    if (flags.timestampIsSet) return date;\n    return (0, _index.constructFrom)(date, date.getTime() - (0, _index2.getTimezoneOffsetInMilliseconds)(date) - value);\n  }\n\n  incompatibleTokens = [\"t\", \"T\", \"x\"];\n}\n\nexports.ISOTimezoneWithZParser = ISOTimezoneWithZParser;","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/node_modules/date-fns/parse/_lib/parsers/ISOTimezoneWithZParser.js"],"names":["exports","ISOTimezoneWithZParser","_index","require","_index2","_constants","_Parser","_utils","Parser","priority","parse","dateString","token","parseTimezonePattern","timezonePatterns","basicOptionalMinutes","basic","basicOptionalSeconds","extendedOptionalSeconds","extended","set","date","flags","value","timestampIsSet","constructFrom","getTime","getTimezoneOffsetInMilliseconds","incompatibleTokens"],"mappings":"AAAA;;AACAA,OAAO,CAACC,sBAAR,GAAiC,KAAK,CAAtC;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,2BAAD,CAApB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,kDAAD,CAArB;;AACA,IAAIE,UAAU,GAAGF,OAAO,CAAC,iBAAD,CAAxB;;AACA,IAAIG,OAAO,GAAGH,OAAO,CAAC,cAAD,CAArB;;AAEA,IAAII,MAAM,GAAGJ,OAAO,CAAC,aAAD,CAApB,C,CAEA;;;AACA,MAAMF,sBAAN,SAAqCK,OAAO,CAACE,MAA7C,CAAoD;AAClDC,EAAAA,QAAQ,GAAG,EAAH;;AAERC,EAAAA,KAAK,CAACC,UAAD,EAAaC,KAAb,EAAoB;AACvB,YAAQA,KAAR;AACE,WAAK,GAAL;AACE,eAAO,CAAC,GAAGL,MAAM,CAACM,oBAAX,EACLR,UAAU,CAACS,gBAAX,CAA4BC,oBADvB,EAELJ,UAFK,CAAP;;AAIF,WAAK,IAAL;AACE,eAAO,CAAC,GAAGJ,MAAM,CAACM,oBAAX,EACLR,UAAU,CAACS,gBAAX,CAA4BE,KADvB,EAELL,UAFK,CAAP;;AAIF,WAAK,MAAL;AACE,eAAO,CAAC,GAAGJ,MAAM,CAACM,oBAAX,EACLR,UAAU,CAACS,gBAAX,CAA4BG,oBADvB,EAELN,UAFK,CAAP;;AAIF,WAAK,OAAL;AACE,eAAO,CAAC,GAAGJ,MAAM,CAACM,oBAAX,EACLR,UAAU,CAACS,gBAAX,CAA4BI,uBADvB,EAELP,UAFK,CAAP;;AAIF,WAAK,KAAL;AACA;AACE,eAAO,CAAC,GAAGJ,MAAM,CAACM,oBAAX,EACLR,UAAU,CAACS,gBAAX,CAA4BK,QADvB,EAELR,UAFK,CAAP;AAvBJ;AA4BD;;AAEDS,EAAAA,GAAG,CAACC,IAAD,EAAOC,KAAP,EAAcC,KAAd,EAAqB;AACtB,QAAID,KAAK,CAACE,cAAV,EAA0B,OAAOH,IAAP;AAC1B,WAAO,CAAC,GAAGnB,MAAM,CAACuB,aAAX,EACLJ,IADK,EAELA,IAAI,CAACK,OAAL,KACE,CAAC,GAAGtB,OAAO,CAACuB,+BAAZ,EAA6CN,IAA7C,CADF,GAEEE,KAJG,CAAP;AAMD;;AAEDK,EAAAA,kBAAkB,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAH;AA5CgC;;AA8CpD5B,OAAO,CAACC,sBAAR,GAAiCA,sBAAjC","sourcesContent":["\"use strict\";\nexports.ISOTimezoneWithZParser = void 0;\nvar _index = require(\"../../../constructFrom.js\");\nvar _index2 = require(\"../../../_lib/getTimezoneOffsetInMilliseconds.js\");\nvar _constants = require(\"../constants.js\");\nvar _Parser = require(\"../Parser.js\");\n\nvar _utils = require(\"../utils.js\");\n\n// Timezone (ISO-8601. +00:00 is `'Z'`)\nclass ISOTimezoneWithZParser extends _Parser.Parser {\n  priority = 10;\n\n  parse(dateString, token) {\n    switch (token) {\n      case \"X\":\n        return (0, _utils.parseTimezonePattern)(\n          _constants.timezonePatterns.basicOptionalMinutes,\n          dateString,\n        );\n      case \"XX\":\n        return (0, _utils.parseTimezonePattern)(\n          _constants.timezonePatterns.basic,\n          dateString,\n        );\n      case \"XXXX\":\n        return (0, _utils.parseTimezonePattern)(\n          _constants.timezonePatterns.basicOptionalSeconds,\n          dateString,\n        );\n      case \"XXXXX\":\n        return (0, _utils.parseTimezonePattern)(\n          _constants.timezonePatterns.extendedOptionalSeconds,\n          dateString,\n        );\n      case \"XXX\":\n      default:\n        return (0, _utils.parseTimezonePattern)(\n          _constants.timezonePatterns.extended,\n          dateString,\n        );\n    }\n  }\n\n  set(date, flags, value) {\n    if (flags.timestampIsSet) return date;\n    return (0, _index.constructFrom)(\n      date,\n      date.getTime() -\n        (0, _index2.getTimezoneOffsetInMilliseconds)(date) -\n        value,\n    );\n  }\n\n  incompatibleTokens = [\"t\", \"T\", \"x\"];\n}\nexports.ISOTimezoneWithZParser = ISOTimezoneWithZParser;\n"]},"metadata":{},"sourceType":"script"}