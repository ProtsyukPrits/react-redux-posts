{"ast":null,"code":"import _defineProperty from \"/home/dmytro/react-redux-posts/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/home/dmytro/react-redux-posts/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/home/dmytro/react-redux-posts/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectWithoutProperties from \"/home/dmytro/react-redux-posts/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"startColor\", \"endColor\", \"isLoaded\", \"fadeDuration\", \"speed\", \"className\"],\n    _excluded2 = [\"noOfLines\", \"spacing\", \"skeletonHeight\", \"className\", \"startColor\", \"endColor\", \"isLoaded\", \"fadeDuration\", \"speed\", \"children\"],\n    _excluded3 = [\"size\"];\n// ../../../react-shim.js\nimport React from \"react\"; // src/skeleton.tsx\n\nimport { usePrevious } from \"@chakra-ui/react-use-previous\"; // ../../utilities/shared-utils/src/index.ts\n\nvar cx = function cx() {\n  for (var _len = arguments.length, classNames = new Array(_len), _key = 0; _key < _len; _key++) {\n    classNames[_key] = arguments[_key];\n  }\n\n  return classNames.filter(Boolean).join(\" \");\n}; // src/skeleton.tsx\n\n\nimport { chakra, cssVar, forwardRef, keyframes, omitThemingProps, useStyleConfig, useToken } from \"@chakra-ui/system\"; // src/use-is-first-render.ts\n\nimport { useEffect, useRef } from \"react\";\n\nfunction useIsFirstRender() {\n  var isFirstRender = useRef(true);\n  useEffect(function () {\n    isFirstRender.current = false;\n  }, []);\n  return isFirstRender.current;\n} // src/skeleton.tsx\n\n\nvar StyledSkeleton = chakra(\"div\", {\n  baseStyle: {\n    boxShadow: \"none\",\n    backgroundClip: \"padding-box\",\n    cursor: \"default\",\n    color: \"transparent\",\n    pointerEvents: \"none\",\n    userSelect: \"none\",\n    \"&::before, &::after, *\": {\n      visibility: \"hidden\"\n    }\n  }\n});\nvar $startColor = cssVar(\"skeleton-start-color\");\nvar $endColor = cssVar(\"skeleton-end-color\");\nvar fade = keyframes({\n  from: {\n    opacity: 0\n  },\n  to: {\n    opacity: 1\n  }\n});\nvar bgFade = keyframes({\n  from: {\n    borderColor: $startColor.reference,\n    background: $startColor.reference\n  },\n  to: {\n    borderColor: $endColor.reference,\n    background: $endColor.reference\n  }\n});\nvar Skeleton = forwardRef(function (props, ref) {\n  var styles = useStyleConfig(\"Skeleton\", props);\n  var isFirstRender = useIsFirstRender();\n\n  var _omitThemingProps = omitThemingProps(props),\n      _omitThemingProps$sta = _omitThemingProps.startColor,\n      startColor = _omitThemingProps$sta === void 0 ? \"\" : _omitThemingProps$sta,\n      _omitThemingProps$end = _omitThemingProps.endColor,\n      endColor = _omitThemingProps$end === void 0 ? \"\" : _omitThemingProps$end,\n      isLoaded = _omitThemingProps.isLoaded,\n      fadeDuration = _omitThemingProps.fadeDuration,\n      speed = _omitThemingProps.speed,\n      className = _omitThemingProps.className,\n      rest = _objectWithoutProperties(_omitThemingProps, _excluded);\n\n  var _useToken = useToken(\"colors\", [startColor, endColor]),\n      _useToken2 = _slicedToArray(_useToken, 2),\n      startColorVar = _useToken2[0],\n      endColorVar = _useToken2[1];\n\n  var wasPreviouslyLoaded = usePrevious(isLoaded);\n\n  var _className = cx(\"chakra-skeleton\", className);\n\n  var cssVarStyles = _objectSpread(_objectSpread({}, startColorVar && _defineProperty({}, $startColor.variable, startColorVar)), endColorVar && _defineProperty({}, $endColor.variable, endColorVar));\n\n  if (isLoaded) {\n    var animation = isFirstRender || wasPreviouslyLoaded ? \"none\" : \"\".concat(fade, \" \").concat(fadeDuration, \"s\");\n    return /* @__PURE__ */React.createElement(chakra.div, _objectSpread({\n      ref: ref,\n      className: _className,\n      __css: {\n        animation: animation\n      }\n    }, rest));\n  }\n\n  return /* @__PURE__ */React.createElement(StyledSkeleton, _objectSpread(_objectSpread({\n    ref: ref,\n    className: _className\n  }, rest), {}, {\n    __css: _objectSpread(_objectSpread(_objectSpread({}, styles), cssVarStyles), {}, {\n      _dark: _objectSpread({}, cssVarStyles),\n      animation: \"\".concat(speed, \"s linear infinite alternate \").concat(bgFade)\n    })\n  }));\n});\nSkeleton.defaultProps = {\n  fadeDuration: 0.4,\n  speed: 0.8\n};\nSkeleton.displayName = \"Skeleton\"; // src/skeleton-text.tsx\n\nimport { useBreakpointValue } from \"@chakra-ui/media-query\";\nimport { chakra as chakra2 } from \"@chakra-ui/system\";\n\nfunction range(count) {\n  return Array(count).fill(1).map(function (_, index) {\n    return index + 1;\n  });\n}\n\nvar defaultNoOfLines = 3;\n\nvar SkeletonText = function SkeletonText(props) {\n  var _props$noOfLines = props.noOfLines,\n      noOfLines = _props$noOfLines === void 0 ? defaultNoOfLines : _props$noOfLines,\n      _props$spacing = props.spacing,\n      spacing = _props$spacing === void 0 ? \"0.5rem\" : _props$spacing,\n      _props$skeletonHeight = props.skeletonHeight,\n      skeletonHeight = _props$skeletonHeight === void 0 ? \"0.5rem\" : _props$skeletonHeight,\n      className = props.className,\n      startColor = props.startColor,\n      endColor = props.endColor,\n      isLoaded = props.isLoaded,\n      fadeDuration = props.fadeDuration,\n      speed = props.speed,\n      children = props.children,\n      rest = _objectWithoutProperties(props, _excluded2);\n\n  var noOfLinesValue = useBreakpointValue(typeof noOfLines === \"number\" ? [noOfLines] : noOfLines) || defaultNoOfLines;\n  var numbers = range(noOfLinesValue);\n\n  var getWidth = function getWidth(index) {\n    if (noOfLinesValue > 1) {\n      return index === numbers.length ? \"80%\" : \"100%\";\n    }\n\n    return \"100%\";\n  };\n\n  var _className = cx(\"chakra-skeleton__group\", className);\n\n  return /* @__PURE__ */React.createElement(chakra2.div, _objectSpread({\n    className: _className\n  }, rest), numbers.map(function (number, index) {\n    if (isLoaded && index > 0) {\n      return null;\n    }\n\n    var sizeProps = isLoaded ? null : {\n      mb: number === numbers.length ? \"0\" : spacing,\n      width: getWidth(number),\n      height: skeletonHeight\n    };\n    return /* @__PURE__ */React.createElement(Skeleton, _objectSpread({\n      key: numbers.length.toString() + number,\n      startColor: startColor,\n      endColor: endColor,\n      isLoaded: isLoaded,\n      fadeDuration: fadeDuration,\n      speed: speed\n    }, sizeProps), index === 0 ? children : void 0);\n  }));\n};\n\nSkeletonText.displayName = \"SkeletonText\"; // src/skeleton-circle.tsx\n\nvar SkeletonCircle = function SkeletonCircle(_ref3) {\n  var _ref3$size = _ref3.size,\n      size = _ref3$size === void 0 ? \"2rem\" : _ref3$size,\n      rest = _objectWithoutProperties(_ref3, _excluded3);\n\n  return /* @__PURE__ */React.createElement(Skeleton, _objectSpread({\n    borderRadius: \"full\",\n    boxSize: size\n  }, rest));\n};\n\nSkeletonCircle.displayName = \"SkeletonCircle\";\nexport { Skeleton, SkeletonCircle, SkeletonText };","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/node_modules/@chakra-ui/skeleton/dist/index.esm.js"],"names":["React","usePrevious","cx","classNames","filter","Boolean","join","chakra","cssVar","forwardRef","keyframes","omitThemingProps","useStyleConfig","useToken","useEffect","useRef","useIsFirstRender","isFirstRender","current","StyledSkeleton","baseStyle","boxShadow","backgroundClip","cursor","color","pointerEvents","userSelect","visibility","$startColor","$endColor","fade","from","opacity","to","bgFade","borderColor","reference","background","Skeleton","props","ref","styles","startColor","endColor","isLoaded","fadeDuration","speed","className","rest","startColorVar","endColorVar","wasPreviouslyLoaded","_className","cssVarStyles","variable","animation","createElement","div","__css","_dark","defaultProps","displayName","useBreakpointValue","chakra2","range","count","Array","fill","map","_","index","defaultNoOfLines","SkeletonText","noOfLines","spacing","skeletonHeight","children","noOfLinesValue","numbers","getWidth","length","number","sizeProps","mb","width","height","key","toString","SkeletonCircle","size","borderRadius","boxSize"],"mappings":"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","sourcesContent":["// ../../../react-shim.js\nimport React from \"react\";\n\n// src/skeleton.tsx\nimport { usePrevious } from \"@chakra-ui/react-use-previous\";\n\n// ../../utilities/shared-utils/src/index.ts\nvar cx = (...classNames) => classNames.filter(Boolean).join(\" \");\n\n// src/skeleton.tsx\nimport {\n  chakra,\n  cssVar,\n  forwardRef,\n  keyframes,\n  omitThemingProps,\n  useStyleConfig,\n  useToken\n} from \"@chakra-ui/system\";\n\n// src/use-is-first-render.ts\nimport { useEffect, useRef } from \"react\";\nfunction useIsFirstRender() {\n  const isFirstRender = useRef(true);\n  useEffect(() => {\n    isFirstRender.current = false;\n  }, []);\n  return isFirstRender.current;\n}\n\n// src/skeleton.tsx\nvar StyledSkeleton = chakra(\"div\", {\n  baseStyle: {\n    boxShadow: \"none\",\n    backgroundClip: \"padding-box\",\n    cursor: \"default\",\n    color: \"transparent\",\n    pointerEvents: \"none\",\n    userSelect: \"none\",\n    \"&::before, &::after, *\": {\n      visibility: \"hidden\"\n    }\n  }\n});\nvar $startColor = cssVar(\"skeleton-start-color\");\nvar $endColor = cssVar(\"skeleton-end-color\");\nvar fade = keyframes({\n  from: { opacity: 0 },\n  to: { opacity: 1 }\n});\nvar bgFade = keyframes({\n  from: {\n    borderColor: $startColor.reference,\n    background: $startColor.reference\n  },\n  to: {\n    borderColor: $endColor.reference,\n    background: $endColor.reference\n  }\n});\nvar Skeleton = forwardRef((props, ref) => {\n  const styles = useStyleConfig(\"Skeleton\", props);\n  const isFirstRender = useIsFirstRender();\n  const {\n    startColor = \"\",\n    endColor = \"\",\n    isLoaded,\n    fadeDuration,\n    speed,\n    className,\n    ...rest\n  } = omitThemingProps(props);\n  const [startColorVar, endColorVar] = useToken(\"colors\", [\n    startColor,\n    endColor\n  ]);\n  const wasPreviouslyLoaded = usePrevious(isLoaded);\n  const _className = cx(\"chakra-skeleton\", className);\n  const cssVarStyles = {\n    ...startColorVar && { [$startColor.variable]: startColorVar },\n    ...endColorVar && { [$endColor.variable]: endColorVar }\n  };\n  if (isLoaded) {\n    const animation = isFirstRender || wasPreviouslyLoaded ? \"none\" : `${fade} ${fadeDuration}s`;\n    return /* @__PURE__ */ React.createElement(chakra.div, {\n      ref,\n      className: _className,\n      __css: { animation },\n      ...rest\n    });\n  }\n  return /* @__PURE__ */ React.createElement(StyledSkeleton, {\n    ref,\n    className: _className,\n    ...rest,\n    __css: {\n      ...styles,\n      ...cssVarStyles,\n      _dark: { ...cssVarStyles },\n      animation: `${speed}s linear infinite alternate ${bgFade}`\n    }\n  });\n});\nSkeleton.defaultProps = {\n  fadeDuration: 0.4,\n  speed: 0.8\n};\nSkeleton.displayName = \"Skeleton\";\n\n// src/skeleton-text.tsx\nimport { useBreakpointValue } from \"@chakra-ui/media-query\";\nimport { chakra as chakra2 } from \"@chakra-ui/system\";\nfunction range(count) {\n  return Array(count).fill(1).map((_, index) => index + 1);\n}\nvar defaultNoOfLines = 3;\nvar SkeletonText = (props) => {\n  const {\n    noOfLines = defaultNoOfLines,\n    spacing = \"0.5rem\",\n    skeletonHeight = \"0.5rem\",\n    className,\n    startColor,\n    endColor,\n    isLoaded,\n    fadeDuration,\n    speed,\n    children,\n    ...rest\n  } = props;\n  const noOfLinesValue = useBreakpointValue(typeof noOfLines === \"number\" ? [noOfLines] : noOfLines) || defaultNoOfLines;\n  const numbers = range(noOfLinesValue);\n  const getWidth = (index) => {\n    if (noOfLinesValue > 1) {\n      return index === numbers.length ? \"80%\" : \"100%\";\n    }\n    return \"100%\";\n  };\n  const _className = cx(\"chakra-skeleton__group\", className);\n  return /* @__PURE__ */ React.createElement(chakra2.div, {\n    className: _className,\n    ...rest\n  }, numbers.map((number, index) => {\n    if (isLoaded && index > 0) {\n      return null;\n    }\n    const sizeProps = isLoaded ? null : {\n      mb: number === numbers.length ? \"0\" : spacing,\n      width: getWidth(number),\n      height: skeletonHeight\n    };\n    return /* @__PURE__ */ React.createElement(Skeleton, {\n      key: numbers.length.toString() + number,\n      startColor,\n      endColor,\n      isLoaded,\n      fadeDuration,\n      speed,\n      ...sizeProps\n    }, index === 0 ? children : void 0);\n  }));\n};\nSkeletonText.displayName = \"SkeletonText\";\n\n// src/skeleton-circle.tsx\nvar SkeletonCircle = ({\n  size = \"2rem\",\n  ...rest\n}) => /* @__PURE__ */ React.createElement(Skeleton, {\n  borderRadius: \"full\",\n  boxSize: size,\n  ...rest\n});\nSkeletonCircle.displayName = \"SkeletonCircle\";\nexport {\n  Skeleton,\n  SkeletonCircle,\n  SkeletonText\n};\n"]},"metadata":{},"sourceType":"module"}