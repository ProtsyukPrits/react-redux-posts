{"ast":null,"code":"\"use strict\";\n\nexports.formatISO = formatISO;\n\nvar _index = require(\"./toDate.js\");\n\nvar _index2 = require(\"./_lib/addLeadingZeros.js\");\n/**\n * The {@link formatISO} function options.\n */\n\n/**\n * @name formatISO\n * @category Common Helpers\n * @summary Format the date according to the ISO 8601 standard (https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a003169814.htm).\n *\n * @description\n * Return the formatted date string in ISO 8601 format. Options may be passed to control the parts and notations of the date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param options - An object with options.\n *\n * @returns The formatted date string (in loca.l time zone)\n *\n * @throws `date` must not be Invalid Date\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18T19:00:52Z'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601, short format (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\n * //=> '20190918T190052'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, date only:\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\n * //=> '2019-09-18'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, time only (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\n * //=> '19:00:52Z'\n */\n\n\nfunction formatISO(date, options) {\n  const _date = (0, _index.toDate)(date);\n\n  if (isNaN(_date.getTime())) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  const format = options?.format ?? \"extended\";\n  const representation = options?.representation ?? \"complete\";\n  let result = \"\";\n  let tzOffset = \"\";\n  const dateDelimiter = format === \"extended\" ? \"-\" : \"\";\n  const timeDelimiter = format === \"extended\" ? \":\" : \"\"; // Representation is either 'date' or 'complete'\n\n  if (representation !== \"time\") {\n    const day = (0, _index2.addLeadingZeros)(_date.getDate(), 2);\n    const month = (0, _index2.addLeadingZeros)(_date.getMonth() + 1, 2);\n    const year = (0, _index2.addLeadingZeros)(_date.getFullYear(), 4); // yyyyMMdd or yyyy-MM-dd.\n\n    result = `${year}${dateDelimiter}${month}${dateDelimiter}${day}`;\n  } // Representation is either 'time' or 'complete'\n\n\n  if (representation !== \"date\") {\n    // Add the timezone.\n    const offset = _date.getTimezoneOffset();\n\n    if (offset !== 0) {\n      const absoluteOffset = Math.abs(offset);\n      const hourOffset = (0, _index2.addLeadingZeros)(Math.trunc(absoluteOffset / 60), 2);\n      const minuteOffset = (0, _index2.addLeadingZeros)(absoluteOffset % 60, 2); // If less than 0, the sign is +, because it is ahead of time.\n\n      const sign = offset < 0 ? \"+\" : \"-\";\n      tzOffset = `${sign}${hourOffset}:${minuteOffset}`;\n    } else {\n      tzOffset = \"Z\";\n    }\n\n    const hour = (0, _index2.addLeadingZeros)(_date.getHours(), 2);\n    const minute = (0, _index2.addLeadingZeros)(_date.getMinutes(), 2);\n    const second = (0, _index2.addLeadingZeros)(_date.getSeconds(), 2); // If there's also date, separate it with time with 'T'\n\n    const separator = result === \"\" ? \"\" : \"T\"; // Creates a time string consisting of hour, minute, and second, separated by delimiters, if defined.\n\n    const time = [hour, minute, second].join(timeDelimiter); // HHmmss or HH:mm:ss.\n\n    result = `${result}${separator}${time}${tzOffset}`;\n  }\n\n  return result;\n}","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/node_modules/date-fns/formatISO.js"],"names":["exports","formatISO","_index","require","_index2","date","options","_date","toDate","isNaN","getTime","RangeError","format","representation","result","tzOffset","dateDelimiter","timeDelimiter","day","addLeadingZeros","getDate","month","getMonth","year","getFullYear","offset","getTimezoneOffset","absoluteOffset","Math","abs","hourOffset","trunc","minuteOffset","sign","hour","getHours","minute","getMinutes","second","getSeconds","separator","time","join"],"mappings":"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","sourcesContent":["\"use strict\";\nexports.formatISO = formatISO;\nvar _index = require(\"./toDate.js\");\n\nvar _index2 = require(\"./_lib/addLeadingZeros.js\");\n\n/**\n * The {@link formatISO} function options.\n */\n\n/**\n * @name formatISO\n * @category Common Helpers\n * @summary Format the date according to the ISO 8601 standard (https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a003169814.htm).\n *\n * @description\n * Return the formatted date string in ISO 8601 format. Options may be passed to control the parts and notations of the date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param options - An object with options.\n *\n * @returns The formatted date string (in loca.l time zone)\n *\n * @throws `date` must not be Invalid Date\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18T19:00:52Z'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601, short format (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\n * //=> '20190918T190052'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, date only:\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\n * //=> '2019-09-18'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, time only (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\n * //=> '19:00:52Z'\n */\nfunction formatISO(date, options) {\n  const _date = (0, _index.toDate)(date);\n\n  if (isNaN(_date.getTime())) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  const format = options?.format ?? \"extended\";\n  const representation = options?.representation ?? \"complete\";\n\n  let result = \"\";\n  let tzOffset = \"\";\n\n  const dateDelimiter = format === \"extended\" ? \"-\" : \"\";\n  const timeDelimiter = format === \"extended\" ? \":\" : \"\";\n\n  // Representation is either 'date' or 'complete'\n  if (representation !== \"time\") {\n    const day = (0, _index2.addLeadingZeros)(_date.getDate(), 2);\n    const month = (0, _index2.addLeadingZeros)(_date.getMonth() + 1, 2);\n    const year = (0, _index2.addLeadingZeros)(_date.getFullYear(), 4);\n\n    // yyyyMMdd or yyyy-MM-dd.\n    result = `${year}${dateDelimiter}${month}${dateDelimiter}${day}`;\n  }\n\n  // Representation is either 'time' or 'complete'\n  if (representation !== \"date\") {\n    // Add the timezone.\n    const offset = _date.getTimezoneOffset();\n\n    if (offset !== 0) {\n      const absoluteOffset = Math.abs(offset);\n      const hourOffset = (0, _index2.addLeadingZeros)(\n        Math.trunc(absoluteOffset / 60),\n        2,\n      );\n      const minuteOffset = (0, _index2.addLeadingZeros)(absoluteOffset % 60, 2);\n      // If less than 0, the sign is +, because it is ahead of time.\n      const sign = offset < 0 ? \"+\" : \"-\";\n\n      tzOffset = `${sign}${hourOffset}:${minuteOffset}`;\n    } else {\n      tzOffset = \"Z\";\n    }\n\n    const hour = (0, _index2.addLeadingZeros)(_date.getHours(), 2);\n    const minute = (0, _index2.addLeadingZeros)(_date.getMinutes(), 2);\n    const second = (0, _index2.addLeadingZeros)(_date.getSeconds(), 2);\n\n    // If there's also date, separate it with time with 'T'\n    const separator = result === \"\" ? \"\" : \"T\";\n\n    // Creates a time string consisting of hour, minute, and second, separated by delimiters, if defined.\n    const time = [hour, minute, second].join(timeDelimiter);\n\n    // HHmmss or HH:mm:ss.\n    result = `${result}${separator}${time}${tzOffset}`;\n  }\n\n  return result;\n}\n"]},"metadata":{},"sourceType":"script"}