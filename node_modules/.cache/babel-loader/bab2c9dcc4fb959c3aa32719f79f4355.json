{"ast":null,"code":"import _objectSpread from \"/home/dmytro/react-redux-posts/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/home/dmytro/react-redux-posts/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n// src/index.ts\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nimport { useCallback, useState, useId } from \"react\";\n\nfunction useDisclosure() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var onCloseProp = props.onClose,\n      onOpenProp = props.onOpen,\n      isOpenProp = props.isOpen,\n      idProp = props.id;\n  var handleOpen = useCallbackRef(onOpenProp);\n  var handleClose = useCallbackRef(onCloseProp);\n\n  var _useState = useState(props.defaultIsOpen || false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isOpenState = _useState2[0],\n      setIsOpen = _useState2[1];\n\n  var isOpen = isOpenProp !== void 0 ? isOpenProp : isOpenState;\n  var isControlled = isOpenProp !== void 0;\n  var uid = useId();\n  var id = idProp !== null && idProp !== void 0 ? idProp : \"disclosure-\".concat(uid);\n  var onClose = useCallback(function () {\n    if (!isControlled) {\n      setIsOpen(false);\n    }\n\n    handleClose == null ? void 0 : handleClose();\n  }, [isControlled, handleClose]);\n  var onOpen = useCallback(function () {\n    if (!isControlled) {\n      setIsOpen(true);\n    }\n\n    handleOpen == null ? void 0 : handleOpen();\n  }, [isControlled, handleOpen]);\n  var onToggle = useCallback(function () {\n    if (isOpen) {\n      onClose();\n    } else {\n      onOpen();\n    }\n  }, [isOpen, onOpen, onClose]);\n\n  function getButtonProps() {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _objectSpread(_objectSpread({}, props2), {}, {\n      \"aria-expanded\": isOpen,\n      \"aria-controls\": id,\n      onClick: function onClick(event) {\n        var _a;\n\n        (_a = props2.onClick) == null ? void 0 : _a.call(props2, event);\n        onToggle();\n      }\n    });\n  }\n\n  function getDisclosureProps() {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _objectSpread(_objectSpread({}, props2), {}, {\n      hidden: !isOpen,\n      id: id\n    });\n  }\n\n  return {\n    isOpen: isOpen,\n    onOpen: onOpen,\n    onClose: onClose,\n    onToggle: onToggle,\n    isControlled: isControlled,\n    getButtonProps: getButtonProps,\n    getDisclosureProps: getDisclosureProps\n  };\n}\n\nexport { useDisclosure };","map":{"version":3,"sources":["/home/dmytro/react-redux-posts/node_modules/@chakra-ui/react-use-disclosure/dist/index.esm.js"],"names":["useCallbackRef","useCallback","useState","useId","useDisclosure","props","onCloseProp","onClose","onOpenProp","onOpen","isOpenProp","isOpen","idProp","id","handleOpen","handleClose","defaultIsOpen","isOpenState","setIsOpen","isControlled","uid","onToggle","getButtonProps","props2","onClick","event","_a","call","getDisclosureProps","hidden"],"mappings":";;AAAA;AACA,SAASA,cAAT,QAA+B,mCAA/B;AACA,SAASC,WAAT,EAAsBC,QAAtB,EAAgCC,KAAhC,QAA6C,OAA7C;;AACA,SAASC,aAAT,GAAmC;AAAA,MAAZC,KAAY,uEAAJ,EAAI;AACjC,MACWC,WADX,GAKID,KALJ,CACEE,OADF;AAAA,MAEUC,UAFV,GAKIH,KALJ,CAEEI,MAFF;AAAA,MAGUC,UAHV,GAKIL,KALJ,CAGEM,MAHF;AAAA,MAIMC,MAJN,GAKIP,KALJ,CAIEQ,EAJF;AAMA,MAAMC,UAAU,GAAGd,cAAc,CAACQ,UAAD,CAAjC;AACA,MAAMO,WAAW,GAAGf,cAAc,CAACM,WAAD,CAAlC;;AACA,kBAAiCJ,QAAQ,CAACG,KAAK,CAACW,aAAN,IAAuB,KAAxB,CAAzC;AAAA;AAAA,MAAOC,WAAP;AAAA,MAAoBC,SAApB;;AACA,MAAMP,MAAM,GAAGD,UAAU,KAAK,KAAK,CAApB,GAAwBA,UAAxB,GAAqCO,WAApD;AACA,MAAME,YAAY,GAAGT,UAAU,KAAK,KAAK,CAAzC;AACA,MAAMU,GAAG,GAAGjB,KAAK,EAAjB;AACA,MAAMU,EAAE,GAAGD,MAAH,aAAGA,MAAH,cAAGA,MAAH,wBAA2BQ,GAA3B,CAAR;AACA,MAAMb,OAAO,GAAGN,WAAW,CAAC,YAAM;AAChC,QAAI,CAACkB,YAAL,EAAmB;AACjBD,MAAAA,SAAS,CAAC,KAAD,CAAT;AACD;;AACDH,IAAAA,WAAW,IAAI,IAAf,GAAsB,KAAK,CAA3B,GAA+BA,WAAW,EAA1C;AACD,GAL0B,EAKxB,CAACI,YAAD,EAAeJ,WAAf,CALwB,CAA3B;AAMA,MAAMN,MAAM,GAAGR,WAAW,CAAC,YAAM;AAC/B,QAAI,CAACkB,YAAL,EAAmB;AACjBD,MAAAA,SAAS,CAAC,IAAD,CAAT;AACD;;AACDJ,IAAAA,UAAU,IAAI,IAAd,GAAqB,KAAK,CAA1B,GAA8BA,UAAU,EAAxC;AACD,GALyB,EAKvB,CAACK,YAAD,EAAeL,UAAf,CALuB,CAA1B;AAMA,MAAMO,QAAQ,GAAGpB,WAAW,CAAC,YAAM;AACjC,QAAIU,MAAJ,EAAY;AACVJ,MAAAA,OAAO;AACR,KAFD,MAEO;AACLE,MAAAA,MAAM;AACP;AACF,GAN2B,EAMzB,CAACE,MAAD,EAASF,MAAT,EAAiBF,OAAjB,CANyB,CAA5B;;AAOA,WAASe,cAAT,GAAqC;AAAA,QAAbC,MAAa,uEAAJ,EAAI;AACnC,2CACKA,MADL;AAEE,uBAAiBZ,MAFnB;AAGE,uBAAiBE,EAHnB;AAIEW,MAAAA,OAJF,mBAIUC,KAJV,EAIiB;AACb,YAAIC,EAAJ;;AACA,SAACA,EAAE,GAAGH,MAAM,CAACC,OAAb,KAAyB,IAAzB,GAAgC,KAAK,CAArC,GAAyCE,EAAE,CAACC,IAAH,CAAQJ,MAAR,EAAgBE,KAAhB,CAAzC;AACAJ,QAAAA,QAAQ;AACT;AARH;AAUD;;AACD,WAASO,kBAAT,GAAyC;AAAA,QAAbL,MAAa,uEAAJ,EAAI;AACvC,2CACKA,MADL;AAEEM,MAAAA,MAAM,EAAE,CAAClB,MAFX;AAGEE,MAAAA,EAAE,EAAFA;AAHF;AAKD;;AACD,SAAO;AACLF,IAAAA,MAAM,EAANA,MADK;AAELF,IAAAA,MAAM,EAANA,MAFK;AAGLF,IAAAA,OAAO,EAAPA,OAHK;AAILc,IAAAA,QAAQ,EAARA,QAJK;AAKLF,IAAAA,YAAY,EAAZA,YALK;AAMLG,IAAAA,cAAc,EAAdA,cANK;AAOLM,IAAAA,kBAAkB,EAAlBA;AAPK,GAAP;AASD;;AACD,SACExB,aADF","sourcesContent":["// src/index.ts\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nimport { useCallback, useState, useId } from \"react\";\nfunction useDisclosure(props = {}) {\n  const {\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    isOpen: isOpenProp,\n    id: idProp\n  } = props;\n  const handleOpen = useCallbackRef(onOpenProp);\n  const handleClose = useCallbackRef(onCloseProp);\n  const [isOpenState, setIsOpen] = useState(props.defaultIsOpen || false);\n  const isOpen = isOpenProp !== void 0 ? isOpenProp : isOpenState;\n  const isControlled = isOpenProp !== void 0;\n  const uid = useId();\n  const id = idProp ?? `disclosure-${uid}`;\n  const onClose = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(false);\n    }\n    handleClose == null ? void 0 : handleClose();\n  }, [isControlled, handleClose]);\n  const onOpen = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(true);\n    }\n    handleOpen == null ? void 0 : handleOpen();\n  }, [isControlled, handleOpen]);\n  const onToggle = useCallback(() => {\n    if (isOpen) {\n      onClose();\n    } else {\n      onOpen();\n    }\n  }, [isOpen, onOpen, onClose]);\n  function getButtonProps(props2 = {}) {\n    return {\n      ...props2,\n      \"aria-expanded\": isOpen,\n      \"aria-controls\": id,\n      onClick(event) {\n        var _a;\n        (_a = props2.onClick) == null ? void 0 : _a.call(props2, event);\n        onToggle();\n      }\n    };\n  }\n  function getDisclosureProps(props2 = {}) {\n    return {\n      ...props2,\n      hidden: !isOpen,\n      id\n    };\n  }\n  return {\n    isOpen,\n    onOpen,\n    onClose,\n    onToggle,\n    isControlled,\n    getButtonProps,\n    getDisclosureProps\n  };\n}\nexport {\n  useDisclosure\n};\n"]},"metadata":{},"sourceType":"module"}